/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.fee;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFComment;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPatriarch;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.RegionUtil;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.action.base.ReadExcelFile;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.CpyUserInfo;
import com.patent.module.CusBackFeeInfo;
import com.patent.module.CusPzInfo;
import com.patent.module.FeeExportRecordInfo;
import com.patent.module.FeeImportDealRecordInfo;
import com.patent.module.FeeImportRecordInfo;
import com.patent.module.ZlajFeeInfoTb;
import com.patent.module.ZlajFeeSubInfoTb;
import com.patent.module.ZlajMainInfoTb;
import com.patent.page.PageConst;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.CusBackFeeInfoManager;
import com.patent.service.FeeExportRecordInfoManager;
import com.patent.service.FeeImportRecordInfoManager;
import com.patent.service.ZlajFeeInfoManager;
import com.patent.service.ZlajMainInfoManager;
import com.patent.tools.CommonTools;
import com.patent.tools.Convert;
import com.patent.tools.CurrentTime;
import com.patent.tools.FileOpration;
import com.patent.util.Constants;
import com.patent.util.WebUrl;
import com.patent.web.Ability;

/** 
 * MyEclipse Struts
 * Creation date: 12-10-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FeeAction extends DispatchAction {
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色编号
	 * @param request
	 * @return
	 */
	private Integer getLoginRoleId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 获取session中的登录类型
	 * @author Administrator
	 * @date 2018-7-31 下午09:39:57
	 * @ModifiedBy
	 * @param request
	 * @return
	 */
	private String getLoginType(HttpServletRequest request){
        String loginType = (String)request.getSession(false).getAttribute(Constants.LOGIN_TYPE);
        return loginType;
	}
	
	/**
	 * 封装json
	*  @author  Administrator
	*  @ModifiedBy  
	*  @date  2018-8-21 下午10:17:05
	*  @param obj
	*  @param response
	*  @throws IOException
	 */
	private void getJsonPkg(Object obj,HttpServletResponse response) throws IOException{
		String json = JSON.toJSONString(obj);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
	}
	
	/**
	 * 设置合并单元格后的边框
	 * @description
	 * @author Administrator
	 * @date 2018-11-21 上午09:48:01
	 * @param border
	 * @param rowIndex
	 * @param lastRow
	 * @param firstColumn
	 * @param lastColumn
	 * @param sheet
	 * @param wb
	 */
	public void setJoinBorderStyle(int border, Integer rowIndex, Integer lastRow, Integer firstColumn, Integer lastColumn, HSSFSheet sheet, HSSFWorkbook wb){
		CellRangeAddress region = new CellRangeAddress(rowIndex,lastRow,firstColumn,lastColumn);//first row (0-based)  from 行
		sheet.addMergedRegion(region);
		
        RegionUtil.setBorderBottom(border, region, sheet, wb);   //下边框
        RegionUtil.setBorderLeft(border, region, sheet, wb);     //左边框
        RegionUtil.setBorderRight(border, region, sheet, wb);    //右边框
        RegionUtil.setBorderTop(border, region, sheet, wb);      //上边框
    }
	
	/**
	 * 封装添加单元格数据内容方法
	 * @description
	 * @author Administrator
	 * @date 2018-11-28 上午09:40:37
	 * @param column0
	 * @param column1
	 * @param column2
	 * @param column3
	 * @param column4
	 * @param column5
	 * @param row
	 * @param style
	 */
	public void addCellData(List<String> columnList,HSSFRow row,HSSFCellStyle style){
		Integer colLen = columnList.size();
		if(colLen > 0){
			for(Integer i = 0 ; i < colLen ; i++){
				HSSFCell cell = row.createCell(i); 
		        cell.setCellStyle(style);  
		        cell.setCellValue(columnList.get(i)); 
			}
		}
	}
	
	/**
	 * 导向费用页面
	 * @description
	 * @author Administrator
	 * @date 2018-12-10 上午09:05:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goFeePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		return mapping.findForward("feePage");
	}
	
	/**
	 * 获取当前代理机构的费用情况
	 * @description
	 * @author Administrator
	 * @date 2018-12-5 上午09:28:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getAllFeeInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listFee");//只有具有浏览权限的人员
			}
			if(abilityFlag){
				Integer feeStatus = CommonTools.getFinalInteger("feeStatus", request);//费用缴纳状态（0未交,1：已交,2:全部）
				Integer qdStatus  = CommonTools.getFinalInteger("qdStatus", request);//0：专利局缴费清单-国家，1：专利缴费清单-客户
				Integer diffDays = CommonTools.getFinalInteger("diffDays", request);//代理机构缴费截止日期距当前日期天数小于等于指定的天数
				String zlNo = CommonTools.getFinalStr("zlNo", request);
				String ajNo = CommonTools.getFinalStr("ajNo", request);
				Integer cusId = CommonTools.getFinalInteger("cusId", request);
				String sDate = CommonTools.getFinalStr("sDate", request);//缴费开始时间
				String eDate = CommonTools.getFinalStr("eDate", request);//缴费结束时间
				
				List<ZlajFeeInfoTb> zlfList = new ArrayList<ZlajFeeInfoTb>();
				Integer count = 0;
				if(feeStatus.equals(0)){//未交费
					zlfList = fm.listInfoByOpt(cpyId, feeStatus, diffDays, zlNo, ajNo, cusId, "", "", qdStatus, 0, 0);
				}else{//已缴费或者全部（全部的时候只有专利编号、客户编号为查询条件）
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					count = fm.getCountByOpt(cpyId, feeStatus, zlNo, ajNo, cusId,sDate,eDate);
					if(count > 0){
						zlfList = fm.listInfoByOpt(cpyId, feeStatus, diffDays, zlNo, ajNo, cusId,sDate,eDate, qdStatus,pageNo, pageSize); 
					}
				}
				if(zlfList.size() > 0){//
					List<Object> list_d = new ArrayList<Object>();
					String currDate = CurrentTime.getStringDate();
					Double feeTotal_wj = 0d;//未交费用统计
					for(Iterator<ZlajFeeInfoTb> it = zlfList.iterator() ; it.hasNext();){
						ZlajFeeInfoTb zlf = it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						ZlajMainInfoTb zl = zlf.getZlajMainInfoTb();
						Integer feeStatus_db = zlf.getFeeStatus();
						map_d.put("feeId", zlf.getId());
						map_d.put("feeStatus", feeStatus_db);
						map_d.put("zlNo", zl.getAjNoGf());
						map_d.put("ajNo", zl.getAjNo());
						map_d.put("zlName", zl.getAjTitle());
						map_d.put("sqrName", zl.getAjSqrName());
						map_d.put("feeName", zlf.getFeeTypeInfoTb().getFeeName());
						String feeEndDateJj = zlf.getFeeEndDateJj();
						String feeEndDateGf = zlf.getFeeEndDateGf();
						Double feePrice = zlf.getFeePrice();
						map_d.put("feeEndDateJj", feeEndDateJj);
						map_d.put("feeEndDateGf", feeEndDateGf);
						map_d.put("feePrice", feePrice);
						Integer diffDays_jj = 0;
						Integer diffDays_gf = 0;
						if(feeStatus_db.equals(0)){//未交费用
							diffDays_jj = CurrentTime.compareDate(currDate,feeEndDateJj);
							diffDays_gf = CurrentTime.compareDate(currDate,feeEndDateGf);
							feeTotal_wj = Convert.convertInputNumber_2(feeTotal_wj + feePrice);
						}
						map_d.put("diffDays_jj", diffDays_jj);
						map_d.put("diffDays_Gf", diffDays_gf);
						
						map_d.put("jfDate", zlf.getFeeJnDate());
						map_d.put("backFee", zlf.getBackFee());//客户退还的费用
						map_d.put("backDate", zlf.getBackDate());//客户退还时间
						map_d.put("feeBatchNo", zlf.getFeeBatchNo());
						map_d.put("bankSerialNo", zlf.getBankSerialNo());
						map_d.put("fpDate", zlf.getFpDate());
						map_d.put("fpNo", zlf.getFpNo());
						
						list_d.add(map_d);
					}
					
					if(feeStatus.equals(0)){//未交
						map.put("wjFeeTotal", Convert.convertInputNumber_3(feeTotal_wj));//应缴费总计--未交费用模式下使用
					}else if(feeStatus.equals(1)){//已交
						List<Object> yjObj = fm.getTjFeeInfoByOpt(cpyId, zlNo, ajNo, cusId, sDate, eDate);
						Object[] obj = (Object[])yjObj.get(0);
						Double yjFeeTotal = (Double)obj[0];//已交费用总计
						Double backFeeTotal = (Double)obj[1];//实收费用总计
						Double unBackFeeTotal = yjFeeTotal - backFeeTotal;//未收费用总计
						map.put("yjFeeTotal", Convert.convertInputNumber_3(yjFeeTotal));//已交费用总计
						map.put("backFeeTotal", Convert.convertInputNumber_3(backFeeTotal));//实收费用总计
						map.put("noBackFeeTotal", Convert.convertInputNumber_3(unBackFeeTotal));//未收费用总计
					}else{
						List<ZlajFeeInfoTb> zlfList_all = fm.listAllInfoByOpt(cpyId, zlNo, cusId);//全部费用
						Double feeTotal = 0d;//全部费用总计
						Double yjFeeTotal = 0d;//已交费用总计
						Double wjFeeTotal = 0d;//未缴费用总计
						Double backFeeTotal = 0d;//实收费用总计
						Double unBackFeeTotal = 0d;//未收费用总计
						for(Iterator<ZlajFeeInfoTb> it_all = zlfList_all.iterator() ; it_all.hasNext();){
							ZlajFeeInfoTb zlf_all = it_all.next();
							Double feePrice = zlf_all.getFeePrice();
							feeTotal = feeTotal + feePrice;//所有费用总计
							Integer feeStatus_1 = zlf_all.getFeeStatus();
							if(feeStatus_1.equals(0)){//未缴费
								wjFeeTotal = wjFeeTotal + feePrice;
							}else{//已缴费
								yjFeeTotal = yjFeeTotal + feePrice;
								backFeeTotal = backFeeTotal + zlf_all.getBackFee();
							}
						}
						unBackFeeTotal = yjFeeTotal - backFeeTotal;
						map.put("feeTotal", Convert.convertInputNumber_3(feeTotal));//全部费用总计
						map.put("wjFeeTotal", Convert.convertInputNumber_3(wjFeeTotal));//未缴费总计
						map.put("yjFeeTotal", Convert.convertInputNumber_3(yjFeeTotal));//已交费用总计
						map.put("backFeeTotal", Convert.convertInputNumber_3(backFeeTotal));//实收费用总计
						map.put("noBackFeeTotal", Convert.convertInputNumber_3(unBackFeeTotal));//未收费用总计
					}
					map.put("msg", "success");
					map.put("data", list_d);
					map.put("count", count);
					map.put("code", 0);
				}else{
					map.put("msg", "noInfo");
				}
			}
		}
		this.getJsonPkg(map, response);
		return null;
	}

	
	/**
	 * 导出未缴费清单到excel(上交国家局/客户)
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-12-7 上午12:01:40
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportFeeInfoToExcel_1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		FeeExportRecordInfoManager ferm = (FeeExportRecordInfoManager) AppFactory.instance(null).getApp(Constants.WEB_FEE_EXPORT_RECORD_INFO);
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		String currentTime = CurrentTime.getCurrentTime();
		Integer qdStatus  = 0;
		String zlIdStr = "";
		HSSFWorkbook wb = null;  
	    String absoFilePath = "";
	    boolean existFlag = false;
	    String fileName = "费用清单_"+CurrentTime.getStringTime()+".xls";;
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addFee");//只有具有增加费用权限的人员
			}
			if(abilityFlag){
				Integer feeStatus = CommonTools.getFinalInteger("feeStatus", request);//0：未交费，1：已缴费，2：全部
				List<ZlajFeeInfoTb> zlfList = new ArrayList<ZlajFeeInfoTb>();
				if(feeStatus.equals(0)){
					String idStr = CommonTools.getFinalStr("idStr", request);//所有选择的专利费用编号的拼接
					qdStatus  = CommonTools.getFinalInteger("qdStatus", request);//0：专利局缴费清单-国家，1：专利缴费清单-客户
					if(!idStr.equals("")){
						zlfList = fm.listUnJfInfoByOpt(cpyId, idStr);
						if(zlfList.size() > 0){
							existFlag = true;//有费用记录
							Integer i = 0;
							// 第一步，创建一个webbook，对应一个Excel文件  
							if(qdStatus.equals(0)){
								i = 2;
								String oldExcel = WebUrl.DATA_URL_PRO + Constants.ZL_FEE_DG;//国家局的标准缴费清单底稿
						    	absoFilePath = WebUrl.DATA_URL_PRO + "\\Module\\excelTemp\\" +fileName;
						    	FileOpration.copyFile(oldExcel, absoFilePath);
						    	
						    	File f = new File(absoFilePath);
						    	InputStream inputStream = new FileInputStream(f);
						    	wb = new HSSFWorkbook(inputStream);
						    	HSSFSheet sheet = wb.getSheetAt(6);
								
						    	HSSFCellStyle style = wb.createCellStyle();  
						        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
						        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
						        style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
						        style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
						        style.setBorderRight(HSSFCellStyle.BORDER_THIN);
						        style.setBorderTop(HSSFCellStyle.BORDER_THIN);
								HSSFFont font_1 = wb.createFont();    
						        font_1.setFontName("宋体");    
						        font_1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示    
						        font_1.setFontHeightInPoints((short) 16);//设置字体大小  (备注)
						        style.setFont(font_1);
								
						        HSSFDataFormat format = wb.createDataFormat();
						    	for(Iterator<ZlajFeeInfoTb> it = zlfList.iterator() ; it.hasNext();){
									ZlajFeeInfoTb zlf = it.next();
									ZlajMainInfoTb zl = zlf.getZlajMainInfoTb();
									HSSFRow row = sheet.getRow(i);
									HSSFCell cell = row.getCell(1);//读取第2列--专利号
									style.setFont(font_1);
									cell.setCellStyle(style);
									String zlNo = zl.getAjNoGf();
									cell.setCellValue(zlNo);//
									cell = row.getCell(2);//读取第3列--缴费人（客户名称）
									cell.setCellStyle(style);
									String sqrName = zl.getAjSqrName();
									cell.setCellValue(sqrName);
									cell = row.getCell(3);//读取第4列--费用名称
									cell.setCellStyle(style);
									String feeName = zlf.getFeeTypeInfoTb().getFeeName();
									cell.setCellValue(feeName);
									cell = row.getCell(9);//读取第10列--实际费用金额
									style.setDataFormat(format.getFormat("¥,###.00"));
									cell.setCellStyle(style);
									cell.setCellValue(zlf.getFeePrice());
									i++;
									if(feeName.contains("年费")){
										//查看是否存在滞纳金
										Integer feeId = zlf.getId();
										List<ZlajFeeSubInfoTb>  fsList = fm.listCurrSubFeeInfoByOpt(feeId, CurrentTime.getStringDate());
										if(fsList.size() > 0){
											List<ZlajFeeSubInfoTb> fsaList = fm.listInfoByFeeId(feeId);
											String pzTxt = "";
											Integer fsa_len = fsaList.size();
											HSSFPatriarch draw = sheet.createDrawingPatriarch();
									        HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0, 0, 0,(short) 3, 3, (short) 6, 6);
									        HSSFComment comment = draw.createCellComment(anchor);
									        ZlajFeeSubInfoTb fs = fsList.get(0);
											for(Integer j = 0 ; j < fsa_len ; j++){
												ZlajFeeSubInfoTb fs_all = fsaList.get(j);
												if(j == fsa_len - 1){
													pzTxt += " 缴费时间："+fs_all.getFeeRange()+" 滞纳金："+fs_all.getFeePrice();
												}else{
													pzTxt += " 缴费时间："+fs_all.getFeeRange()+" 滞纳金："+fs_all.getFeePrice() + "\r\n";
												}
											}
											row = sheet.getRow(i);
											cell = row.getCell(1);//读取第2列--专利号
											style.setFont(font_1);
											cell.setCellStyle(style);
											cell.setCellValue(zlNo);//
											cell = row.getCell(2);//读取第3列--缴费人（客户名称）
											cell.setCellStyle(style);
											cell.setCellValue(sqrName);
											cell = row.getCell(3);//读取第4列--费用名称
											cell.setCellStyle(style);
											cell.setCellValue(fs.getFeeTypeInfoTb().getFeeName());
											cell = row.getCell(13);//读取第14列--年度（只有滞纳金的时候才存在）
											cell.setCellStyle(style);
											cell.setCellValue(String.valueOf(fs.getZlajFeeInfoTb().getYearFeeNo()));
											cell = row.getCell(9);//读取第10列--实际费用金额
											style.setDataFormat(format.getFormat("¥,###.00"));
											cell.setCellStyle(style);
											cell.setCellValue(fs.getFeePrice());
											comment.setString(new HSSFRichTextString(pzTxt));
											comment.setAuthor("system");//添加作者
											cell.setCellComment(comment);
											i++;
										}
									}
									//列宽度自适应
									sheet.autoSizeColumn(1);
									sheet.autoSizeColumn(2);
									sheet.autoSizeColumn(3);
						    	}
						    	wb.setForceFormulaRecalculation(true);
							}else if(qdStatus.equals(1)){//客户清单
								wb = new HSSFWorkbook();  
						        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
						        HSSFSheet sheet = wb.createSheet("费用清单");  
						        //设置横向打印
						        sheet.getPrintSetup().setLandscape(true);
						        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
						        HSSFRow row = sheet.createRow(0);  
						        // 第四步，创建单元格，并设置值表头 设置表头居中  
						        HSSFCellStyle style = wb.createCellStyle();  
						        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
					            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
					            style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
						        style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
						        style.setBorderRight(HSSFCellStyle.BORDER_THIN);
						        style.setBorderTop(HSSFCellStyle.BORDER_THIN);
						        row = sheet.createRow(0);
					            HSSFCell cell = row.createCell(0); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("账户名"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 0, 0, 0, 1, sheet, wb);
					            
					            cell = row.createCell(2); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("王传明"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 0, 0, 2, 9, sheet, wb);
					           
					            
					            row = sheet.createRow(1);
					            cell = row.createCell(0); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("开户行"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 1, 1, 0, 1, sheet, wb);
					            
					            cell = row.createCell(2); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("濮阳市工商银行"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 1, 1, 2, 9, sheet, wb);
					            
					            row = sheet.createRow(2);
					            cell = row.createCell(0); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("账号"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 2, 2, 0, 1, sheet, wb);
					            
					            cell = row.createCell(2); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("2321321321321321321"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 2, 2, 2, 9, sheet, wb);
					            
					            row = sheet.createRow(3);
					            cell = row.createCell(0); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("制表日期"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 3, 3, 0, 1, sheet, wb);
					            
					            cell = row.createCell(2); 
					            cell.setCellStyle(style);  
					            cell.setCellValue(currentTime); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, 3, 3, 2, 9, sheet, wb);
						        
					            row = sheet.createRow(4);
					            List<String> list_head = new ArrayList<String>();
					            list_head.add("序号");
					            list_head.add("申请号");
					            list_head.add("专利名称");
					            list_head.add("申请日");
					            list_head.add("申请人");
					            list_head.add("费用名称");
					            list_head.add("官方费用");
					            list_head.add("缴费截止日");
					            list_head.add("滞纳金");
					            list_head.add("服务费");
					            FeeAction fa = new FeeAction();
					            fa.addCellData(list_head, row, style);
					            Integer currRow = 5;
					            Integer currNo = 1;
					            Double totalPrice_gf = 0d;//官费
					            Double totalPrice_ser = 0d;//服务费
					            Double totalPrice_znj = 0d;//滞纳金
					            for(Iterator<ZlajFeeInfoTb> it = zlfList.iterator() ; it.hasNext();){
									ZlajFeeInfoTb zlf = it.next();
									ZlajMainInfoTb zl = zlf.getZlajMainInfoTb();
									row = sheet.createRow(currRow++);
									cell = row.createCell(0); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(String.valueOf(currNo++)); 
						            cell = row.createCell(1); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zl.getAjNoGf()); 
						            cell = row.createCell(2); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zl.getAjTitle()); 
						            cell = row.createCell(3); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zl.getAjApplyDate()); 
						            cell = row.createCell(4); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zl.getAjSqrName()); 
						            cell = row.createCell(5); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zlf.getFeeTypeInfoTb().getFeeName()); 
						            Double feePrice = zlf.getFeePrice();
						            totalPrice_gf = Convert.convertInputNumber_2(totalPrice_gf + feePrice);
						            cell = row.createCell(6); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(String.valueOf(feePrice)); 
						            cell = row.createCell(7); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(zlf.getFeeEndDateGf()); 
						            cell = row.createCell(8); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(totalPrice_gf); 
						            cell = row.createCell(8); 
						            cell.setCellStyle(style);  
						            if(zlf.getFeeTypeInfoTb().getFeeName().contains("年费")){
										//查看是否存在滞纳金
										Integer feeId = zlf.getId();
										List<ZlajFeeSubInfoTb>  fsList = fm.listCurrSubFeeInfoByOpt(feeId, CurrentTime.getStringDate());
										if(fsList.size() > 0){
											List<ZlajFeeSubInfoTb> fsaList = fm.listInfoByFeeId(feeId);
											String pzTxt = "";
											Integer fsa_len = fsaList.size();
											HSSFPatriarch draw = sheet.createDrawingPatriarch();
									        HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0, 0, 0,(short)3, 3, (short) 6, 6);
									        HSSFComment comment = draw.createCellComment(anchor);
									        ZlajFeeSubInfoTb fs = fsList.get(0);
									        cell.setCellValue(String.valueOf(fs.getFeePrice()));//滞纳金费用
									        totalPrice_znj =  Convert.convertInputNumber_2(totalPrice_znj + fs.getFeePrice());
											for(Integer j = 0 ; j < fsa_len ; j++){
												ZlajFeeSubInfoTb fs_all = fsaList.get(j);
												if(j == fsa_len - 1){
													pzTxt += " 缴费时间："+fs_all.getFeeRange()+" 滞纳金："+fs_all.getFeePrice();
												}else{
													pzTxt += " 缴费时间："+fs_all.getFeeRange()+" 滞纳金："+fs_all.getFeePrice() + "\r\n";
												}
											}
											comment.setString(new HSSFRichTextString(pzTxt));
											comment.setAuthor("system");//添加作者
											cell.setCellComment(comment);
										}
						            }
						            Double serFeePrice = 0d;//服务费
						            totalPrice_ser = Convert.convertInputNumber_2(totalPrice_ser + serFeePrice);
						            cell = row.createCell(9); 
						            cell.setCellStyle(style);  
						            cell.setCellValue(serFeePrice); 
					            }
					            row = sheet.createRow(currRow++);
					            cell = row.createCell(6); 
					            cell.setCellStyle(style);  
					            cell.setCellValue(totalPrice_gf); 
					            
					            cell = row.createCell(8); 
					            cell.setCellStyle(style);  
					            cell.setCellValue(totalPrice_znj); 
					            
					            cell = row.createCell(9); 
					            cell.setCellStyle(style);  
					            cell.setCellValue(totalPrice_ser); 
					            
					            row = sheet.createRow(currRow);
					            cell = row.createCell(0); 
					            cell.setCellStyle(style);  
					            cell.setCellValue("合计"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 0, 1, sheet, wb);
					            
					            cell = row.createCell(2); 
					            cell.setCellStyle(style);  
					            Double totalPrice = Convert.convertInputNumber_2(totalPrice_gf + totalPrice_znj + totalPrice_ser);
					            cell.setCellValue(totalPrice_gf + " + " + totalPrice_znj + " + " + totalPrice_ser + " = " + totalPrice + "("+ Convert.MoneyToCNFormat(totalPrice) +")"); 
					            ReadExcelFile.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 2, 9, sheet, wb);
							}
						}
					}
				}else{//已缴、全部--给客户或者代理机构自己查看的清单
					qdStatus = 1;
					zlIdStr = CommonTools.getFinalStr("idStr", request);//所有选择的专利编号的拼接
					if(!zlIdStr.equals("")){
						String[] zlIdArr = zlIdStr.split(",");
						Integer currRow = 1;
						Integer djStatus = 1;//默认代缴
						if(feeStatus.equals(2)){//全部
							feeStatus = -1;
							djStatus = -1;
						}
						wb = new HSSFWorkbook();  
				        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
				        HSSFSheet sheet = wb.createSheet("费用清单");  
				        //设置横向打印
				        sheet.getPrintSetup().setLandscape(true);
				        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
				        HSSFRow row = null;  
				        // 第四步，创建单元格，并设置值表头 设置表头居中  
				        HSSFCellStyle style = wb.createCellStyle();  
				        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
			            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
			            style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
				        style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
				        style.setBorderRight(HSSFCellStyle.BORDER_THIN);
				        style.setBorderTop(HSSFCellStyle.BORDER_THIN);
			            
				        HSSFCellStyle style_title = wb.createCellStyle();  
				        style_title.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
				        style_title.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
				        style_title.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);//设置单元格填充样式，SOLID_FOREGROUND纯色使用前景颜色填充
				        style_title.setFillForegroundColor(HSSFColor.LIGHT_TURQUOISE.index);//设置背景颜色
			            ReadExcelFile.setBorderStyle(style_title);
				        
			            HSSFCellStyle style_left = wb.createCellStyle();  
			            style_left.setAlignment(HSSFCellStyle.ALIGN_LEFT); // 创建一个居中格式  
			            style_left.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
			            
			            HSSFCellStyle style_con = wb.createCellStyle();  
				        style_con.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
				        style_con.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
				        ReadExcelFile.setBorderStyle(style_con);
				        
				        HSSFCellStyle style_tj = wb.createCellStyle();  
				        style_tj.setAlignment(HSSFCellStyle.ALIGN_RIGHT); // 创建一个居右格式  
				        style_tj.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
			            
			            HSSFFont font_title = wb.createFont();    
			            font_title.setFontName("宋体");    
			            font_title.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示    
			            font_title.setFontHeightInPoints((short) 12);//设置字体大小  (备注)
			            
			            HSSFFont font_cus = wb.createFont();    
			            font_cus.setFontName("宋体");    
			            font_cus.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示    
			            font_cus.setFontHeightInPoints((short) 11);//设置字体大小  (备注)
			            
			            Double feeTotal_all = 0d;//全部费用总计
						Double yjFeeTotal_all = 0d;//已交费用总计
						Double wjFeeTotal_all = 0d;//未缴费用总计
						Double backFeeTotal_all = 0d;//实收费用总计
						Double unBackFeeTotal_all = 0d;//未收费用总计
						Double discountsFeeTotal_all = 0.00;//优惠费用总计
						for(Integer i = 0 ; i < zlIdArr.length ; i++){
							Integer zlId = Integer.parseInt(zlIdArr[i]);
							List<ZlajFeeInfoTb> zlfList_1 = fm.listAllFeeByOpt(zlId, "", djStatus, feeStatus, -1, cpyId);
							List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
							if(zlList.size() > 0){
								existFlag = true;//有费用记录
								ZlajMainInfoTb zl = zlList.get(0);
						       
								row = sheet.createRow(currRow); 
								
								style_title.setFont(font_title);
					            HSSFCell cell = row.createCell(0); 
					            cell.setCellStyle(style_title); 
						        cell.setCellValue(zl.getAjTitle()+"["+zl.getAjNoGf()+"]费用清单");
								
						        this.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 0, 15, sheet, wb);
						        currRow++;
						        
						        style_left.setFont(font_cus);
								row = sheet.createRow(currRow); 
								cell = row.createCell(0);
								cell.setCellStyle(style); 
								cell.setCellValue("		客户："+zl.getAjSqrName());
							    this.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 0, 15, sheet, wb);
							    currRow++;
							    
							    row = sheet.createRow(currRow++);
					            List<String> list_head = new ArrayList<String>();
					            list_head.add("费用名称");
					            list_head.add("金额(RMB)");
					            list_head.add("费减");
					            list_head.add("机构期限");
					            list_head.add("官方期限");
					            list_head.add("缴费时间(机构)");
					            list_head.add("缴费状态");
					            list_head.add("缴费批次号");
					            list_head.add("银行流水号");
					            list_head.add("开票时间");
					            list_head.add("票号");
					            list_head.add("代缴状态");
					            list_head.add("退还状态");
					            list_head.add("退还费用");
					            list_head.add("优惠费用");
					            list_head.add("备注");
					            FeeAction fa = new FeeAction();
					            fa.addCellData(list_head, row, style);
							    Double feeTotal = 0.00;//费用总计
								Double wjFeeTotal = 0.00;//未缴费用统计
//								Double djFeeTotal = 0.00;//代缴费用统计
								Double yjFeeTotal = 0.00;//已交费用统计
								Double backFeeTotal = 0.00;//已退费用统计
								Double diffFeeTotal = 0.00;//未退费用总计
								Double discountsFeeTotal = 0.00;//优惠费用总计
							    for(Iterator<ZlajFeeInfoTb> it = zlfList_1.iterator() ; it.hasNext();){
							    	ZlajFeeInfoTb zlf = it.next();
							    	row = sheet.createRow(currRow++);
							    	List<String> list_con = new ArrayList<String>();
							    	list_con.add(zlf.getFeeTypeInfoTb().getFeeName());
							    	Double feePrice = zlf.getFeePrice();
							    	feeTotal += feePrice;
							    	list_con.add(String.valueOf(feePrice));
							    	list_con.add(String.valueOf(zlf.getFeeRate()));
							    	list_con.add(zlf.getFeeEndDateJj());
							    	list_con.add(zlf.getFeeEndDateGf());
							    	list_con.add(zlf.getFeeJnDate());
							    	Integer feeStatus_db = zlf.getFeeStatus();
							    	list_con.add(feeStatus_db.equals(0) ? "未交" : "已交");
							    	list_con.add(zlf.getFeeBatchNo());
							    	list_con.add(zlf.getBankSerialNo());
							    	list_con.add(zlf.getFpDate());
							    	list_con.add(zlf.getFpNo());
							    	Integer djStatus_db = zlf.getDjStatus();
							    	list_con.add(djStatus_db.equals(0) ? "自交" : "代交");
							    	list_con.add(zlf.getBackStatus().equals(0) ? "未完成" : "已完成");
							    	Double backFee = zlf.getBackFee();
							    	list_con.add(String.valueOf(backFee));
							    	Double discountsFee = zlf.getDiscountsFee();
							    	list_con.add(String.valueOf(discountsFee));
							    	list_con.add(zlf.getFeeRemark());
							    	if(feeStatus_db.equals(1)){//费用为已交状态
										//计入已缴费用总计
//					        			djFeeTotal += feePrice;
										yjFeeTotal += feePrice;
										backFeeTotal += backFee;
										discountsFeeTotal += discountsFee;
									}else if(feeStatus_db.equals(0)){
						        		wjFeeTotal += feePrice;
						        	}
							    	fa.addCellData(list_con, row, style);
							    }
							    if(feeTotal > 0){
									feeTotal = Convert.convertInputNumber_2(feeTotal);
								}
								if(yjFeeTotal > 0){
									yjFeeTotal = Convert.convertInputNumber_2(yjFeeTotal);
								}
								if(backFeeTotal > 0){
									backFeeTotal = Convert.convertInputNumber_2(backFeeTotal);
								}
								if(discountsFeeTotal > 0){
									discountsFeeTotal = Convert.convertInputNumber_2(discountsFeeTotal);
								}
								diffFeeTotal = Convert.convertInputNumber_2(yjFeeTotal - backFeeTotal - discountsFeeTotal);
								
								row = sheet.createRow(currRow);//创建行.
								cell = row.createCell(1); 
						        cell.setCellStyle(style);  
						        cell.setCellValue(feeTotal); 
						        
						        cell = row.createCell(13); 
						        cell.setCellStyle(style);  
						        cell.setCellValue(backFeeTotal); 
						        
						        cell = row.createCell(14); 
						        cell.setCellStyle(style);  
						        cell.setCellValue(discountsFeeTotal); 
						        
						        cell = row.createCell(15); 
						        cell.setCellStyle(style);  
						        
						        currRow++;
						        
								row = sheet.createRow(currRow);//创建行.
								cell = row.createCell(0); 
								cell.setCellStyle(style_tj); 
								cell.setCellValue("费用总计："+feeTotal + "  已缴费用统计：" + yjFeeTotal + "  已退费用统计：" + backFeeTotal + "  未退费用统计：" + diffFeeTotal + "  优惠费用统计：" + discountsFeeTotal);
								this.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 0, 15, sheet, wb);
								currRow += 4;
								feeTotal_all += feeTotal;
								yjFeeTotal_all += yjFeeTotal;
								wjFeeTotal_all += wjFeeTotal;
								backFeeTotal_all  += backFeeTotal;
								unBackFeeTotal_all += diffFeeTotal;
								discountsFeeTotal_all += discountsFeeTotal;
							}
						}
						row = sheet.createRow(currRow);//创建行.
						HSSFCell cell = row.createCell(0); 
						cell.setCellStyle(style_tj); 
						cell.setCellValue("费用总计："+feeTotal_all + "  已缴费用统计：" + yjFeeTotal_all + "  未缴费用统计：" + wjFeeTotal_all + "  已退费用统计：" + backFeeTotal_all + "  未退费用统计：" + unBackFeeTotal_all + "  优惠费用统计：" + discountsFeeTotal_all);
						this.setJoinBorderStyle(HSSFCellStyle.BORDER_THIN, currRow, currRow, 0, 15, sheet, wb);
					}
				}
				if(existFlag){
		        	// 第六步，将文件存到指定位置
			    	String absoFilePath_1 = "";//绝对地址
			    	try  {  
			        	String fileName_1 = "费用清单_"+CurrentTime.getStringTime()+".xls";
			        	String filePath_pre = "Module\\excelTemp\\"+cpyId+"\\feeExport\\";
			        	String folder = WebUrl.DATA_URL_PRO + filePath_pre;//通过代理机构把excel分开
			        	absoFilePath_1 = folder +fileName_1;
			        	File file = new File(folder);
						if(!file.exists()){
							file.mkdirs();
						}
			            FileOutputStream fout = new FileOutputStream(absoFilePath_1);//存到服务器
			            wb.write(fout);  
			            fout.close();  
			            if(feeStatus.equals(0) && qdStatus.equals(0)){//未交费且是生成给国家局
			            	//生成记录
				            ferm.addFER(fileName_1, currentTime, currUserId, filePath_pre+fileName_1, cpyId);
			            }
				        //第七步 下载文件到客户端
				        OutputStream fos = null;
				        BufferedOutputStream bos = null;
				        InputStream fis = null;
				        BufferedInputStream bis = null;
				        fis = new FileInputStream(new File(absoFilePath_1));
						bis = new BufferedInputStream(fis);
						fos = response.getOutputStream();
						bos = new BufferedOutputStream(fos);
						fileName = URLEncoder.encode(fileName,"UTF-8");
						//这个就就是弹出下载对话框的关键代码
						response.setHeader("Pragma", "No-cache");
						response.setHeader("Cache-Control", "No-cache");
						response.setDateHeader("Expires", 0); 
				        response.setHeader("Content-disposition","attachment;filename=" +fileName);
				        response.setContentType("application/x-download");
				        int bytesRead = 0;
				        byte[] buffer = new byte[8192];
				        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
				        	fos.write(buffer, 0, bytesRead);
				        }
				        fos.flush();
				        fis.close();
				        bis.close();
				        fos.close();
				        bos.close();
			        }  
			        catch (IOException e){  
			            //e.printStackTrace();  
			        }
			        if(qdStatus.equals(0)){//给国家局
			        	//第七步 删除之前复制的文件
					    FileOpration.deleteFile(absoFilePath);
			        }else{//给客户或者代理机构自己查看是
			        	FileOpration.deleteFile(absoFilePath_1);
			        }
				}
			}
		}
		return null;
	}
	
	/**
	 * 分页获取未交费用清单列表(用户导出的未交费清单)
	 * @description
	 * @author Administrator
	 * @date 2018-12-10 下午04:22:14
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageFER(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		FeeExportRecordInfoManager ferm = (FeeExportRecordInfoManager) AppFactory.instance(null).getApp(Constants.WEB_FEE_EXPORT_RECORD_INFO);
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listFee");//只有具有浏览权限的人员
			}
			if(abilityFlag){
				String addDateS = CommonTools.getFinalStr("sDate", request);
				String addDateE = CommonTools.getFinalStr("eDate", request);
				Integer count = ferm.getCountByOpt(addDateS, addDateE, cpyId);
				List<Object> list_d = new ArrayList<Object>();
				if(count > 0){
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					List<FeeExportRecordInfo> ferList = ferm.listPageInfoByOpt(addDateS, addDateE, cpyId, pageNo, pageSize);
					if(ferList.size() > 0){
						msg = "success";
						for(Iterator<FeeExportRecordInfo> it = ferList.iterator() ; it.hasNext();){
							FeeExportRecordInfo fer = it.next();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("ferId", fer.getId());
							map_d.put("ferName", fer.getExcelName());
							map_d.put("addTime", fer.getAddTime());
							map_d.put("userName", fer.getUser().getUserName());
							map_d.put("excelPath", fer.getExcelPath());
							list_d.add(map_d);
						}
					}else{
						msg = "noInfo";
					}
				}
				map.put("data", list_d);
				map.put("count", count);
			}else{
				msg = "noAbility";
			}
		}
		map.put("msg", msg);
		map.put("code", 0);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导入已缴费清单并进行平账（代理机构平账）
	 * @description
	 * @author Administrator
	 * @date 2018-12-11 下午03:45:27
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward dealYjFeeExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		FeeImportRecordInfoManager firm = (FeeImportRecordInfoManager) AppFactory.instance(null).getApp(Constants.WEB_FEE_IMPORT_RECORD_INFO);
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		Map<String,Object> map = new HashMap<String,Object>();
		List<Object> list_d = new ArrayList<Object>();
		String msg = "error";
		if(this.getLoginType(request).equals("cpyUser")){
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addFee");//只有具有增加费用权限的人员
			}
			if(abilityFlag){
				String filePath = CommonTools.getFinalStr("filePath", request);
		        if(!filePath.equals("")){
		        	String[] filePathArr = filePath.split(",");
		            Integer fileLen = filePathArr.length;
		            String fileName = "";
		            msg = "success";
		            for(int j = 0 ; j < fileLen ; j++){
		        		fileName = filePathArr[j].substring(filePathArr[j].lastIndexOf("\\") + 1);
		        		String absoFilePath = WebUrl.DATA_URL_PRO + "\\" + filePathArr[j];
		        		File f = new File(absoFilePath);
		            	InputStream inputStream = new FileInputStream(f);
		            	HSSFWorkbook xssfWorkbook = new HSSFWorkbook(inputStream);
		            	HSSFSheet sheet = xssfWorkbook.getSheetAt(6);
		            	HSSFCellStyle style = xssfWorkbook.createCellStyle();  
		                style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
		                style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
		                style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
				        style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
				        style.setBorderRight(HSSFCellStyle.BORDER_THIN);
				        style.setBorderTop(HSSFCellStyle.BORDER_THIN);
		        		HSSFFont font_1 = xssfWorkbook.createFont();    
		                font_1.setFontName("宋体");    
		                font_1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示    
		                font_1.setFontHeightInPoints((short) 16);//设置字体大小  (备注)
		                style.setFont(font_1);
		                CpyUserInfo cpyUser = cum.getEntityById(currUserId);
		        		if(cpyUser != null){
		        			Integer cpyId = cpyUser.getCpyInfoTb().getId();
		        			String dealTime = CurrentTime.getCurrentTime();
		        			Integer firId = firm.addFIR(this.getLoginUserId(request), cpyId, fileName, dealTime, filePathArr[j]);
		        			if(firId > 0){
		        				for (int i = 2; i < sheet.getLastRowNum(); i++) {
		                    		HSSFRow row1 = sheet.getRow(i);
		                        	
		                        	String zlNo = row1.getCell(1).getStringCellValue().replace(" ", "").replace("\t", "");//专利号
		                        	if(zlNo.equals("")){
		                        		 break; 
		                        	}
		            	            String feeName = row1.getCell(3).getStringCellValue().replace(" ", "").replace("\t", "");//费用名称
		            	            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		            	            Date date = HSSFDateUtil.getJavaDate(row1.getCell(10).getNumericCellValue());
		            	            String jfDate = sdf.format(date);//缴费时间;
		            	            HSSFCell cell11 = row1.getCell(11);//读取第几列
		            	            cell11.setCellType(HSSFCell.CELL_TYPE_STRING);
		            	            String bankSerialNo = cell11.toString().replace(" ", "").replace("\t", "");//银行流水号
		            	            HSSFCell cell12 = row1.getCell(12);//读取第几列
		            	            cell12.setCellType(HSSFCell.CELL_TYPE_STRING);
		            	            String feeBatchNo = cell12.toString().replace(" ", "").replace("\t", "");//缴费批次号
		            	            
		            	            String fpDate = "";
		            	            String fpNo = "";
		            	            String dealStatus = "";
		            	            String dealResult = "";
		            	            String dealResult_1 = "";
		            	            Map<String,String> map_d = new HashMap<String,String>();
		            	            map_d.put("fileName", fileName);//读取的文件清单
		        	            	//代理机构缴完费后-补充缴费信息
		            	            if(feeName.contains("滞纳金")){
		            	            	//如果是滞纳金，第一次导入时需要增加该笔费用
		            	            	List<ZlajMainInfoTb> zlList = zlm.listSpecInfoByZlNo(zlNo);
		            	            	if(zlList.size() > 0){
		            	            		Integer zlId = zlList.get(0).getId();
		            	            		HSSFCell cell13 = row1.getCell(13);//读取第几列
		                    	            cell13.setCellType(HSSFCell.CELL_TYPE_STRING);
		                	            	Double feePrice = row1.getCell(5).getNumericCellValue();//费用金额（滞纳金的时候用）
		                	            	Integer yearNo = Integer.parseInt(cell13.toString());//滞纳金时的年度
		        	            			Integer feeTypeId = fm.listInfoByName(feeName).get(0).getId();
		        	            			List<ZlajFeeInfoTb> znjList = fm.listYearFeeByOpt(zlId, yearNo, "znjFee");
		        	            			if(znjList.size() > 0){
		        	            				boolean  flag = true;
		        	            				for(Iterator<ZlajFeeInfoTb> it = znjList.iterator() ; it.hasNext();){
		        	            					ZlajFeeInfoTb zlf = it.next();
		        	            					Integer feeId = zlf.getId();
		        	            					if(zlf.getYearFeeNo().equals(yearNo)){
		        	            						flag = true;
		        	            						if(zlf.equals(0)){//未交费
		        	            							if(!jfDate.equals("") && !feeBatchNo.equals("") && !bankSerialNo.equals("")){
		        	            								//修改费用状态
		        	                    		            	fm.updateComJfInfoById(feeId, jfDate);
		        	                    		            	//修改缴费信息
		        	                    		            	fm.updateFeeInfoById(feeId, feeBatchNo, bankSerialNo, fpDate, fpNo);
		        	                		            		//修改任务中的缴费提醒
		        	            	            				dealStatus = "succ";
		        	            	            				dealResult = "专利号："+zlNo+"的["+feeName+"]缴费成功";
		        	            	            				dealResult_1 = "缴费成功";
		        	            							}else{
		        	            	            				dealStatus = "fail";
		        	            	            				dealResult = "专利号："+zlNo+"的["+feeName+"]中缴费日期、银行流水、缴费批次不能为空";
		        	            	            				dealResult_1 = "缴费日期、银行流水、缴费批次不能为空";
		        	            	            			}
		        	            						}else{//已缴费
		        	            							dealStatus = "alarm";
		        	            							dealResult = "专利号："+zlNo+"的["+feeName+"]已缴费，无需再次缴费";
		        	            	            			dealResult_1 = "该费用之前已缴，无需再次缴费";
		        	            						}
		        	            						break;
		        	            					}else{
		        	            						flag = false;
		        	            					}
		        	            				}
		        	            				if(!flag){//不存在指定年度的年费滞纳金
		        	            					fm.addZLFee(zlId, currUserId, feeTypeId, feePrice, 0.0, "", "", "第"+yearNo+"年年费滞纳金", 1, cpyId, 1, jfDate, "", "缴费通知书", yearNo, "", 0, "", feeBatchNo, bankSerialNo, fpDate, fpNo);
		        	    	            			dealStatus = "succ";
		        		            				dealResult = "专利号："+zlNo+"的["+feeName+"]缴费成功";
		        		            				dealResult_1 = "缴费成功";
		        	            				}
		        	            			}else{//不存在年费滞纳金
		        	            				fm.addZLFee(zlId, currUserId, feeTypeId, feePrice, 0.0, "", "", "第"+yearNo+"年年费滞纳金", 1, cpyId, 1, jfDate, "", "缴费通知书", yearNo, "", 0, "", feeBatchNo, bankSerialNo, fpDate, fpNo);
		    	    	            			dealStatus = "succ";
		    		            				dealResult = "专利号："+zlNo+"的["+feeName+"]缴费成功";
		    		            				dealResult_1 = "缴费成功";
		        	            			}
		            	            	}else{
		            	            		dealStatus = "fail";
		            	            		dealResult = "专利号："+zlNo+"的["+feeName+"]匹配失败";
		            	            		dealResult_1 = "费用匹配失败";
		            	            	}
		            	            	
		            	            }else{
		            	            	List<ZlajFeeInfoTb> feeList = fm.listInfoByOpt(cpyId, zlNo, feeName);
		            	            	if(feeList.size() > 0){
		            	            		ZlajFeeInfoTb fee = feeList.get(0);
		            	            		Integer feeId = fee.getId();
		            	            		if(fee.getFeeStatus().equals(0)){//未缴费
		            	            			if(!jfDate.equals("") && !feeBatchNo.equals("") && !bankSerialNo.equals("")){
		            	            				//修改费用状态
		                    		            	fm.updateComJfInfoById(feeId, jfDate);
		                    		            	//修改缴费信息
		                    		            	fm.updateFeeInfoById(feeId, feeBatchNo, bankSerialNo, fpDate, fpNo);
		                		            		//修改任务中的缴费提醒
		            	            				dealStatus = "succ";
		            	            				dealResult = "专利号："+zlNo+"的["+feeName+"]缴费成功";
		            	            				dealResult_1 = "缴费成功";
		            	            			}else{
		            	            				dealStatus = "fail";
		            	            				dealResult = "专利号："+zlNo+"的["+feeName+"]中缴费日期、银行流水、缴费批次不能为空";
		            	            				dealResult_1 = "缴费日期、银行流水、缴费批次不能为空";
		            	            			}
		            	            		}else{
		            	            			dealStatus = "alarm";
		            	            			dealResult = "专利号："+zlNo+"的["+feeName+"]已缴费，无需再次缴费";
		            	            			dealResult_1 = "该费用之前已缴，无需再次缴费";
		            	            		}
		            	            	}else{
		            	            		dealStatus = "fail";
		            	            		dealResult = "专利号："+zlNo+"的["+feeName+"]匹配失败";
		            	            		dealResult_1 = "费用匹配失败";
		            	            	}
		            	            }
		        	            	map_d.put("readStatus", dealStatus);
		        	            	map_d.put("readInfo", dealResult);
		        	            	list_d.add(map_d);
		        	            	
		        	            	firm.addFIDR(firId, zlNo, feeName, dealTime, dealStatus, dealResult_1);
		        	            	
		        	            	
		        					HSSFCell cell = row1.getCell(14);
		        					style.setFont(font_1);
		        					cell.setCellStyle(style);
		        					cell.setCellValue(dealResult_1);
		                        	
		                    	}
		        			}
		        		}
		                
		            	FileOutputStream fout = new FileOutputStream(absoFilePath);//存到服务器
		            	xssfWorkbook.write(fout);  
		                fout.close(); 
		        	}
		        }
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		map.put("readInfo", list_d);
        this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 分页获取已导入缴费清单处理记录列表
	 * @description
	 * @author Administrator
	 * @date 2018-12-19 下午04:47:03
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageFIR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		FeeImportRecordInfoManager firm = (FeeImportRecordInfoManager) AppFactory.instance(null).getApp(Constants.WEB_FEE_IMPORT_RECORD_INFO);
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listFee");//只有具有浏览权限的人员
			}
			if(abilityFlag){
				String addDateS = CommonTools.getFinalStr("sDate", request);
				String addDateE = CommonTools.getFinalStr("eDate", request);
				Integer count = firm.getCountByOpt(addDateS, addDateE, cpyId);
				List<Object> list_d = new ArrayList<Object>();
				if(count > 0){
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					List<FeeImportRecordInfo> firList = firm.listPageInfoByOpt(addDateS, addDateE, cpyId, pageNo, pageSize);
					if(firList.size() > 0){
						msg = "success";
						for(Iterator<FeeImportRecordInfo> it = firList.iterator() ; it.hasNext();){
							FeeImportRecordInfo fir = it.next();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("firId", fir.getId());
							map_d.put("fileName", fir.getExcelName());
							map_d.put("addTime", fir.getUploadTime());
							map_d.put("userName", fir.getCpyUserInfo().getUserName());
							map_d.put("excelPath", fir.getExcelPath());
							list_d.add(map_d);
						}
					}else{
						msg = "noInfo";
					}
				}
				map.put("data", list_d);
				map.put("count", count);
			}else{
				msg = "noAbility";
			}
		}
		map.put("msg", msg);
		map.put("code", 0);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定导入已缴费清单的处理详情
	 * @description
	 * @author Administrator
	 * @date 2018-12-19 下午04:50:48
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getFidrDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		FeeImportRecordInfoManager firm = (FeeImportRecordInfoManager) AppFactory.instance(null).getApp(Constants.WEB_FEE_IMPORT_RECORD_INFO);
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listFee");//只有具有浏览权限的人员
			}
			if(abilityFlag){
				Integer firId = CommonTools.getFinalInteger("firId", request);
				List<FeeImportDealRecordInfo> fidrList = firm.listInfoByFirId(firId);
				List<Object> list_d = new ArrayList<Object>();
				if(fidrList.size() > 0){
					if(fidrList.get(0).getFeeImportRecordInfo().getCpyInfoTb().getId().equals(cpyId)){
						msg = "success";
						for(Iterator<FeeImportDealRecordInfo> it = fidrList.iterator() ; it.hasNext();){
							FeeImportDealRecordInfo fidr = it.next();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("zlNo", fidr.getZlNo());
							
							map_d.put("feeName", fidr.getFeeName());
							map_d.put("dealTime", fidr.getDealTime());
							String dealStatus = fidr.getDealStatus();
							if(dealStatus.equals("succ")){
								dealStatus = "处理成功";
							}else{
								dealStatus = "处理失败";
							}
							map_d.put("dealStatus", dealStatus);
							map_d.put("dealResult", fidr.getDealResult());
							list_d.add(map_d);
						}
						map.put("readInfo", list_d);
					}
				}else{
					msg = "noInfo";
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向客户汇款页面
	 * @description
	 * @author Administrator
	 * @date 2018-12-24 上午11:20:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBackFeePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("bfPage");
	}
	
	/**
	 * 增加客户还款动作(输入)--
	 * @description
	 * @author Administrator
	 * @date 2018-12-11 下午03:48:34
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addBackFee(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		CusBackFeeInfoManager cbfm = (CusBackFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUS_BACK_FEE_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		Integer currUserId = this.getLoginUserId(request);
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			String roleName = this.getLoginRoleName(request);
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addBackFee");//只有具有增加还款动作权限的人员
			}
			if(abilityFlag){
				String backFeePrice = CommonTools.getFinalStr("backFeePrice", request);
				String backDate = CommonTools.getFinalStr("backDate", request);
				String backType = CommonTools.getFinalStr("backType", request);
				Integer cusId = CommonTools.getFinalInteger("cusId", request);
				String remark = Transcode.unescape_new("remark", request);
				Integer dlfStatus = CommonTools.getFinalInteger("dlfStatus",request);//是否包含冲抵代理费(0:不包含，1：包含)
				if(!backFeePrice.equals("")){
					Pattern pattern = Pattern.compile("^[+]?[\\d]*$");  
					if(pattern.matcher(backFeePrice).matches()){//判断输入的汇款费用必须为大于0的整数
						Double backFeePrice_temp = Double.parseDouble(backFeePrice);//当前汇款剩余费用
						Integer cbfId = cbfm.addCBF(backFeePrice, backDate, backType, cusId, cpyId, currUserId, CurrentTime.getCurrentTime(), remark);
						if(cbfId > 0){
							msg = "success";
							//优先冲抵官费，然后再冲抵代理费
							//获取所有代缴-已交未平的费用
							List<ZlajFeeInfoTb> feeList = fm.listUnBackInfoByOpt(cpyId, cusId, "gf");//优先平官费
							if(feeList.size() > 0){
								for(Iterator<ZlajFeeInfoTb> it = feeList.iterator() ; it.hasNext();){
									ZlajFeeInfoTb fee = it.next();
									Double feePrice = fee.getFeePrice();
									Double currBackFee = Convert.convertInputNumber_2(feePrice - fee.getBackFee() - fee.getDiscountsFee());//当前应还费用
									if(backFeePrice_temp >= currBackFee){//够冲抵
										fm.updateBackFeeInfoById(fee.getId(), backDate, feePrice , 1, 0.0);
										backFeePrice_temp = Convert.convertInputNumber_2(backFeePrice_temp - currBackFee);
										//增加冲抵记录
										cbfm.addCusPz(cbfId, fee.getId(), feePrice, 0.0);
									}else{//钱不够冲抵
										if(backFeePrice_temp > 0){//但还有余钱
											fm.updateBackFeeInfoById(fee.getId(), backDate, backFeePrice_temp , 0, 0.0);
											//增加冲抵记录
											cbfm.addCusPz(cbfId, fee.getId(), backFeePrice_temp, Convert.convertInputNumber_2(currBackFee - backFeePrice_temp));
										}
									}
								}
							}
							if(dlfStatus.equals(1)){//还要冲抵代理费
								if(backFeePrice_temp > 0){
									List<ZlajFeeInfoTb> dlfList = fm.listUnBackInfoByOpt(cpyId, cusId, "dlf");//未平的代理费
									if(dlfList.size() > 0){
										for(Iterator<ZlajFeeInfoTb> it_dlf = dlfList.iterator() ; it_dlf.hasNext();){
											ZlajFeeInfoTb fee = it_dlf.next();
											Double feePrice = fee.getFeePrice();
											Double currBackFee = Convert.convertInputNumber_2(feePrice - fee.getBackFee() - fee.getDiscountsFee());//当前应还费用
											if(backFeePrice_temp >= currBackFee){//够冲抵
												fm.updateBackFeeInfoById(fee.getId(), backDate, feePrice , 1, 0.0);
												backFeePrice_temp = Convert.convertInputNumber_2(backFeePrice_temp - currBackFee);
												//增加冲抵记录
												cbfm.addCusPz(cbfId, fee.getId(), feePrice, 0.0);
											}else{//钱不够冲抵
												if(backFeePrice_temp > 0){//但还有余钱
													fm.updateBackFeeInfoById(fee.getId(), backDate, backFeePrice_temp , 0, 0.0);
													//增加冲抵记录
													cbfm.addCusPz(cbfId, fee.getId(), backFeePrice_temp, Convert.convertInputNumber_2(currBackFee - backFeePrice_temp));
												}
											}
										}
									}
								}
							}
						}
					}else{
						msg = "inpError";
					}
				}else{
					msg = "inpError";
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据条件分页获取客户汇款记录
	 * @description
	 * @author Administrator
	 * @date 2018-12-24 上午10:52:46
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCusBackFeePageData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		CusBackFeeInfoManager cbfm = (CusBackFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUS_BACK_FEE_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		Integer currUserId = this.getLoginUserId(request);
		if(this.getLoginType(request).equals("cpyUser")){
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			boolean abilityFlag = false;
			String roleName = this.getLoginRoleName(request);
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程。
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listBackFee");//只有具有浏览还款动作权限的人员
			}
			if(abilityFlag){
				Integer cusId = CommonTools.getFinalInteger("cusId", request);
				String sDate = CommonTools.getFinalStr("sDate", request);
				String eDate = CommonTools.getFinalStr("eDate", request);
				Integer count = cbfm.getCountByOpt(cpyId, cusId, sDate, eDate);
				if(count > 0){
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					List<CusBackFeeInfo> feeList =  cbfm.listPageInfoByOpt(cpyId, cusId, sDate, eDate, pageNo, pageSize);
					List<Object> list_d = new ArrayList<Object>();
					for(Iterator<CusBackFeeInfo> it = feeList.iterator() ; it.hasNext();){
						CusBackFeeInfo bf = it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("id", bf.getId());
						map_d.put("backFee", bf.getBackFeePrice());
						map_d.put("backDate", bf.getBackDate());
						String backType = bf.getBackType();
						if(backType.equals("wx")){
							backType = "微信";
						}else if(backType.equals("zfb")){
							backType = "支付宝";
						}else if(backType.equals("bank")){
							backType = "银行转账";
						}
						map_d.put("backType", backType);
						map_d.put("cusInfo", bf.getCustomerInfoTb().getCusName());
						map_d.put("operateUserInfo", bf.getCpyUserInfo().getUserName());
						map_d.put("operateDate", bf.getOperateTime());
						map_d.put("remark", bf.getRemark());
						list_d.add(map_d);
					}
					map.put("msg", "success");
					map.put("data", list_d);
					map.put("count", count);
					map.put("code", 0);
				}else{
					map.put("msg", "noInfo");
				}
			}else{
				map.put("msg", "noAbility");
			}
		}
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取客户汇款平账明细
	 * @description
	 * @author Administrator
	 * @date 2018-12-24 上午11:04:58
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCusPzDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		CusBackFeeInfoManager cbfm = (CusBackFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUS_BACK_FEE_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		Integer currUserId = this.getLoginUserId(request);
		if(this.getLoginType(request).equals("cpyUser")){
			boolean abilityFlag = false;
			Integer cpyId = cum.getEntityById(currUserId).getCpyInfoTb().getId();
			String roleName = this.getLoginRoleName(request);
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{//只获取自己的任务流程
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listBackFee");//只有具有浏览还款动作权限的人员
			}
			if(abilityFlag){
				Integer backFeeId = CommonTools.getFinalInteger("backFeeId", request);
				if(backFeeId > 0){
					List<CusPzInfo>  pzList = cbfm.listInfoByOpt(backFeeId, 0);
					if(pzList.size() > 0){
						if(pzList.get(0).getCusBackFeeInfo().getCpyInfoTb().getId().equals(cpyId)){
							msg = "success";
							List<Object> list_d = new ArrayList<Object>();
							for(Iterator<CusPzInfo> it = pzList.iterator() ; it.hasNext();){
								CusPzInfo pz = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								ZlajFeeInfoTb fee = pz.getZlajFeeInfoTb();
								map_d.put("feeName", fee.getFeeTypeInfoTb().getFeeName());//费用名称
								Double feePrice = fee.getFeePrice();
								map_d.put("feePrice", feePrice);//费用金额
								map_d.put("pzPrice", pz.getPzPrice());//平账费用
								map_d.put("remainFee", pz.getRemainPrice());//未平账费用
								map_d.put("dealTime", pz.getDealTime());
								map_d.put("dealUserInfo", pz.getCusBackFeeInfo().getCpyUserInfo().getUserName());
								list_d.add(map_d);
							}
							map.put("dealInfo", list_d);
						}
					}else{
						msg = "noInfo";
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
}