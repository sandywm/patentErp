/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.login;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.tools.Convert;
import com.patent.tools.CommonTools;
import com.patent.tools.CurrentTime;
import com.patent.tools.MD5;
import com.patent.tools.DataBaseSqlVerify;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.ApplyInfoTb;
import com.patent.module.CpyRoleInfoTb;
import com.patent.module.CpyRoleUserInfoTb;
import com.patent.module.CpyUserInfo;
import com.patent.module.SuperUser;
import com.patent.service.ApplyInfoManager;
import com.patent.service.CpyInfoManager;
import com.patent.service.CpyRoleInfoManager;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.SuperUserManager;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 07-22-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoginAction extends DispatchAction {
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_ROLE_INFO);
		String account = request.getParameter("account");
		String password = request.getParameter("password");
		String vCode = request.getParameter("vCode");
		String loginType = request.getParameter("loginType");//登录类型(cpyUser:代理机构员工登录,appUser:申请人/公司账号登录)
		Map<String,Object> map = new HashMap<String,Object>();
		MD5 md5 = new MD5();
		String msg = "";   
		boolean flag = false;
		//获取图片中的随机数字
		HttpSession session = request.getSession(false);
		String vercode2 = (String)session.getAttribute("rand");
		if(!account.equals("")){
			flag = DataBaseSqlVerify.checkSql(account);
			if(flag){
				msg = "unlaw";//账号含有非法字符
			}else{
				if(!vCode.equalsIgnoreCase(vercode2)){
					msg = "vercodeFail";//验证码不匹配 
				}else{
					if(loginType.equals("cpyUser")){
						List<CpyUserInfo> cuList = cum.listSpecInfoByAccount(account);
						if(cuList.size() > 0){
							CpyUserInfo cUser = cuList.get(0);
							if(cUser.getUserPassword().equalsIgnoreCase(md5.calcMD5(password))){
								Integer userId = cUser.getId();
								Integer yxStatus = cUser.getUserYxStatus();//账号有效状态
								if(yxStatus.equals(1)){
									//修改用户登录时间、登录次数
									//获取登录次数
									Integer loginTimes_db = cUser.getUserLoginTimes();
									//每次登陆，loginTimes_db自动加1，满50时恢复0状态
									if(loginTimes_db < 50){
										loginTimes_db += 1;
									}else{
										loginTimes_db = 0;
									}
									cum.updateLoginInfoById(userId, CurrentTime.getStringDate(), loginTimes_db);
									session.setAttribute(Constants.LOGIN_TIMES, loginTimes_db);
									session.setAttribute(Constants.LOGIN_USER_ID, userId);
									List<CpyRoleUserInfoTb> crList = crm.listInfoByUserId(userId);
									if(crList.size() > 0){
										List<Object> list_d = new ArrayList<Object>();
										Map<String,Object> map_d = new HashMap<String,Object>();
										for(Iterator<CpyRoleUserInfoTb> it = crList.iterator() ; it.hasNext() ;){
											CpyRoleUserInfoTb cru = it.next();
											map_d.put("roleId", cru.getCpyRoleInfoTb().getId());
											map_d.put("roleName", cru.getCpyRoleInfoTb().getRoleName());
											list_d.add(map_d);
										}
										map.put("roleList", list_d);
										msg = "success";
									}else{
										msg = "roleErr";//没角色
									}
								}else{
									msg = "lock";
								}
							}else{
								msg = "fail";//用户名密码不匹配
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else if(loginType.equals("appUser")){
						List<ApplyInfoTb> appList = am.listInfoByAccount(account);
						if(appList.size() > 0){
							ApplyInfoTb app = appList.get(0);
							if(app.getAppPass().equalsIgnoreCase(md5.calcMD5(password))){
								Integer appUserId = app.getId();
								Integer loginTimes = app.getUserLoginTimes();
								//修改用户登录时间、登录次数
								//获取登录次数
								if(loginTimes < 50){
									loginTimes += 1;
								}else{
									loginTimes = 0;
								}
								am.updateAppLoginInfoById(appUserId, CurrentTime.getStringDate(), loginTimes);
								session.setAttribute(Constants.LOGIN_TIMES, loginTimes);
								session.setAttribute(Constants.LOGIN_USER_ID, appUserId);
								msg = "success";
							}else{
								msg = "fail";//用户名密码不匹配
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else{
						msg = "fail";//用户名密码不匹配
					}
				}
			}
		}else{
			msg = "fail";//用户名密码不匹配
		}
		map.put("result", msg);
//		map.put("loginType", loginType);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 根据所选身份跳转页面
	 * @description
	 * @author wm
	 * @date 2018-7-25 下午04:07:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_ROLE_INFO);
		Integer roleId = CommonTools.getFinalInteger(request.getParameter("roleId"));
		String roleName = "";
		String loginType = String.valueOf(request.getParameter("loginType"));//cpyUser:代理机构员工登录,appUser:申请人/公司账号登录
		String urlPage = "";
		if(loginType.equals("cpyUser")){
			//判断当前用户是否真的有该身份(用户破坏)
			boolean flag = false;
			List<CpyRoleUserInfoTb> crList = crm.listInfoByUserId(this.getUserID(request));
			if(crList.size() > 0){
				for(Iterator<CpyRoleUserInfoTb> it = crList.iterator() ; it.hasNext() ;){
					CpyRoleUserInfoTb cru = it.next();
					if(cru.getCpyRoleInfoTb().getId().equals(roleId)){
						flag = true;
						roleName = cru.getCpyRoleInfoTb().getRoleName();
						break;
					}
				}
			}
			if(flag){
				request.getSession(false).setAttribute(Constants.LOGIN_USER_ROLE_ID, roleId);
				request.getSession(false).setAttribute(Constants.LOGIN_USER_ROLE_NAME, roleName);
				if(roleName.equals("管理员")){
					urlPage = "cpyManager";//管理员页面
				}else{
					urlPage = "welcome";//管理机构其他角色主界面
				}
			}else{
				urlPage = "loginException";//异常界面
			}
		}else if(loginType.equals("appUser")){
			urlPage = "index";//导向申请人/公司账号界面
		}else{
			urlPage = "loginException";//异常界面
		}
		return mapping.findForward(urlPage);
	}
	
	/**
	 * 登出系统
	 * @description
	 * @author wm
	 * @date 2018-7-25 下午06:09:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward loginOut(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		request.getSession(false).invalidate();
		return mapping.findForward("loginOut");
	}
	
	/**
	 * 平台管理人员（超级管理员登录）
	 * @description
	 * @author wm
	 * @date 2018-7-26 上午08:11:18
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward spLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		SuperUserManager sum = (SuperUserManager)  AppFactory.instance(null).getApp(Constants.WEB_SUPER_USER_INFO);
		String account = request.getParameter("account");
		String password = request.getParameter("password");
		String vCode = request.getParameter("vCode");
		Map<String,Object> map = new HashMap<String,Object>();
		MD5 md5 = new MD5();
		String msg = "";   
		boolean flag = false;
		//获取图片中的随机数字
		HttpSession session = request.getSession(false);
		String vercode2 = (String)session.getAttribute("rand");
		if(!account.equals("")){
			flag = DataBaseSqlVerify.checkSql(account);
			if(flag){
				msg = "unlaw";//账号含有非法字符
			}else{
				if(!vCode.equalsIgnoreCase(vercode2)){
					msg = "vercodeFail";//验证码不匹配 
				}else{
					List<SuperUser> suList = sum.listInfoByAccount(account);
					if(suList.size() > 0){
						SuperUser su = suList.get(0);
						if(su.getPassword().equalsIgnoreCase(md5.calcMD5(password))){
							Integer yxStatus = suList.get(0).getYxStatus();
							if(yxStatus.equals(1)){
								Integer loginTimes_db = su.getLoginTimes();
								//每次登陆，loginTimes_db自动加1，满50时恢复0状态
								if(loginTimes_db < 50){
									loginTimes_db += 1;
								}else{
									loginTimes_db = 0;
								}
								sum.updateStatusById(su.getId(), -1, loginTimes_db);
								session.setAttribute(Constants.LOGIN_TIMES, loginTimes_db);
								session.setAttribute(Constants.LOGIN_USER_ID, su.getId());
								session.setAttribute(Constants.LOGIN_USER_ROLE_NAME, su.getUserType());
								msg = "success";
							}else{
								msg = "lock";
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else{
						msg = "fail";//用户名密码不匹配
					}
				}
			}
		}else{
			msg = "fail";//用户名密码不匹配
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 平台管理人员导向页面
	 * @description
	 * @author wm
	 * @date 2018-7-26 上午09:13:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward spGoPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("spWelcome");
	}
	
	/**
	 * 注册界面
	 * @description
	 * @author wm
	 * @date 2018-7-26 下午03:47:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goSignPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("signPage");
	}
	
	/**
	 * 判断账号是否存在
	 * @description
	 * @author wm
	 * @date 2018-7-26 上午10:59:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		String signType = String.valueOf(request.getParameter("signType"));//cpy(代理机构注册),app(申请人/公司注册)
		String account = request.getParameter("account");
		boolean flag = DataBaseSqlVerify.checkSql(account);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(flag){
			msg = "unlaw";//账号含有非法字符
		}else{
			if(signType.equals("cpy")){
				if(cum.listSpecInfoByAccount(account).size() > 0){
					msg = "exist";//存在
				}else{
					msg = "noExist";//不存在
				}
			}else if(signType.equals("app")){
				if(am.listInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					msg = "noExist";
				}
			}else{
				msg = "fail";//异常失败
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 注册
	 * @description
	 * @author wm
	 * @date 2018-7-25 下午06:10:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_ROLE_INFO);
		CpyInfoManager cm = (CpyInfoManager)  AppFactory.instance(null).getApp(Constants.WEB_CPY_INFO);
		String signType = String.valueOf(request.getParameter("signType"));//cpy(代理机构注册),app(申请人/公司注册)
		String msg = "";
		MD5 md5 = new MD5();
		
		String comName = Transcode.unescape(request.getParameter("name"), request);//公司名字
		String comAddress = Transcode.unescape(request.getParameter("address"), request);//公司地址
		String comProv = Transcode.unescape(request.getParameter("prov"), request);//公司所在省份
		String comCity = Transcode.unescape(request.getParameter("city"), request);//公司所在城市
		String comLxr = Transcode.unescape(request.getParameter("lxr"), request);//公司联系人
		String namePy = Convert.getFirstSpell(comLxr);
		String email = request.getParameter("email");//邮箱
		String comTel = Transcode.unescape(request.getParameter("tel"), request);//公司联系电话
		
		String account = request.getParameter("account");
		String password = request.getParameter("password");
		if(signType.equals("cpy")){//代理机构注册
			String cpyFr = Transcode.unescape(request.getParameter("cpyFr"), request);//公司法人
			boolean flag = DataBaseSqlVerify.checkSql(account);
			if(!flag){
				//检查账号不能重复
				if(cum.listSpecInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					Integer cpyId = cm.addCpy(comName, comAddress, comProv, comCity, cpyFr, comLxr, comTel);
					if(cpyId > 0){
						//自动为每个代理机构初始一个管理员身份
						Integer roleId = crm.addRole("管理员", "管理机构基本信息", cpyId);
						//增加代理机构管理员
						Integer cpyUserId = cum.addCpyUser(comLxr, namePy, account, md5.calcMD5(password), "0", email, comTel, CurrentTime.getStringDate(), cpyId, "");
						//增加身份绑定
						Integer ruId = crm.addRoleUser(roleId, cpyUserId);
						if(ruId > 0){
							msg = "success";//成功
						}else{
							msg = "fail";//失败
						}
					}else{
						msg = "fail";//失败
					}
				}
			}else{
				msg = "unlaw";//账号含有非法字符
			}
		}else if(signType.equals("app")){//申请公司注册
			String appType = request.getParameter("appType");//申请人/公司类型
			String appICard = request.getParameter("appiCard");//申请人/公司卡号
			String appQQ = request.getParameter("appQQ");//申请人/公司QQ
			boolean flag = DataBaseSqlVerify.checkSql(account);
			if(!flag){
				if(am.listInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					Integer appId = am.addAppInfo(appType, comName, namePy, appICard, comAddress, account, password, comLxr, comTel, email, appQQ);
					if(appId > 0){
						msg = "success";//成功
					}else{
						msg = "fail";//失败
					}
				}
			}else{
				msg = "unlaw";//账号含有非法字符
			}
		}else{
			msg = "fail";//失败
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	
}