/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.login;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.tools.Convert;
import com.patent.tools.CommonTools;
import com.patent.tools.CurrentTime;
import com.patent.tools.InviteCode;
import com.patent.tools.MD5;
import com.patent.tools.DataBaseSqlVerify;
import com.patent.tools.sendMail.MailSendInfo;
import com.patent.tools.sendMail.SimpleMailSender;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.ApplyInfoTb;
import com.patent.module.CpyRoleUserInfoTb;
import com.patent.module.CpyUserInfo;
import com.patent.module.SendEmailCodeInfo;
import com.patent.module.SuperUser;
import com.patent.service.ApplyInfoManager;
import com.patent.service.CpyInfoManager;
import com.patent.service.CpyRoleInfoManager;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.SendEmailCodeInfoManager;
import com.patent.service.SuperUserManager;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 07-22-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoginAction extends DispatchAction {
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_ROLE_INFO);
		String account = CommonTools.getFinalStr("account", request);
		String password = request.getParameter("password");
		String vCode = request.getParameter("vCode");
		String loginType = request.getParameter("loginType");//登录类型(cpyUser:代理机构员工登录,appUser:申请人/公司账号登录)
		Map<String,Object> map = new HashMap<String,Object>();
		MD5 md5 = new MD5();
		String msg = "";   
		boolean flag = false;
		//获取图片中的随机数字
		HttpSession session = request.getSession(false);
		String vercode2 = (String)session.getAttribute("rand");
		if(!account.equals("")){
			flag = DataBaseSqlVerify.checkSql(account);
			if(flag){
				msg = "unlaw";//账号含有非法字符
			}else{
				if(!vCode.equalsIgnoreCase(vercode2)){
					msg = "vercodeFail";//验证码不匹配 
				}else{
					if(loginType.equals("cpyUser")){
						List<CpyUserInfo> cuList = cum.listSpecInfoByAccount(account);
						if(cuList.size() > 0){
							CpyUserInfo cUser = cuList.get(0);
							if(cUser.getUserPassword().equalsIgnoreCase(md5.calcMD5(password))){
								Integer userId = cUser.getId();
								Integer yxStatus = cUser.getUserYxStatus();//账号有效状态
								if(yxStatus.equals(1)){
									//修改用户登录时间、登录次数
									//获取登录次数
									Integer loginTimes_db = cUser.getUserLoginTimes();
									//每次登陆，loginTimes_db自动加1，满50时恢复0状态
									if(loginTimes_db < 50){
										loginTimes_db += 1;
									}else{
										loginTimes_db = 0;
									}
									cum.updateLoginInfoById(userId, CurrentTime.getStringDate(), loginTimes_db);
									session.setAttribute(Constants.LOGIN_TIMES, loginTimes_db);
									session.setAttribute(Constants.LOGIN_USER_ID, userId);
									session.setAttribute(Constants.LOGIN_TYPE, loginType);
									List<CpyRoleUserInfoTb> crList = crm.listInfoByUserId(userId);
									if(crList.size() > 0){
										List<Object> list_d = new ArrayList<Object>();
										for(Iterator<CpyRoleUserInfoTb> it = crList.iterator() ; it.hasNext() ;){
											Map<String,Object> map_d = new HashMap<String,Object>();
											CpyRoleUserInfoTb cru = it.next();
											map_d.put("roleId", cru.getCpyRoleInfoTb().getId());
											map_d.put("roleName", cru.getCpyRoleInfoTb().getRoleName());
											list_d.add(map_d);
										}
										map.put("roleList", list_d);
										msg = "success";
									}else{
										msg = "roleErr";//没角色
									}
								}else{
									msg = "lock";
								}
							}else{
								msg = "fail";//用户名密码不匹配
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else if(loginType.equals("appUser")){
						List<ApplyInfoTb> appList = am.listInfoByAccount(account);
						if(appList.size() > 0){
							ApplyInfoTb app = appList.get(0);
							if(app.getAppPass().equalsIgnoreCase(md5.calcMD5(password))){
								Integer appUserId = app.getId();
								Integer loginTimes = app.getUserLoginTimes();
								//修改用户登录时间、登录次数
								//获取登录次数
								if(loginTimes < 50){
									loginTimes += 1;
								}else{
									loginTimes = 0;
								}
								am.updateAppLoginInfoById(appUserId, CurrentTime.getStringDate(), loginTimes);
								session.setAttribute(Constants.LOGIN_TIMES, loginTimes);
								session.setAttribute(Constants.LOGIN_USER_ID, appUserId);
								session.setAttribute(Constants.LOGIN_TYPE, loginType);
								msg = "success";
							}else{
								msg = "fail";//用户名密码不匹配
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else{
						msg = "fail";//用户名密码不匹配
					}
				}
			}
		}else{
			msg = "fail";//用户名密码不匹配
		}
		map.put("result", msg);
//		map.put("loginType", loginType);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 登出系统
	 * @description
	 * @author wm
	 * @date 2018-7-25 下午06:09:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward loginOut(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		request.getSession(false).invalidate();
		return mapping.findForward("loginOut");
	}	
	
	/**
	 * 平台用户登录页面
	 * @description
	 * @author wm
	 * @date 2018-8-1 下午05:57:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward spLoginPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		return mapping.findForward("spLoginPage");
	}
	
	/**
	 * 平台管理人员（超级管理员登录）
	 * @description
	 * @author wm
	 * @date 2018-7-26 上午08:11:18
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward spLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		SuperUserManager sum = (SuperUserManager)  AppFactory.instance(null).getApp(Constants.WEB_SUPER_USER_INFO);
		String account = request.getParameter("account");
		String password = request.getParameter("password");
		String vCode = request.getParameter("vCode");
		Map<String,Object> map = new HashMap<String,Object>();
		MD5 md5 = new MD5();
		String msg = "";   
		boolean flag = false;
		//获取图片中的随机数字
		HttpSession session = request.getSession(false);
		String vercode2 = (String)session.getAttribute("rand");
		if(!account.equals("")){
			flag = DataBaseSqlVerify.checkSql(account);
			if(flag){
				msg = "unlaw";//账号含有非法字符
			}else{
				if(!vCode.equalsIgnoreCase(vercode2)){
					msg = "vercodeFail";//验证码不匹配 
				}else{
					List<SuperUser> suList = sum.listInfoByAccount(account);
					if(suList.size() > 0){
						SuperUser su = suList.get(0);
						if(su.getPassword().equalsIgnoreCase(md5.calcMD5(password))){
							Integer yxStatus = suList.get(0).getYxStatus();
							if(yxStatus.equals(1)){
								Integer loginTimes_db = su.getLoginTimes();
								//每次登陆，loginTimes_db自动加1，满50时恢复0状态
								if(loginTimes_db < 50){
									loginTimes_db += 1;
								}else{
									loginTimes_db = 0;
								}
								sum.updateStatusById(su.getId(), -1, loginTimes_db);
								session.setAttribute(Constants.LOGIN_TIMES, loginTimes_db);
								session.setAttribute(Constants.LOGIN_USER_ID, su.getId());
								session.setAttribute(Constants.LOGIN_USER_ROLE_NAME, su.getUserType());
								session.setAttribute(Constants.LOGIN_TYPE, "spUser");
								msg = "success";
							}else{
								msg = "lock";
							}
						}else{
							msg = "fail";//用户名密码不匹配
						}
					}else{
						msg = "fail";//用户名密码不匹配
					}
				}
			}
		}else{
			msg = "fail";//用户名密码不匹配
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}

	/**
	 * 注册界面
	 * @description
	 * @author wm
	 * @date 2018-7-26 下午03:47:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goSignPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("signPage");
	}
	
	/**
	 * 判断账号是否存在
	 * @description
	 * @author wm
	 * @date 2018-7-26 上午10:59:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		String signType = String.valueOf(request.getParameter("signType"));//cpyUser(代理机构注册),appUser(申请人/公司注册)
		String account = request.getParameter("account");
		boolean flag = DataBaseSqlVerify.checkSql(account);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(flag){
			msg = "unlaw";//账号含有非法字符
		}else{
			if(signType.equals("cpyUser")){
				if(cum.listSpecInfoByAccount(account).size() > 0){
					msg = "exist";//存在
				}else{
					msg = "noExist";//不存在
				}
			}else if(signType.equals("appUser")){
				if(am.listInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					msg = "noExist";
				}
			}else{
				msg = "fail";//异常失败
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 获取当前用户所在省、市
	 * @description
	 * @author wm
	 * @date 2018-8-2 下午04:20:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getAreaJsonApp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Map<String,String> map = new HashMap<String,String>();
		String currArea = CommonTools.getSelfArea(CommonTools.getIpAddress(request));
		if(currArea.equals("un-know")){
			map.put("result", "error");
		}else if(currArea.equals(":")){//本地局域网
			map.put("result", "error");
		}else{
			map.put("result", "success");
			String[] currAraaArr = currArea.split(":");
			map.put("prov", currAraaArr[0]);
			map.put("city", currAraaArr[1]);
		}
		String json = JSON.toJSONString(map);
		PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();   
		return null;
	}
	
	/**
	 * 注册
	 * @description
	 * @author wm
	 * @date 2018-7-25 下午06:10:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_ROLE_INFO);
		CpyInfoManager cm = (CpyInfoManager)  AppFactory.instance(null).getApp(Constants.WEB_CPY_INFO);
		String signType = String.valueOf(request.getParameter("signType"));//cpyUser(代理机构注册),appUser(申请人/公司注册)
		String msg = "";
		MD5 md5 = new MD5();
		
		String comName = Transcode.unescape(request.getParameter("name"), request);//公司名字
		String comAddress = "";//公司地址
		String comProv = Transcode.unescape(request.getParameter("prov"), request);//公司所在省份
		String comCity = Transcode.unescape(request.getParameter("city"), request);//公司所在城市
		String comLxr = Transcode.unescape(request.getParameter("lxr"), request);//公司联系人
		String email = request.getParameter("email");//个人邮箱--用于找回密码
		String comTel = Transcode.unescape(request.getParameter("tel"), request);//公司联系电话
		
		String account = request.getParameter("account");
		String password = request.getParameter("password");
		if(signType.equals("cpyUser")){//代理机构注册
			String cpyFr = "";//公司法人
			boolean flag = DataBaseSqlVerify.checkSql(account);
			if(!flag){
				//检查账号不能重复(两张表中账号不能相同)
				if(cum.listSpecInfoByAccount(account).size() > 0 || am.listInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					Integer cpyId = cm.addCpy(comName, comAddress, comProv, comCity, cpyFr, "", comLxr, comTel, "", 
							"", 0, "", "", CurrentTime.getStringDate(), CurrentTime.getFinalDate(Constants.freeDays), 0, 0);
					if(cpyId > 0){
						//自动为每个代理机构初始一个管理员身份
						Integer roleId = crm.addRole("管理员", "管理机构基本信息", cpyId);
						//增加代理机构管理员
						Integer cpyUserId = cum.addCpyUser(cpyId, "", "", account, md5.calcMD5(password), "m", 
								email, "", CurrentTime.getStringDate(), "", "");
						//增加身份绑定
						Integer ruId = crm.addRoleUser(roleId, cpyUserId);
						if(ruId > 0){
							msg = "success";//成功
						}else{
							msg = "fail";//失败
						}
					}else{
						msg = "fail";//失败
					}
				}
			}else{
				msg = "unlaw";//账号含有非法字符
			}
		}else if(signType.equals("appUser")){//申请公司注册
			String appType = request.getParameter("appType");//申请人/公司类型
			String namePy = Convert.getFirstSpell(comName);
			String appICard = "";//申请人/公司卡号
			String appQQ = "";//申请人/公司QQ
			boolean flag = DataBaseSqlVerify.checkSql(account);
			if(!flag){
				if(am.listInfoByAccount(account).size() > 0 || cum.listSpecInfoByAccount(account).size() > 0){
					msg = "exist";
				}else{
					Integer appId = am.addAppInfo(appType, comName, namePy, appICard, comAddress, account, md5.calcMD5(password), comLxr, comTel, email, appQQ);
					if(appId > 0){
						msg = "success";//成功
					}else{
						msg = "fail";//失败
					}
				}
			}else{
				msg = "unlaw";//账号含有非法字符
			}
		}else{
			msg = "fail";//失败
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	/**
	 * 导向忘记密码界面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goForgetPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		return mapping.findForward("forgetPassPage");
	}
	
	/**
	 * 根据用户提供的账号获取用户邮箱信息
	 * @description
	 * @author wm
	 * @date 2018-7-30 上午08:26:34
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getUserEmailInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
//		String userType = String.valueOf(request.getParameter("userType"));
		String account = String.valueOf(request.getParameter("account"));
		String vCode = String.valueOf(request.getParameter("vCode"));
//		boolean userTypeFlag = (userType.equals("") || userType.equals("null"));	
		boolean accountFlag = (account.equals("") || account.equals("null"));
		boolean codeFlag = (vCode.equals("") || vCode.equals("null"));
		//获取图片中的随机数字
		HttpSession session = request.getSession(false);
		String vercode2 = (String)session.getAttribute("rand");
		if(!accountFlag){
			if(!codeFlag && vCode.equalsIgnoreCase(vercode2)){
				List<CpyUserInfo> userList_1 = cum.listSpecInfoByAccount(account);
				if(userList_1.size() > 0){
					map.put("result", "success");
					map.put("id", userList_1.get(0).getId());
					map.put("userEmail", userList_1.get(0).getUserEmail());
					map.put("userType", "cpyUser");//代理机构
				}else{
					//可能是申请人/公司的账号
					List<ApplyInfoTb> userList_2 = am.listInfoByAccount(account);
					if(userList_2.size() > 0){
						map.put("result", "success");
						map.put("id", userList_2.get(0).getId());
						map.put("userEmail", userList_2.get(0).getAppEmail());
						map.put("userType", "appUser");//申请人/公司
					}else{
						map.put("result", "noInfo");//查无此账号
					}
				}
			}else{
				map.put("result", "vercodeFail");//验证码错误
			}
		}else{
			map.put("result", "accountNull");//账号为空
		}
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 发送邮箱验证码
	 * @description
	 * @author wm
	 * @date 2018-7-30 下午04:11:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sendSysEmailCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		SendEmailCodeInfoManager secm = (SendEmailCodeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_MAIL_CODE_INFO);
		Map<String,String> map = new HashMap<String,String>();
		String toUserEmail = String.valueOf(request.getParameter("userEmail"));
		boolean flag = false;
		String msg = "";
		if(toUserEmail.equals("") || toUserEmail.equals("null")){
			msg = "noEmail";
		}else{
			flag = CommonTools.checkEmail(toUserEmail);
			if(flag){
				//检查数据库中有没有刚刚发过验证码
				List<SendEmailCodeInfo> secList = secm.listSpecInfoByOpt(toUserEmail, "");
				if(secList.size() > 0){
					SendEmailCodeInfo sec = secList.get(0);
					String sendTime_base = CurrentTime.convertTimestampToString(sec.getSendTime());
					long diffMills = CurrentTime.compareDateTime(CurrentTime.getCurrentTime(),sendTime_base);//当前时间减去发送时间
					if(diffMills < 60000){//毫秒（1分钟以内）
						msg = "noSend";//一分钟内只能发送一次
					}else{
						String code = InviteCode.getRandomNumberCode();
						 MailSendInfo mailInfo = new MailSendInfo();    
					      mailInfo.setMailServerHost(Constants.MAIL_SERVER_HOST);    
					      mailInfo.setMailServerPort(Constants.MAIL_SERVER_PORT);    
					      mailInfo.setValidate(Constants.VALIDATE_FLAG);    
					      mailInfo.setUserName(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱账号    
					      mailInfo.setPassword(Constants.SYSTEM_EMAIL_PASS);//您的邮箱授权码 
					      mailInfo.setFromAddress(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱地址（同账号）  
					      mailInfo.setToAddress(toUserEmail);//邮件接收人地址 
					      mailInfo.setSubject("重置密码验证码");    
					      mailInfo.setContent("你的验证码是："+code + " 该验证码30分钟内有效，请尽快使用!");      
					      flag = SimpleMailSender.sendTextMail(mailInfo);
					      if(flag){
					    	  secm.updateInfoById(sec.getId(), code, CurrentTime.getCurrentTime1(), 0);
					    	  msg = "success";
					      }else{
					    	  msg = "sendFail";//发送失败
					      }
					}
				}else{//直接发送验证码
					String code = InviteCode.getRandomNumberCode();
					 MailSendInfo mailInfo = new MailSendInfo();    
				      mailInfo.setMailServerHost(Constants.MAIL_SERVER_HOST);    
				      mailInfo.setMailServerPort(Constants.MAIL_SERVER_PORT);    
				      mailInfo.setValidate(Constants.VALIDATE_FLAG);    
				      mailInfo.setUserName(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱账号    
				      mailInfo.setPassword(Constants.SYSTEM_EMAIL_PASS);//您的邮箱授权码 
				      mailInfo.setFromAddress(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱地址（同账号）  
				      mailInfo.setToAddress(toUserEmail);//邮件接收人地址 
				      mailInfo.setSubject("重置密码验证码");    
				      mailInfo.setContent("你的验证码是："+code + " 该验证码30分钟内有效，请尽快使用!");    
				      flag = SimpleMailSender.sendTextMail(mailInfo);
				      if(flag){
				    	  secm.addSEC(toUserEmail, code, CurrentTime.getCurrentTime1());
				    	  msg = "success";
				      }else{
				    	  msg = "sendFail";//发送失败
				      }
				}
			}else{
				msg = "emailError";
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 判断验证码，成功后自动重置密码，并将密码发送至用户邮箱
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkInputPass(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		SendEmailCodeInfoManager secm = (SendEmailCodeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_SEND_MAIL_CODE_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String userType = request.getParameter("userType");
		String inputCode = String.valueOf(request.getParameter("inpCode"));
		String userEmail = String.valueOf(request.getParameter("userEmail"));
		Integer userId = CommonTools.getFinalInteger(request.getParameter("userId"));
		String msg = "";
		//检查验证码是否正确
		boolean flag_e = (userEmail.equals("") || userEmail.equals("null"));
		boolean flag_c = (inputCode.equals("") || inputCode.equals("null"));
		if(!flag_e && !flag_c){
			List<SendEmailCodeInfo> secList = secm.listSpecInfoByOpt(userEmail, inputCode);
			if(secList.size() > 0){
				Integer useStatus = secList.get(0).getUseStatus();
				if(useStatus.equals(0)){
					String sendTime = CurrentTime.convertTimestampToString(secList.get(0).getSendTime());
					long diffMills = CurrentTime.compareDateTime(CurrentTime.getCurrentTime(),sendTime);//当前时间减去发送时间
					if(diffMills < 60000 * 30){//毫秒（30分钟以内）
						if(userId > 0){
							if(userType.equals("cpyUser")){
								CpyUserInfo cUser = cum.getEntityById(userId);
								if(cUser != null){
									//往用户邮箱发送重置后的随机密码
									String code = InviteCode.getRandomNumberCode();
									 MailSendInfo mailInfo = new MailSendInfo();    
								      mailInfo.setMailServerHost(Constants.MAIL_SERVER_HOST);    
								      mailInfo.setMailServerPort(Constants.MAIL_SERVER_PORT);    
								      mailInfo.setValidate(Constants.VALIDATE_FLAG);    
								      mailInfo.setUserName(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱账号    
								      mailInfo.setPassword(Constants.SYSTEM_EMAIL_PASS);//您的邮箱授权码 
								      mailInfo.setFromAddress(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱地址（同账号）  
								      mailInfo.setToAddress(userEmail);//邮件接收人地址 
								      mailInfo.setSubject("重置密码");    
								      mailInfo.setContent("你的随机密码是："+code + " 请登录系统后尽快进行修改!");    
								      boolean flag = SimpleMailSender.sendTextMail(mailInfo);
								      if(flag){
								    	  //修改用户密码
								    	  cum.updatePassById(userId, code);
								    	  msg = "success";
								      }else{
								    	  msg = "sendFail";//发送失败
								      }
								}else{
									msg = "noUser";//查无此人
								}
							}else if(userType.equals("appUser")){
								ApplyInfoTb aUser = am.getEntityById(userId);
								if(aUser != null){
									//往用户邮箱发送重置后的随机密码
									String code = InviteCode.getRandomNumberCode();
									 MailSendInfo mailInfo = new MailSendInfo();    
								      mailInfo.setMailServerHost(Constants.MAIL_SERVER_HOST);    
								      mailInfo.setMailServerPort(Constants.MAIL_SERVER_PORT);    
								      mailInfo.setValidate(Constants.VALIDATE_FLAG);    
								      mailInfo.setUserName(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱账号    
								      mailInfo.setPassword(Constants.SYSTEM_EMAIL_PASS);//您的邮箱授权码 
								      mailInfo.setFromAddress(Constants.SYSTEM_EMAIL_ACCOUNT);//邮箱地址（同账号）  
								      mailInfo.setToAddress(userEmail);//邮件接收人地址 
								      mailInfo.setSubject("重置密码");    
								      mailInfo.setContent("你的随机是："+code + " 请登录系统后尽快进行修改!");    
								      boolean flag = SimpleMailSender.sendTextMail(mailInfo);
								      if(flag){
								    	  //修改用户密码
								    	  am.updatePassById(userId, code);
								    	  msg = "success";
								      }else{
								    	  msg = "sendFail";//发送失败
								      }
								}else{
									msg = "noUser";//查无此人
								}
							}else{
								msg = "error";
							}
						}else{
							msg = "error";
						}
					}else{
						msg = "error";//无效或者已被使用
					}
				}else{
					msg = "error";//无效或者已被使用
				}
			}else{
				msg = "error";//无效或者已被使用
			}
		}else{
			msg = "error";//无效或者已被使用
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
}