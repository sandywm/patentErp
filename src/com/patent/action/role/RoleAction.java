/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.role;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.CpyRoleInfoTb;
import com.patent.module.CpyUserInfo;
import com.patent.service.CpyRoleInfoManager;
import com.patent.service.CpyUserInfoManager;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 08-04-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class RoleAction extends DispatchAction {
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 导向代理机构角色管理界面
	 * @description
	 * @author wm
	 * @date 2018-8-4 下午04:32:41
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goRolePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("rolePage");
	}
	
	/**
	 * 增加角色
	 * @description
	 * @author wm
	 * @date 2018-8-4 下午04:33:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward addRole(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		Integer userId = this.getLoginUserId(request);
		CpyUserInfo cUser = cum.getEntityById(userId);
		boolean abilityFlag = false;
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(cUser != null){
			Integer cpyId = cUser.getCpyInfoTb().getId();
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				//获取当前用户有无增加角色的权限，如果是管理员直接跳过（管理员直接拥有权限）
				
			}
			if(abilityFlag){
				String roleName = Transcode.unescape(request.getParameter("inpRoleName"), request);
				String roleProfile = Transcode.unescape(request.getParameter("roleProfile"), request);
				//检查当前输入的角色名字是否存在
				if(crm.listInfoByOpt(cpyId, roleName).size() > 0){
					msg = "exist";//已存在
				}else{
					//增加角色
					Integer roleId = crm.addRole(roleName, roleProfile, cpyId);
					if(roleId > 0){
						msg = "success";
					}else{
						msg = "error";
					}
				}
			}else{
				msg = "noAbility";
			}
		}else{
			msg = "fail";
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 修改角色
	 * @description
	 * @author wm
	 * @date 2018-8-4 下午05:35:54
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateRole(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		CpyRoleInfoManager crm = (CpyRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		Integer userId = this.getLoginUserId(request);
		CpyUserInfo cUser = cum.getEntityById(userId);
		boolean abilityFlag = false;
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(cUser != null){
			Integer cpyId = cUser.getCpyInfoTb().getId();
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				//获取当前用户有无增加角色的权限，如果是管理员直接跳过（管理员直接拥有权限）
				
			}
			if(abilityFlag){
				Integer roleId = Integer.parseInt(request.getParameter("roleId"));
				String roleName = Transcode.unescape(request.getParameter("inpRoleName"), request);
				String roleProfile = Transcode.unescape(request.getParameter("roleProfile"), request);
				//修改前获取当前roleId的数据库中的名字
				List<CpyRoleInfoTb> rList = crm.listInfoById(roleId);
				if(rList.size() > 0){
					String roleName_db = rList.get(0).getRoleName();
					if(roleName_db.equals(roleName)){
						//相同说明没修改，不进行重名检查
					}else{
						if(crm.listInfoByOpt(cpyId, roleName).size() > 0){
							msg = "exist";//已存在
						}else{
							boolean flag = crm.updateRoleById(roleId, roleName, roleProfile);
							if(flag){
								msg = "success";
							}else{
								msg = "error";
							}
						}
					}
				}else{
					msg = "fail";
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
}