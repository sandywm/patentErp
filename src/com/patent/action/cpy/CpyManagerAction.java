/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.cpy;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.CpyInfoTb;
import com.patent.page.PageConst;
import com.patent.service.CpyInfoManager;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 08-06-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CpyManagerAction extends DispatchAction {
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 导向所有代理机构列表页面
	 * @description
	 * @author wm
	 * @date 2018-8-6 上午09:45:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goCpyPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("cpyPage");
	}
	
	/**
	 * 获取代理机构记录列表
	 * @description
	 * @author wm
	 * @date 2018-8-6 上午09:49:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getCpyCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyInfoManager cm = (CpyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_INFO);
		String cpyName = Transcode.unescape(request.getParameter("cpyName"), request);
		String cpyProv = Transcode.unescape(request.getParameter("cpyProv"), request);
		String cpyCity = Transcode.unescape(request.getParameter("cpyCity"), request);
		String cpyLxr = Transcode.unescape(request.getParameter("cpyLxr"), request);
		String cpyFr = Transcode.unescape(request.getParameter("cpyFr"), request);
		Integer cpyLevel = Integer.parseInt(request.getParameter("cpyLevel"));
		Integer yxStatus = Integer.parseInt(request.getParameter("yxStatus"));//有效状态--会员是否过期(-1[全部],0[已过期],1[未过期])
		Integer count = cm.getCountByOpt(cpyName, cpyProv, cpyCity, cpyFr, cpyLxr, cpyLevel, yxStatus);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 分页获取代理机构列表
	 * @description
	 * @author wm
	 * @date 2018-8-6 上午10:21:48
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCpyPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyInfoManager cm = (CpyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_INFO);
		String cpyName = Transcode.unescape(request.getParameter("cpyName"), request);
		String cpyProv = Transcode.unescape(request.getParameter("cpyProv"), request);
		String cpyCity = Transcode.unescape(request.getParameter("cpyCity"), request);
		String cpyLxr = Transcode.unescape(request.getParameter("cpyLxr"), request);
		String cpyFr = Transcode.unescape(request.getParameter("cpyFr"), request);
		Integer cpyLevel = Integer.parseInt(request.getParameter("cpyLevel"));
		Integer yxStatus = Integer.parseInt(request.getParameter("yxStatus"));//有效状态--会员是否过期(-1[全部],0[已过期],1[未过期])
		Integer count = cm.getCountByOpt(cpyName, cpyProv, cpyCity, cpyFr, cpyLxr, cpyLevel, yxStatus);
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("pageSize")), 10);
			Integer pageCount = PageConst.getPageCount(count, pageSize);
			Integer pageNo = PageConst.getPageNo(String.valueOf(request.getParameter("pageNo")), pageCount);
			List<CpyInfoTb> cpyList = cm.listPageInfoByOpt(cpyName, cpyProv, cpyCity, cpyFr, cpyLxr, cpyLevel, yxStatus, pageNo, pageSize);
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<CpyInfoTb> it = cpyList.iterator() ; it.hasNext();){
				CpyInfoTb cpy = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", cpy.getId());
				map_d.put("cpyName", cpy.getCpyName());
				map_d.put("cpyNamePy", cpy.getCpyNamePy());
				map_d.put("cpyAddress", cpy.getCpyAddress());
				map_d.put("cpyProv", cpy.getCpyProv());
				map_d.put("cpyCity", cpy.getCpyCity());
				map_d.put("cpyFr", cpy.getCpyFr());
				map_d.put("cpyYyzz", cpy.getCpyYyzz());
				map_d.put("cpyLxr", cpy.getCpyLxr());
				map_d.put("lxrTel", cpy.getLxrTel());
				map_d.put("lxrEmail", cpy.getLxrEmail());
				map_d.put("cpySubIdStr", cpy.getCpySubId());
				map_d.put("cpyParIdStr", cpy.getCpyParId());
				map_d.put("cpyUrl", cpy.getCpyUrl());
				map_d.put("cpyProfile", cpy.getCpyProfile());
				map_d.put("signDate", cpy.getSignDate());
				map_d.put("endDate", cpy.getEndDate());
				map_d.put("hotStatus", cpy.getHotStatus());
				map_d.put("levelNum", cpy.getCpyLevel());
				if(cpy.getCpyLevel().equals(0)){
					map_d.put("levelChi", "铜牌");
				}else if(cpy.getCpyLevel().equals(1)){
					map_d.put("levelChi", "银牌");
				}else if(cpy.getCpyLevel().equals(2)){
					map_d.put("levelChi", "金牌");
				}else if(cpy.getCpyLevel().equals(3)){
					map_d.put("levelChi", "钻石牌");
				}
				list_d.add(map_d);
			}
			map.put("result", "success");
			map.put("cpyInfo", list_d);
		}else{
			map.put("result", "noInfo");
		}
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
}