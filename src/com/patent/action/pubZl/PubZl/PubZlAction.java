/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.pubZl.PubZl;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.CpyInfoTb;
import com.patent.module.CpyUserInfo;
import com.patent.module.PubZlInfoTb;
import com.patent.page.PageConst;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.PubZlInfoManager;
import com.patent.tools.CurrentTime;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 08-13-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PubZlAction extends DispatchAction {
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	/**
	 * 获取session中的用户角色编号
	 * @param request
	 * @return
	 */
	private Integer getLoginRoleId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 获取session中的登录类型
	 * @author Administrator
	 * @date 2018-7-31 下午09:39:57
	 * @ModifiedBy
	 * @param request
	 * @return
	 */
	private String getLoginType(HttpServletRequest request){
        String loginType = (String)request.getSession(false).getAttribute(Constants.LOGIN_TYPE);
        return loginType;
	}
	
	/**
	 * 专利列表管理界面
	 * @description
	 * @author wm
	 * @date 2018-8-13 上午09:00:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goPubZlPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("zlPage");
	}
	
	/**
	 * 分页获取专利列表(申请人/公司，平台用户查看)
	 * @description
	 * @author wm
	 * @date 2018-8-13 上午09:03:06
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String zlTitle = Transcode.unescape(request.getParameter("zlTitle"), request);
		String zlNo = request.getParameter("zlNo");
		String zlType = request.getParameter("zlType");
		String pubDate = request.getParameter("pubDate");
		Integer zlStatus = Integer.parseInt(request.getParameter("zlStatus"));
		Integer currUserId = 0;
		boolean flag = false;
		if(this.getLoginType(request).equals("appUser")){//申请人/公司查看
			currUserId = this.getLoginUserId(request);
			flag = true;
		}else if(this.getLoginType(request).equals("spUser")){//平台用户登录
			flag = true;
		}
		if(flag){
			Integer count = pzm.getCountByOpt(currUserId, zlTitle, zlNo, zlType, pubDate, zlStatus);
			if(count > 0){
				map.put("result", "success");
				Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("pageSize")), 10);
				Integer pageCount = PageConst.getPageCount(count, pageSize);
				Integer pageNo = PageConst.getPageNo(String.valueOf(request.getParameter("pageNo")), pageCount);
				List<PubZlInfoTb> pzList = pzm.listPageInfoByOpt(currUserId, zlTitle, zlNo, zlType, pubDate, zlStatus, pageNo, pageSize);
				List<Object> list_d = new ArrayList<Object>();
				for(Iterator<PubZlInfoTb> it = pzList.iterator() ; it.hasNext();){
					PubZlInfoTb pz = it.next();
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("id", pz.getId());
					map_d.put("title", pz.getZlTitle());
					if(pz.getZlType().equals("fm")){
						map_d.put("type", "发明");
					}else if(pz.getZlType().equals("syxx")){
						map_d.put("type", "实用新型");
					}else if(pz.getZlType().equals("wg")){
						map_d.put("type", "外观");
					}else if(pz.getZlType().equals("fmxx")){
						map_d.put("type", "发明、实用新型");
					}
					if(pz.getZlUpCl().equals("")){
						map_d.put("clFlag", false);
					}else{
						map_d.put("clFlag", true);
					}
					map_d.put("pubDate", CurrentTime.dateConvertToString(pz.getZlNewDate()));
					map_d.put("lqrName", pz.getLqUserName());
					map_d.put("lqrCpyName", pz.getLqCpyName());
					if(pz.getLqUserId() > 0){
						map_d.put("lqDate", CurrentTime.dateConvertToString(pz.getLqDate()));
					}else{
						map_d.put("lqDate", "");
					}
					map_d.put("pubInfo", pz.getApplyInfoTb().getAppName());
					map_d.put("ajIdStr", pz.getAjIdStr());
					list_d.add(map_d);
				}
				map.put("pzInfo", list_d);
			}else{
				map.put("result", "noInfo");
			}
		}else{
			map.put("result", "noAbility");
		}
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 根据条件获取发布专利列表记录条数
	 * @description
	 * @author wm
	 * @date 2018-8-13 上午11:27:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		Map<String,Integer> map = new HashMap<String,Integer>();
		String zlTitle = Transcode.unescape(request.getParameter("zlTitle"), request);
		String zlNo = request.getParameter("zlNo");
		String zlType = request.getParameter("zlType");
		String pubDate = request.getParameter("pubDate");
		Integer zlStatus = Integer.parseInt(request.getParameter("zlStatus"));
		Integer currUserId = 0;
		if(this.getLoginType(request).equals("appUser")){//申请人/公司查看
			currUserId = this.getLoginUserId(request);
		}
		Integer count = pzm.getCountByOpt(currUserId, zlTitle, zlNo, zlType, pubDate, zlStatus);
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 修改自己发布的专利
	 * @description
	 * @author wm
	 * @date 2018-8-13 上午11:30:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateSelfPzInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(this.getLoginType(request).equals("appUser")){//申请人/公司查看
			Integer currUserId = this.getLoginUserId(request);
			Integer pubId = Integer.parseInt(request.getParameter("pubId"));
			if(pzm.listSpecInfoByOpt(pubId, currUserId).size() > 0){
				String zlTitle = Transcode.unescape(request.getParameter("zlTitle"), request);
				String zlContent =  Transcode.unescape(request.getParameter("zlContent"), request);
				String zlType = request.getParameter("zlType");
				String zlUpCl = request.getParameter("zlUpCl");
				boolean flag = pzm.updateBasicInfoById(pubId, zlTitle, zlContent, zlType, zlUpCl);
				if(flag){
					msg = "success";
				}else{
					msg = "error";
				}
			}else{
				msg = "fail";
			}
		}else{
			msg = "noAbility";
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 修改发布专利的高级信息（专利状态、领取信息、案件编号）
	 * @description
	 * @author wm
	 * @date 2018-8-13 下午03:59:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateHignPzInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		Integer pubId = Integer.parseInt(request.getParameter("pubId"));
		Integer zlStatus = Integer.parseInt(request.getParameter("zlStatus"));
		Integer lqUserId = 0;
		String lqUserName = "";
		Integer lqCpyId = 0;
		String lqCpyName = "";
		Date lqDate = null;
		String ajIdStr = "";
		boolean flag = false;
		if(this.getLoginType(request).equals("appUser")){//申请人/公司修改专利状态
			Integer currUserId = this.getLoginUserId(request);
			if(pzm.listSpecInfoByOpt(pubId, currUserId).size() > 0){
				flag = true;
			}
		}else if(this.getLoginType(request).equals("cpyUser")){//当是代理机构员工时
			//必须是银牌以上会员并且没到期才能接任务
			CpyUserInfo cUser = cum.getEntityById(lqUserId);
			CpyInfoTb cpy = cUser.getCpyInfoTb();
			if(cpy.getCpyLevel() > 0 && CurrentTime.compareDate(CurrentTime.getStringDate(), CurrentTime.dateConvertToString(cpy.getEndDate())) > 0){
				if(zlStatus.equals(1)){//被代理机构员工接受
					lqUserId = this.getLoginUserId(request);
					lqUserName = cUser.getUserName();
					lqCpyId = cUser.getCpyInfoTb().getId();
					lqCpyName = cUser.getCpyInfoTb().getCpyName();
					lqDate = CurrentTime.stringToDate_1(CurrentTime.getStringDate());
					ajIdStr = request.getParameter("ajIdStr");
				}
				flag = true;
			}
		}
		if(flag){
			flag = pzm.updatePubZlById(pubId, zlStatus, lqUserId, lqUserName, lqCpyId, lqCpyName, lqDate, ajIdStr);
			if(flag){
				msg = "success";
			}else{
				msg = "error";
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
}