/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.user;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.factory.AppFactory;
import com.patent.module.ApplyInfoTb;
import com.patent.module.CpyUserInfo;
import com.patent.module.SuperUser;
import com.patent.service.ApplyInfoManager;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.SuperUserManager;
import com.patent.tools.MD5;
import com.patent.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 07-29-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class UserAction extends DispatchAction {
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	/**
	 * 获取session中的用户角色编号
	 * @param request
	 * @return
	 */
	private Integer getLoginRoleId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 获取session中的登录类型
	 * @author Administrator
	 * @date 2018-7-31 下午09:39:57
	 * @ModifiedBy
	 * @param request
	 * @return
	 */
	private String getLoginType(HttpServletRequest request){
        String loginType = (String)request.getSession(false).getAttribute(Constants.LOGIN_TYPE);
        return loginType;
	}
	/**
	 * 获取个人用户详细记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getUserDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Integer userId = this.getLoginUserId(request);
		String loginType = this.getLoginType(request);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		SuperUserManager sum = (SuperUserManager)  AppFactory.instance(null).getApp(Constants.WEB_SUPER_USER_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		if(loginType.equals("appUser")){//申请人/公司身份
			ApplyInfoTb appUser = am.getEntityById(userId);
			if(appUser != null){
				map.put("result", "succ");
				map.put("appId", appUser.getId());
				map.put("appName", appUser.getAppName());
				map.put("appType", appUser.getAppType());
				map.put("appICard", appUser.getAppICard());
				map.put("appAddress", appUser.getAppAddress());
				map.put("appAccount", appUser.getAppAccount());
				map.put("appLxr", appUser.getAppLxr());
				map.put("appTel", appUser.getAppTel());
				map.put("appEmail", appUser.getAppEmail());
			}else{
				map.put("result", "noUser");//查无此人
			}
		}else if(loginType.equals("cpyUser")){//代理机构
			CpyUserInfo cpyUser = cum.getEntityById(userId);
			if(cpyUser != null){
				map.put("result", "succ");
				map.put("userId", cpyUser.getId());
				map.put("userName", cpyUser.getUserName());
				map.put("account", cpyUser.getUserAccount());
				map.put("password", cpyUser.getUserPassword());
				map.put("sex", cpyUser.getUserSex());
				map.put("email", cpyUser.getUserEmail());
				map.put("tel", cpyUser.getUserTel());
				map.put("inDate", cpyUser.getUserInDate());
				map.put("outDate", cpyUser.getUserOutDate());
				map.put("lzStatus", cpyUser.getUserLzStatus());
				map.put("zxNum", cpyUser.getUserZxNum());
				map.put("scFiled", cpyUser.getUserScFiledId());
				map.put("scFiledName", cpyUser.getUserScFiledName());
				map.put("useExp", cpyUser.getUserExper());
			}else{
				map.put("result", "noUser");//查无此人
			}
		}else if(loginType.equals("spUser")){//平台用户
			List<SuperUser> suList = sum.listInfoById(userId);
			if(suList.size() > 0){
				SuperUser spUser = suList.get(0);
				map.put("result", "succ");
				map.put("userId", spUser.getId());
				map.put("userName", spUser.getUserName());
				map.put("account", spUser.getAccount());
				map.put("password", spUser.getPassword());
				map.put("userType", spUser.getUserType());
			}else{
				map.put("result", "noUser");//查无此人
			}
		}else{
			map.put("result", "fail");//session失效或者捣乱
		}
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 修改用户密码
	 * @author Administrator
	 * @date 2018-7-31 下午09:37:46
	 * @ModifiedBy
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateUserPass(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Integer userId = this.getLoginUserId(request);
		String loginType = this.getLoginType(request);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ApplyInfoManager am = (ApplyInfoManager) AppFactory.instance(null).getApp(Constants.WEB_APPLY_INFO);
		SuperUserManager sum = (SuperUserManager)  AppFactory.instance(null).getApp(Constants.WEB_SUPER_USER_INFO);
		Map<String,String> map = new HashMap<String,String>();
		String inputPass_old = String.valueOf(request.getParameter("passOld"));
		String newPass = String.valueOf(request.getParameter("newPass"));
		MD5 md5 = new MD5();
		String msg = "";
		if(inputPass_old.equals("null") || inputPass_old.equals("")){
			msg = "oldNull";//输入原数据库密码为空
		}else{
			if(loginType.equals("cpyUser")){
				CpyUserInfo cUser = cum.getEntityById(userId);
				if(cUser != null){
					String pass_db = cUser.getUserPassword();
					if(pass_db.equalsIgnoreCase(md5.calcMD5(inputPass_old))){
						cum.updatePassById(userId, newPass);
						msg = "success";
					}else{
						msg = "noMatch";//不匹配
					}
				}
			}else if(loginType.equals("appUser")){
				ApplyInfoTb app = am.getEntityById(userId);
				if(app != null){
					String pass_db = app.getAppPass();
					if(pass_db.equalsIgnoreCase(md5.calcMD5(newPass))){
						am.updatePassById(userId, newPass);
						msg = "success";
					}else{
						msg = "noMatch";//不匹配
					}
				}
			}else if(loginType.equals("spUser")){
				List<SuperUser> suList = sum.listInfoById(userId);
				if(suList.size() > 0){
					String pass_db = suList.get(0).getPassword();
					if(pass_db.equalsIgnoreCase(md5.calcMD5(newPass))){
						sum.updateSUserById(userId, newPass, "");
						msg = "success";
					}else{
						msg = "noMatch";//不匹配
					}
				}
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
}