/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.zl;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.util.WebUrl;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.module.CpyUserInfo;
import com.patent.module.CustomerFmrInfoTb;
import com.patent.module.CustomerInfoTb;
import com.patent.module.CustomerLxrInfoTb;
import com.patent.module.JsFiledInfoTb;
import com.patent.module.PubZlInfoTb;
import com.patent.module.ZlajEwyqInfoTb;
import com.patent.module.ZlajFeeInfoTb;
import com.patent.module.ZlajFjInfoTb;
import com.patent.module.ZlajLcInfoTb;
import com.patent.module.ZlajLcMxInfoTb;
import com.patent.module.ZlajMainInfoTb;
import com.patent.module.ZlajTzsInfoTb;
import com.patent.page.PageConst;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.CustomerInfoManager;
import com.patent.service.JsFiledInfoManager;
import com.patent.service.MailInfoManager;
import com.patent.service.PubZlInfoManager;
import com.patent.service.ZlajEwyqInfoManager;
import com.patent.service.ZlajFeeInfoManager;
import com.patent.service.ZlajFjInfoManager;
import com.patent.service.ZlajLcInfoManager;
import com.patent.service.ZlajLcMxInfoManager;
import com.patent.service.ZlajMainInfoManager;
import com.patent.service.ZlajTzsInfoManager;
import com.patent.tools.CommonTools;
import com.patent.tools.Convert;
import com.patent.tools.CurrentTime;
import com.patent.tools.FileOpration;
import com.patent.util.Constants;
import com.patent.web.Ability;

/** 
 * MyEclipse Struts
 * Creation date: 08-25-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ZlMainAction extends DispatchAction {
	
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色编号
	 * @param request
	 * @return
	 */
	private Integer getLoginRoleId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 获取session中的登录类型
	 * @author Administrator
	 * @date 2018-7-31 下午09:39:57
	 * @ModifiedBy
	 * @param request
	 * @return
	 */
	private String getLoginType(HttpServletRequest request){
        String loginType = (String)request.getSession(false).getAttribute(Constants.LOGIN_TYPE);
        return loginType;
	}
	
	/**
	 * 封装json
	*  @author  Administrator
	*  @ModifiedBy  
	*  @date  2018-8-21 下午10:17:05
	*  @param obj
	*  @param response
	*  @throws IOException
	 */
	private void getJsonPkg(Object obj,HttpServletResponse response) throws IOException{
		String json = JSON.toJSONString(obj);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
	}
	
	/**
	 * 导向专利页面
	 * @description
	 * @author wm
	 * @date 2018-8-25 下午05:34:01
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward goZlPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String[] myAbility = Ability.getAbilityInfo("addZl,upZl,delZl", this.getLoginType(request), this.getLoginRoleName(request), this.getLoginRoleId(request)).split(",");
		request.setAttribute("delFlag", myAbility[0]);
		request.setAttribute("upFlag", myAbility[1]);
		request.setAttribute("addFlag", myAbility[2]);
		return mapping.findForward("zlPage");
	}
	
	/**
	 * 根据条件分页获取专利信息列表(只对代理机构和平台用户开放)
	 * @description
	 * @author wm
	 * @date 2018-8-25 下午05:50:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageZlData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CustomerInfoManager cm = (CustomerInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUSTOMER_INFO);
		JsFiledInfoManager jsm = (JsFiledInfoManager) AppFactory.instance(null).getApp(Constants.WEB_JS_FIELD_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		Integer cpyId = CommonTools.getFinalInteger("cpyId",request);
		Integer stopStatus = CommonTools.getFinalInteger("stopStatus",request);
		String ajNoQt = CommonTools.getFinalStr("ajNoQt",request);
		String sqAddress = Transcode.unescape_new("sqAddress", request);
		String zlNo = CommonTools.getFinalStr("zlNo", request);
		String ajTitle = Transcode.unescape_new("ajTitle", request);
		String ajType = CommonTools.getFinalStr("ajType", request);
		String lxr = CommonTools.getFinalStr("lxr", request);
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		Integer lqStatus = CommonTools.getFinalInteger("lqStatus", request);//任务条件（0：撰写任务领取，1：专利任务）
		//当任务条件为0时，撰写任务领取，这时需要强制stopStatus为正常（0）
		if(lqStatus.equals(0)){//撰写任务领取时，专利任务必须时正常状态
			stopStatus = 0;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String loginType = this.getLoginType(request);
		boolean abilityFlag = false;
		if(loginType.equals("cpyUser")){//代理机构下
			CpyUserInfo cpyUser = cum.getEntityById(this.getLoginUserId(request));
			if(cpyUser != null){
				cpyId = cpyUser.getCpyInfoTb().getId();
				abilityFlag = true;
			}
		}else if(loginType.equals("spUser")){//平台用户
			abilityFlag = true;
		}
		if(abilityFlag){
			Integer count = zlm.getCountByOpt(cpyId, stopStatus, sqAddress, ajNoQt, zlNo, ajTitle, ajType, lxr, sDate, eDate,lqStatus);
			if(count > 0){
				Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
				Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
				List<ZlajMainInfoTb> zlList = zlm.listPageInfoByOpt(cpyId, stopStatus, sqAddress, ajNoQt, zlNo, ajTitle, ajType, lxr, sDate, eDate, lqStatus, pageNo, pageSize);
				List<Object> list_d = new ArrayList<Object>();
				for(Iterator<ZlajMainInfoTb> it = zlList.iterator() ; it.hasNext();){
					ZlajMainInfoTb zl = it.next();
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("id", zl.getId());
					map_d.put("ajNo", zl.getAjNoQt());
					map_d.put("ajNoGf", zl.getAjNoGf());
					map_d.put("ajTitle", zl.getAjTitle());
					String ajType_db = zl.getAjType();
					String ajType_new = "";
					if(ajType_db.equals("fm")){
						ajType_new = "发明";
					}else if(ajType_db.equals("syxx")){
						ajType_new = "实用新型";
					}else if(ajType_db.equals("wg")){
						ajType_new = "外观";
					}else if(ajType_db.equals("fmxx")){
						ajType_new = "发明+新型";
					}
					map_d.put("ajType", ajType_new);
					String ajFieldIdStr = zl.getAjFieldId();
					String ajFieldName = "";
					if(!ajFieldIdStr.equals("")){
						List<JsFiledInfoTb> jsList = jsm.listInfoByOpt(cpyId, ajFieldIdStr);
						for(Iterator<JsFiledInfoTb> it_js = jsList.iterator(); it_js.hasNext();){
							JsFiledInfoTb js = it_js.next();
							ajFieldName += js.getZyName() + ",";
						}
						if(!ajFieldName.equals("")){
							ajFieldName = ajFieldName.substring(0, ajFieldName.length() - 1);
						}
					}				
					map_d.put("ajFieldName", ajFieldName);
					String sqrId = zl.getAjSqrId();//可以是公司也可以是个人
					String sqrName = "";
					if(!sqrId.equals("")){
						String[] sqrIdArr = sqrId.split(",");
						for(Integer k = 0 ; k < sqrIdArr.length ; k++){
							List<CustomerInfoTb> cList = cm.listInfoById(cpyId, Integer.parseInt(sqrIdArr[k]));
							if(cList.size() > 0){
								sqrName += cList.get(0).getCusName() + ",";
							}
						}
						if(!sqrName.equals("")){
							sqrName = sqrName.substring(0, sqrName.length() - 1);
						}
					}
					map_d.put("sqrInfo", sqrName);
					String fmrId = zl.getAjFmrId();
					String fmrName = "";
					if(!fmrId.equals("")){
						String[] fmrIdArr = fmrId.split(",");
						for(Integer i = 0 ; i < fmrIdArr.length ; i++){
							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(fmrIdArr[i]), cpyId);
							if(cList.size() > 0){
								fmrName += cList.get(0).getCusFmrName() + ",";
							}
						}
						if(!fmrName.equals("")){
							fmrName = fmrName.substring(0, fmrName.length() - 1);
						}
					}
					map_d.put("fmrInfo", fmrName);
					String lxrId = zl.getAjLxrId();
					String lxrName = "";
					if(!lxrId.equals("")){
						String[] lxrIdArr = lxrId.split(",");
						for(Integer j = 0 ; j < lxrIdArr.length ; j++){
							List<CustomerLxrInfoTb> clList = cm.listLxrInfoByCusId(Integer.parseInt(lxrIdArr[j]), cpyId);
							if(clList.size() > 0){
								lxrName += clList.get(0).getCusLxrName() + ",";
							}
						}
						if(!lxrName.equals("")){
							lxrName = lxrName.substring(0, lxrName.length() - 1);
						}
					}
					map_d.put("lxrInfo", lxrName);
					map_d.put("ajAddress", zl.getAjSqAddress());
					map_d.put("applyDate", zl.getAjApplyDate());
					map_d.put("ajStatus", zl.getAjStatus());
					map_d.put("ajStopStatus", zl.getAjStopStatus().equals(0) ? "正常":"终止");
					map_d.put("ajStopDate", zl.getAjStopDate());
					map_d.put("ajStopUser", zl.getAjStopUser());
					String soptUserType = zl.getAjStopUserType();
					if(soptUserType.equals("cpyUser")){
						soptUserType = "机构员工";
					}else{
						soptUserType = "发布人员";
					}
					map_d.put("ajStopUserType", soptUserType);
					map_d.put("ajAddDate", zl.getAjAddDate());
					Integer zxUserId = zl.getZxUserId();
					String zxUserName = "暂无";
					CpyUserInfo zxUser = cum.getEntityById(zxUserId);
					if(zxUser != null){
						zxUserName = zxUser.getUserName();
					}
					map_d.put("zxUserName", zxUserName);
					//查看当前最后任务时限有没有过期
					String zlStatusInfo = "";
					if(zl.getAjStopStatus().equals(0)){//案件终止状态下不在对比
						List<ZlajLcInfoTb> lcList = lcm.listLcInfoByAjId(zl.getId());
						if(lcList.size() > 0){
							ZlajLcInfoTb lc = lcList.get(0);
							if(lc.getLcEDate().equals("")){//未完成
								Integer diffDays = CurrentTime.compareDate(CurrentTime.getStringDate(), lc.getLcCpyDate());
								if(diffDays <= 0){
									zlStatusInfo = "outDate";//已过期
								}else if(diffDays.equals(1)){
									zlStatusInfo = "outDate_jj";//:即将过期
								}else if(diffDays > 1){
									zlStatusInfo = "outDate_zc";//正常
								}
							}
						}
					}else{
						zlStatusInfo = "ajStop";//案件已终止
					}
					map_d.put("zlStatusInfo", zlStatusInfo);
					list_d.add(map_d);
				}
				map.put("msg", "success");
				map.put("data", list_d);
				map.put("count", count);
				map.put("code", 0);
			}else{
				map.put("msg", "noInfo");
			}
		}

		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定专利详情(撰写任务领取【只获取基本信息】、专利任务共用)
	 * @description
	 * @author wm
	 * @date 2018-8-30 上午11:38:03
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getZlDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		ZlajEwyqInfoManager yqm = (ZlajEwyqInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_EWYQ_INFO);
		CustomerInfoManager cm = (CustomerInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUSTOMER_INFO);
		JsFiledInfoManager jsm = (JsFiledInfoManager) AppFactory.instance(null).getApp(Constants.WEB_JS_FIELD_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO); 
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajTzsInfoManager tzsm = (ZlajTzsInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_TZS_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		ZlajFeeInfoManager zfm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		String opt = CommonTools.getFinalStr("opt", request);//basic(基本信息),lcfz(流程负责人员),lc(流程),tzs(通知书),fj(附件),fy(费用)-后续有的再加
		Integer lcId = CommonTools.getFinalInteger("lcId", request);//当是lc环节时才传递这个值，也可以不传，其他环节不传
		String msg = "error";
		boolean abilityFlag = false;
		Integer cpyId = 0;
		Map<String,Object> map = new HashMap<String,Object>();
		if(this.getLoginType(request).equals("cpyUser")){
			abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listZl");
			if(abilityFlag){
				CpyUserInfo cpyUser = cum.getEntityById(this.getLoginUserId(request));
				if(cpyUser != null){
					cpyId = cpyUser.getCpyInfoTb().getId();
				}
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					if(opt.equals("basic")){//基本信息
						map = new HashMap<String,Object>();
						msg = "success";
						ZlajMainInfoTb zl = zlList.get(0);
						map.put("ajId", zlId);
						map.put("ajTitle", zl.getAjTitle());
						map.put("ajNo", zl.getAjNoQt());
						map.put("ajNoGf", zl.getAjNoGf());
						map.put("ajAddress", zl.getAjSqAddress());
						map.put("ajType", zl.getAjType());
						String sqrId = zl.getAjSqrId();//可以是公司也可以是个人
						String sqrName = "";
						if(!sqrId.equals("")){
							String[] sqrIdArr = sqrId.split(",");
							for(Integer k = 0 ; k < sqrIdArr.length ; k++){
								List<CustomerInfoTb> cList = cm.listInfoById(cpyId, Integer.parseInt(sqrIdArr[k]));
								if(cList.size() > 0){
									sqrName += cList.get(0).getCusName() + ",";
								}
							}
							if(!sqrName.equals("")){
								sqrName = sqrName.substring(0, sqrName.length() - 1);
							}
						}
						map.put("sqrInfo", sqrName);
						String fmrId = zl.getAjFmrId();
						String fmrName = "";
						if(!fmrId.equals("")){
							String[] fmrIdArr = fmrId.split(",");
							for(Integer i = 0 ; i < fmrIdArr.length ; i++){
								List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(fmrIdArr[i]), cpyId);
								if(cList.size() > 0){
									fmrName += cList.get(0).getCusFmrName() + ",";
								}
							}
							if(!fmrName.equals("")){
								fmrName = fmrName.substring(0, fmrName.length() - 1);
							}
						}
						map.put("fmrInfo", fmrName);
						String lxrId = zl.getAjLxrId();
						String lxrName = "";
						if(!lxrId.equals("")){
							String[] lxrIdArr = lxrId.split(",");
							for(Integer j = 0 ; j < lxrIdArr.length ; j++){
								List<CustomerLxrInfoTb> clList = cm.listLxrInfoByCusId(Integer.parseInt(lxrIdArr[j]), cpyId);
								if(clList.size() > 0){
									lxrName += clList.get(0).getCusLxrName() + ",";
								}
							}
							if(!lxrName.equals("")){
								lxrName = lxrName.substring(0, lxrName.length() - 1);
							}
						}
						map.put("lxrInfo", lxrName);
						map.put("ajYxqDetail", zl.getAjYxqDetail());//格式为申请专利号,申请地区,申请日期:申请专利号,申请地区,申请日期........
						//获取当前专利类型的额外要求
						String yqIdStr = zl.getAjEwyqId();
						String[] yqIdArr = yqIdStr.split(",");
						List<ZlajEwyqInfoTb> yqList = yqm.listInfoByType(zl.getAjType());
						List<Object> list_d = new ArrayList<Object>();
						if(yqList.size() > 0){
							for(Iterator<ZlajEwyqInfoTb> it = yqList.iterator() ; it.hasNext();){
								ZlajEwyqInfoTb yq = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("yqId", yq.getId());
								map_d.put("yaContent", yq.getYqContent());
								if(yqIdStr.equals("")){
									map_d.put("checked", false);
								}else{
									for(Integer i = 0 ; i < yqIdArr.length ; i++){
										if(String.valueOf(yq.getId()).equals(yqIdArr[i])){
											map_d.put("checked", true);
											break;
										}else{
											map_d.put("checked", false);
										}
									}
								}
								list_d.add(map_d);
							}
						}
						map.put("yqInfo", list_d);
						map.put("upFile", zl.getAjUpload());//附件
						map.put("stopStatus", zl.getAjStopStatus());//案件在终止状态下基本信息不能被修改
						map.put("ajStatus", zl.getAjStatus());
						String selJsFieldStr = zl.getAjFieldId();
						String[] selJsFieldArr = selJsFieldStr.split(",");
						List<JsFiledInfoTb> jsList = jsm.listInfoByOpt(cpyId, "");
						List<Object> list_j = new ArrayList<Object>();
						for(Iterator<JsFiledInfoTb> it = jsList.iterator() ; it.hasNext();){
							JsFiledInfoTb js = it.next();
							Map<String,Object> map_j = new HashMap<String,Object>();
							map_j.put("jsId", js.getId());
							map_j.put("jsName", js.getZyName());
							if(selJsFieldStr.equals("")){
								map_j.put("checked", false);
							}else{
								for(Integer i = 0 ; i < selJsFieldArr.length ; i++){
									if(String.valueOf(js.getId()).equals(selJsFieldArr[i])){
										map_j.put("checked", true);
										break;
									}else{
										map_j.put("checked", false);
									}
								}
							}
							list_j.add(map_j);
						}
						map.put("jsFieldInfo", list_j);
					}else if(opt.equals("lcfz")){//流程负责人信息
						map = new HashMap<String,Object>();
						msg = "success";
						ZlajMainInfoTb zl = zlList.get(0);
						map.put("ajId", zlId);
						Integer checkUserId = zl.getCheckUserId();
						Integer zxUserId = zl.getZxUserId();
						Integer tjUserId = zl.getTjUserId();
						Integer tzsUserId = zl.getTzsUserId();
						Integer feeUserId = zl.getFeeUserId();
						Integer bzUserId = zl.getBzUserId();
						Integer bzshUserId = zl.getBzshUserId();
						Integer bhUserId = zl.getBhUserId();
						map.put("ajStatus", zl.getAjStatus());
						map.put("checkUserId", checkUserId);
						map.put("checkUserName", cum.getEntityById(checkUserId).getUserName());
						map.put("zxUserId", zxUserId);
						map.put("zxUserName", cum.getEntityById(zxUserId).getUserName());
						map.put("tjUserId", tjUserId);
						map.put("tjUserName", cum.getEntityById(tjUserId).getUserName());
						map.put("tzsUserId", tzsUserId);
						map.put("tzsUserName", cum.getEntityById(tzsUserId).getUserName());
						map.put("feeUserId", feeUserId);
						map.put("feeUserName", cum.getEntityById(feeUserId).getUserName());
						map.put("bzUserId", bzUserId);
						map.put("bzUserName", cum.getEntityById(bzUserId).getUserName());
						map.put("bzshUserId", bzshUserId);
						map.put("bzshUserName", cum.getEntityById(bzshUserId).getUserName());
						map.put("bhUserId", bhUserId);
						map.put("bhUserName", cum.getEntityById(bhUserId).getUserName());
						//获取当前代理机构所有人员
						List<CpyUserInfo> uList = cum.listValidInfoByOpt(cpyId, 0);
						List<Object> list_u = new ArrayList<Object>();
						for(Iterator<CpyUserInfo> it = uList.iterator() ; it.hasNext();){
							CpyUserInfo user = it.next();
							Map<String,Object> map_d = new HashMap<String,Object>();
							map_d.put("userId", user.getId());
							map_d.put("userName", user.getUserName());
							String scFiledIdStr = user.getUserScFiledId();
							String jsName = "";
							if(!scFiledIdStr.equals("")){
								List<JsFiledInfoTb> jsList = jsm.listInfoByOpt(cpyId, scFiledIdStr);
								
								for(Iterator<JsFiledInfoTb> it_j = jsList.iterator() ; it_j.hasNext();){
									JsFiledInfoTb js = it_j.next();
									jsName += js.getZyName() + ",";
								}
								if(!jsName.equals("")){
									jsName = jsName.substring(0, jsName.length() - 1);
								}
							}
							map_d.put("jsName", jsName);
							map_d.put("zxNum", user.getUserZxNum());
							Integer userExper = user.getUserExper();
							String experCon = "";
							if(userExper >= 0 && userExper <= 100){
								experCon = "铜牌";
							}else if(userExper >= 101 && userExper <= 1000){
								experCon = "银牌";
							}else if(userExper >= 1001){
								experCon = "金牌";
							}
							map_d.put("exper", experCon);
							list_u.add(map_d);
						}
						map.put("allUserInfo", list_u);
					}else if(opt.equals("lc")){//流程
						map = new HashMap<String,Object>();
						List<ZlajLcInfoTb> lcList = lcm.listLcInfoByAjId(zlId);
						List<Object> list_lc = new ArrayList<Object>();
						List<Object> list_mx = new ArrayList<Object>();
						if(lcList.size() > 0){
							msg = "success";
							for(Iterator<ZlajLcInfoTb> it = lcList.iterator() ; it.hasNext();){
								ZlajLcInfoTb lc = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("lcId", lc.getId());
								map_d.put("lcName", lc.getLcMz());
								map_d.put("cpyDate", lc.getLcCpyDate());
								map_d.put("sDate", lc.getLcSDate());
								map_d.put("comDate", lc.getLcEDate());
								map_d.put("gfDate", lc.getLcGfDate());
								list_lc.add(map_d);
							}
							map.put("lcInfo", list_lc);
							//默认获取最后一个流程的流程明细
							Integer lastLcId = lcList.get(0).getId();
							if(lcId > 0){
								lastLcId = lcId;//当有指定的流程时
							}
							List<ZlajLcMxInfoTb> mxList = mxm.listDetailInfoByLcId(lastLcId);
							if(mxList.size() > 0){
								for(Iterator<ZlajLcMxInfoTb> it = mxList.iterator() ; it.hasNext();){
									ZlajLcMxInfoTb mx = it.next();
									Map<String,Object> map_d = new HashMap<String,Object>();
									map_d.put("mxId", mx.getId());
									map_d.put("mxName", mx.getLcMxName());
									Integer lcFzUserId = mx.getLcFzUserId();
									CpyUserInfo user = cum.getEntityById(lcFzUserId);
									if(user != null){
										map_d.put("fzUserName", user.getUserName());
									}else{
										map_d.put("fzUserName", "");
									}
									map_d.put("mxSDate", mx.getLcMxSDate());
									map_d.put("mxEDate", mx.getLcMxEDate());
									String upFile = mx.getLcMxUpFile();
									String upFileName = "";//文件名称
									String upFileSize = "";//文件大小
									if(!upFile.equals("")){
										String[] upFileArr = upFile.split(",");
										String upUserName = cum.getEntityById(mx.getLcMxUpUserId()).getUserName();//上传人
										String upDate = mx.getLcMxUpDate();//上传日期
										List<Object> list_mx_1 = new ArrayList<Object>();
										for(Integer i = 0 ; i < upFileArr.length ; i++){
											upFileName = upFileArr[i].substring(upFileArr[i].lastIndexOf("\\")+1,upFileArr[i].length());
											upFile += upFileName + ",";
											upFileSize = FileOpration.getFileSize(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" + upFileArr[i]);
											Map<String,String> map_mx = new HashMap<String,String>();
											map_d.put("upFileName", upFileName);
											map_mx.put("upUserName", upUserName);
											map_mx.put("upDate", upDate);
											map_mx.put("upFileSize", upFileSize);
											map_mx.put("downFilePath", upFileArr[i].replaceAll("\\\\", "\\\\\\\\"));
											list_mx_1.add(map_mx);
										}
										map_d.put("upFileDetail", list_mx_1);//附件明细（当上传文件存在时出现）
										upFile = upFile.substring(0, upFile.length() - 1);
									}
									map_d.put("upFile", upFile);
									map_d.put("mxRemark", mx.getLcMxRemark());
									list_mx.add(map_d);
								}
							}
							map.put("mxInfo", list_mx);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("tzs")){//通知书
						map = new HashMap<String,Object>();
						List<ZlajTzsInfoTb> tzsList = tzsm.listInfoByZlId(zlId);
						if(tzsList.size() > 0){
							msg = "success";
							List<Object> list_tzs = new ArrayList<Object>();
							for(Iterator<ZlajTzsInfoTb> it = tzsList.iterator() ; it.hasNext();){
								ZlajTzsInfoTb tzs = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								String tzsName = tzs.getTzsName();
								map_d.put("tzsId", tzs.getId());
								map_d.put("tzsName", tzsName.substring(tzsName.lastIndexOf("\\")+1,tzsName.length()));
								map_d.put("fwrDate", tzs.getTzsFwr());
								map_d.put("gfrDate", tzs.getTzsGfr());
								map_d.put("downFilePath", tzsName.replaceAll("\\\\", "\\\\\\\\"));
								list_tzs.add(map_d);
							}
							map.put("tzsInfo", list_tzs);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("fj")){//附件
						map = new HashMap<String,Object>();
						List<ZlajFjInfoTb> fjList = fjm.listInfoByAjId(zlId);
						if(fjList.size() > 0){
							msg = "success";
							List<Object> list_fj = new ArrayList<Object>();
							for(Iterator<ZlajFjInfoTb> it = fjList.iterator() ; it.hasNext();){
								ZlajFjInfoTb fj = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("fjId", fj.getId());
								map_d.put("fjName", fj.getFjName().substring(fj.getFjName().lastIndexOf("\\") + 1));
								map_d.put("fjType", fj.getFjType());
								map_d.put("fjVersion", fj.getFjVersion());
								map_d.put("fjGs", fj.getFjGs());
								map_d.put("fjDx", fj.getFjDx());
								map_d.put("upUserName", fj.getCpyUserInfo().getUserName());
								map_d.put("upDate", fj.getFjUpDate());
								map_d.put("downFilePath", fj.getFjUpDate().replaceAll("\\\\", "\\\\\\\\"));
								list_fj.add(map_d);
							}
							map.put("fjInfo", list_fj);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("fy")){//费用
						map = new HashMap<String,Object>();
						msg = "success";
						List<ZlajFeeInfoTb> zfList_gf = zfm.listInfoByOpt(zlId, "gf");//官费
						List<ZlajFeeInfoTb> zfList_dlf = zfm.listInfoByOpt(zlId, "dlf");//代理费
						List<ZlajFeeInfoTb> zfList_nf = zfm.listInfoByOpt(zlId, "nf");//年费
						List<ZlajFeeInfoTb> zfList_jlj = zfm.listInfoByOpt(zlId, "jlj");//奖励金
						List<Object> list_gf = new ArrayList<Object>();
						List<Object> list_dlf = new ArrayList<Object>();
						List<Object> list_nf = new ArrayList<Object>();
						List<Object> list_jlj = new ArrayList<Object>();
						Double gfTotal = 0.00,dlfTotal = 0.00,nfTotal = 0.00,jljTotal = 0.00;
						if(zfList_gf.size() > 0){
							for(Iterator<ZlajFeeInfoTb> it = zfList_gf.iterator() ; it.hasNext();){
								ZlajFeeInfoTb gf = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("feeName", gf.getFeeTypeInfoTb().getFeeName());
								map_d.put("applyUserName", gf.getCpyUserInfo().getUserName());
								map_d.put("feePrice", gf.getFeePrice());
								map_d.put("jnDate", gf.getFeeJnDate());
								map_d.put("jnStatus", gf.getFeeStatus().equals(0) ? "未交" : "已交");
								map_d.put("djStatus", gf.getDjStatus().equals(0) ? "自交" : "代交");
								map_d.put("gfDate", gf.getFeeEndDateGf());
								map_d.put("cpyDate", gf.getFeeEndDateJj());
								map_d.put("feeZd", gf.getFeeUpZd());
								map_d.put("feeRemark", gf.getFeeRemark());
								list_gf.add(map_d);
								gfTotal += gf.getFeePrice();
							}
							if(gfTotal > 0){
								gfTotal = Convert.convertInputNumber_2(gfTotal);
							}
							map.put("gfResult", "success");
						}else{
							map.put("gfResult", "noInfo");
						}
						map.put("gfInfo", list_gf);
						map.put("gfTotal", gfTotal);
						
						if(zfList_dlf.size() > 0){
							for(Iterator<ZlajFeeInfoTb> it = zfList_dlf.iterator() ; it.hasNext();){
								ZlajFeeInfoTb gf = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("feeName", gf.getFeeTypeInfoTb().getFeeName());
								map_d.put("applyUserName", gf.getCpyUserInfo().getUserName());
								map_d.put("feePrice", gf.getFeePrice());
								map_d.put("jnDate", gf.getFeeJnDate());
								map_d.put("jnStatus", gf.getFeeStatus().equals(0) ? "未交" : "已交");
								map_d.put("djStatus", gf.getDjStatus().equals(0) ? "自交" : "代交");
								map_d.put("gfDate", gf.getFeeEndDateGf());
								map_d.put("cpyDate", gf.getFeeEndDateJj());
								map_d.put("feeZd", gf.getFeeUpZd());
								map_d.put("feeRemark", gf.getFeeRemark());
								list_dlf.add(map_d);
								dlfTotal += gf.getFeePrice();
							}
							if(dlfTotal > 0){
								dlfTotal = Convert.convertInputNumber_2(dlfTotal);
							}
							map.put("dlfResult", "success");
						}else{
							map.put("dlfResult", "noInfo");
						}
						
						map.put("dlfInfo", list_dlf);
						map.put("dlfTotal", dlfTotal);
						
						if(zfList_nf.size() > 0){
							for(Iterator<ZlajFeeInfoTb> it = zfList_nf.iterator() ; it.hasNext();){
								ZlajFeeInfoTb gf = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("feeName", gf.getFeeTypeInfoTb().getFeeName());
								map_d.put("applyUserName", gf.getCpyUserInfo().getUserName());
								map_d.put("feePrice", gf.getFeePrice());
								map_d.put("jnDate", gf.getFeeJnDate());
								map_d.put("jnStatus", gf.getFeeStatus().equals(0) ? "未交" : "已交");
								map_d.put("djStatus", gf.getDjStatus().equals(0) ? "自交" : "代交");
								map_d.put("gfDate", gf.getFeeEndDateGf());
								map_d.put("cpyDate", gf.getFeeEndDateJj());
								map_d.put("feeZd", gf.getFeeUpZd());
								map_d.put("feeRemark", gf.getFeeRemark());
								list_nf.add(map_d);
								nfTotal += gf.getFeePrice();;
							}
							if(nfTotal > 0){
								nfTotal = Convert.convertInputNumber_2(nfTotal);
							}
							map.put("nfResult", "success");
						}else{
							map.put("nfResult", "noInfo");
						}
						
						map.put("nfInfo", list_nf);
						map.put("nfTotal", nfTotal);

						if(zfList_jlj.size() > 0){
							for(Iterator<ZlajFeeInfoTb> it = zfList_jlj.iterator() ; it.hasNext();){
								ZlajFeeInfoTb gf = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("feeName", gf.getFeeTypeInfoTb().getFeeName());
								map_d.put("applyUserName", gf.getCpyUserInfo().getUserName());
								map_d.put("feePrice", gf.getFeePrice());
								map_d.put("jnDate", "");
								map_d.put("jnStatus", "");
								map_d.put("djStatus", "");
								map_d.put("gfDate", gf.getFeeEndDateGf());
								map_d.put("cpyDate", "");
								map_d.put("feeZd", "");
								map_d.put("feeRemark", gf.getFeeRemark());
								list_jlj.add(map_d);
								jljTotal += gf.getFeePrice();;
							}
							if(jljTotal > 0){
								jljTotal = Convert.convertInputNumber_2(jljTotal);
							}
							map.put("jljResult", "success");
						}else{
							map.put("jljResult", "noInfo");
						}
						
						map.put("jljInfo", list_jlj);
						map.put("jljTotal", jljTotal);
					}
					
				}
			}else{
				msg = "noAbility";
			}
		}else{
			msg = "noAbility";
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前用户有多少操作类型（zx-撰写,sc-审查,dgtj-定稿提交,tzs-通知书,fycj-费用催缴,bz-补正,bzsh-补正审核,bh-驳回）
	 * 为权利移交时使用
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-8 下午10:03:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrOperatorType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		boolean abilityFlag = false;
		if(this.getLoginType(request).equals("cpyUser")){//只针对代理机构下员工使用
			Integer currLoginUserId = this.getLoginUserId(request);
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "upZl");
			}
			if(abilityFlag){//只针对具有修改权限的员工和管理员使用
				CpyUserInfo user = cum.getEntityById(currLoginUserId);
				if(user != null){
					Integer cpyId = user.getCpyInfoTb().getId();
					Integer zlId = CommonTools.getFinalInteger("zlId", request);
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						if(zl.getAjStopStatus().equals(0)){//只有案件在正常状态下才能进行移交
							Map<String,String> map_d = new HashMap<String,String>();
							Integer ajStatus = Integer.parseInt(zl.getAjStatus());
							List<Object> list_d = new ArrayList<Object>();
							Integer yyNum = 0;
							//案件没完成提交之前可以移交撰写任务
							if(currLoginUserId.equals(zl.getZxUserId()) && ajStatus < 7){
								map_d.put("typeName", "zx");
								map_d.put("typeNameChi", "撰写");
								list_d.add(map_d);
								yyNum += 1;
							}
							//案件没完成提交之前可以移交技术审核
							if(currLoginUserId.equals(zl.getCheckUserId()) && ajStatus < 7){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "sc");
								map_d.put("typeNameChi", "技术审核");
								list_d.add(map_d);
								yyNum += 1;
							}
							//案件没完成提交之前可以移交定稿审核
							if(currLoginUserId.equals(zl.getTjUserId())  && ajStatus < 7){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "dgtj");
								map_d.put("typeNameChi", "定稿提交");
								list_d.add(map_d);
								yyNum += 1;
							}
							//之后流程无限制
							if(currLoginUserId.equals(zl.getTzsUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "tzs");
								map_d.put("typeNameChi", "导入通知书");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getFeeUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "fycj");
								map_d.put("typeNameChi", "费用催缴");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBzUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bz");
								map_d.put("typeNameChi", "案件补正");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBzshUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bzsh");
								map_d.put("typeNameChi", "补正审核");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBhUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bh");
								map_d.put("typeNameChi", "驳回");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(yyNum.equals(0)){
								msg = "noInfo";
							}else{
								msg = "success";
								map.put("yyType", list_d);
							}
						}else{
							msg = "ajStop";//案件在终止状态下不能进行移交操作
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 流程移交操作--针对代理机构员工开放
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-9 下午09:15:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setLcYj(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		String msg = "error";
		boolean flag = false;
		Integer zxUserId = -1;
		Integer checkUserId = -1;
		Integer tjUserId = -1;
		Integer tzsUserId = -1;
		Integer feeUserId = -1;
		Integer bzUserId = -1;
		Integer bzshUserId = -1;
		Integer bhUserId = -1;
		String lcName = "";
		String currDate = CurrentTime.getStringDate();
		if(zlId > 0){
			if(this.getLoginType(request).equals("cpyUser")){
				Integer currLoginUserId = this.getLoginUserId(request);
				if(this.getLoginRoleName(request).equals("管理员")){
					abilityFlag = true;
				}else{
					abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "upZl");
				}
				if(abilityFlag){
					Integer userId_yj = CommonTools.getFinalInteger("userId_yj", request);//准备接受移交任务的用户
					//移交类型zx-撰写,sc-技术审核,dgtj-定稿提交,tzs-通知书,fycj-费用催缴,bz-补正,bzsh-补正审核,bh-驳回
					String yjType = CommonTools.getFinalStr("yjType", request);//移交类型
					String[] yjTypeArr = {"zx","sc","dgtj","tzs","fycj","bz","bzsh","bh"};
					if(userId_yj > 0 && !yjType.equals("")){
						for(Integer i = 0 ; i < yjTypeArr.length ; i++){
							if(yjType.equals(yjTypeArr[i])){
								flag = true;
								break;
							}
						}
						if(flag){
							CpyUserInfo user = cum.getEntityById(currLoginUserId);
							if(user != null){
								List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
								if(zlList.size() > 0){
									ZlajMainInfoTb zl = zlList.get(0);
									if(zl.getAjStopStatus().equals(0)){//只有案件在正常状态下才能进行移交
										CpyUserInfo user_yj = cum.getEntityById(userId_yj);
										String ajNoQt = zl.getAjNoQt();//平台定义的案件号
										if(user_yj != null){
											Integer ajStatus = Integer.parseInt(zl.getAjStatus());
											if(yjType.equals("zx") && currLoginUserId.equals(zl.getZxUserId())){
												if(ajStatus < 7){//案件没完成提交之前可以移交
													lcName = "撰写";
													zxUserId = userId_yj;
												}else{
													msg = "noYj_zx";
													flag = false;
												}
											}else if(yjType.equals("sc") && currLoginUserId.equals(zl.getCheckUserId())){
												if(ajStatus < 7){//案件没完成提交之前可以移交
													lcName = "技术审核";
													checkUserId = userId_yj;
												}else{
													msg = "noYj_sc";
													flag = false;
												}
											}else if(yjType.equals("dgtj") && currLoginUserId.equals(zl.getZxUserId())){
												if(ajStatus < 7){
													lcName = "定稿提交";//案件没完成提交之前可以移交
													tjUserId = userId_yj;
												}else{
													msg = "noYj_tj";
													flag = false;
												}
												
											}else if(yjType.equals("tzs") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "导入通知书";//无限制
												tzsUserId = userId_yj;
											}else if(yjType.equals("fycj") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "费用催缴";//无限制
												feeUserId = userId_yj;
											}else if(yjType.equals("bz") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "案件补正";//无限制
												bzUserId = userId_yj;
											}else if(yjType.equals("bzsh") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "补正审核";//无限制
												bzshUserId = userId_yj;
											}else if(yjType.equals("bh") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "驳回";//无限制
												bhUserId = userId_yj;
											}
											if(flag){
												//人员移交统一归纳到2.0（人员分配中来）
												List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz("人员分配");
												if(lcList.size() > 0){
													Integer lcId = lcList.get(0).getId();
													double currLcNo = 2.0;

													mxm.addLcMx(lcId, userId_yj, lcName+"任务领取", currLcNo, currDate, currDate,"", 0, "", "", user.getUserName()+"任务移交");
													//给被移交人发送邮件提醒
													mm.addMail("taskM", Constants.SYSTEM_EMAIL_ACCOUNT, userId_yj, "cpyUser",  ajNoQt+ " "+lcName+"任务移交", user.getUserName()+"将["+ajNoQt+"]"+lcName+"任务移交给你");
													zlm.updateOperatorUserInfoByZlId(zlId, checkUserId, zxUserId, tjUserId, tzsUserId, feeUserId, bzUserId, bzshUserId, bhUserId);
													msg = "success";
												}
											}
										}
									}
								}
							}
							
						}
					}
				}else{
					msg = "noAbility";
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 修改专利操作人员(针对管理员和具有增加增加专利权限的人使用)
	 * @description
	 * @author wm
	 * @date 2018-9-6 上午08:20:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateOperatorUserInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String currDate = CurrentTime.getStringDate();
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		Integer zxUserId = CommonTools.getFinalInteger("zxUserId", request);
		Integer tjUserId = -1;
		Integer tzsUserId = -1;
		Integer feeUserId = -1;
		Integer bzUserId = -1;
		Integer bzshUserId = -1;
		Integer bhUserId = -1;
		Integer checkUserId = -1;
		String msg = "error";
		if(this.getLoginType(request).equals("cpyUser")){
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				//获取当前用户是否拥有增加的权限--将分配专利操作人员的权限归类为增加权限
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addZl");
			}
			if(abilityFlag){
				Integer cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				//可以修改任意操作人员(强制修改)
				tjUserId = CommonTools.getFinalInteger("tjUserId", request);
				tzsUserId = CommonTools.getFinalInteger("tzsUserId", request);
				feeUserId = CommonTools.getFinalInteger("feeUserId", request);
				bzUserId = CommonTools.getFinalInteger("bzUserId", request);
				bzshUserId = CommonTools.getFinalInteger("bzshUserId", request);
				bhUserId = CommonTools.getFinalInteger("bhUserId", request);
				checkUserId = CommonTools.getFinalInteger("checkUserId", request);
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					if(zl.getAjStopStatus().equals(0)){//案件正常状态下
						boolean flag = zlm.updateOperatorUserInfoByZlId(zlId, checkUserId, zxUserId, tjUserId, 
								tzsUserId, feeUserId, bzUserId, bzshUserId, bhUserId);
						if(flag){
							Integer ajStatus = Integer.parseInt(zl.getAjStatus());
							Integer checkUserId_db = zl.getCheckUserId();
							Integer zxUserId_db = zl.getZxUserId();
							Integer tjUserId_db = zl.getTjUserId();
							Integer tzsUserId_db = zl.getTzsUserId();
							Integer feeUserId_db = zl.getFeeUserId();
							Integer bzUserId_db = zl.getBzUserId();
							Integer bzshUserId_db = zl.getBzUserId();
							Integer bhUserId_db = zl.getBhUserId();
							//人员移交统一归纳到2.0（人员分配中来）
							List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz("人员分配");
							if(lcList.size() > 0){
								Integer lcId = lcList.get(0).getId();
								double currLcNo = 2.0;
								//案件
								if(ajStatus < 7){
									if(!zxUserId.equals(zxUserId_db)){
										if(zxUserId_db.equals(0)){//没人领取，修改
											List<ZlajLcMxInfoTb> mxList = mxm.listFirstInfoByLcId(lcId);
											if(mxList.size() > 0){
												mxm.updateEdateById(mxList.get(0).getId(), zxUserId, -1, "", "", "", currDate, "操作人员主动分配");
											}
										}else{//有人领取，增加
											mxm.addLcMx(lcId, zxUserId, "撰写人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
										}
									}
								}
								if(ajStatus < 7){
									if(!checkUserId.equals(checkUserId_db)){
										mxm.addLcMx(lcId, checkUserId, "审核人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
									}
								}
								if(ajStatus < 7){
									if(!tjUserId.equals(tjUserId_db)){
										mxm.addLcMx(lcId, tjUserId, "提交人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
									}
								}
								if(!tzsUserId.equals(tzsUserId_db)){
									mxm.addLcMx(lcId, tzsUserId, "通知书人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
								}
								if(!feeUserId.equals(feeUserId_db)){
									mxm.addLcMx(lcId, feeUserId, "费用催缴人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
								}
								if(!bzUserId.equals(bzUserId_db)){
									mxm.addLcMx(lcId, bzUserId, "补正人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
								}
								if(!bzshUserId.equals(bzshUserId_db)){
									mxm.addLcMx(lcId, bzshUserId, "补正审核人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
								}
								if(!bhUserId.equals(bhUserId_db)){
									mxm.addLcMx(lcId, bhUserId, "驳回人员修改", currLcNo, currDate, currDate, "", 0, "", "", "操作人员修改");
								}
								msg = "success";
							}
						}
					}else{
						msg = "stopInfo";//案件在终止状态下不能进行修改
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		
		map.put("success", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前的案件号（增加时前台显示--参考，解决可能出现几个人在同时增加就会出现问题）
	 * 用在专利类型的选中动作时间上，同时也用在领取的专利任务选中上
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-26 下午10:10:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrAjNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Integer cpyId = 0;
		String currNextAjNo = "";
		String msg = "error";
		String nextNumStr = "";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
			String currYear = CurrentTime.getYear();
			String ajType = CommonTools.getFinalStr("ajType", request);
			if(cpyId > 0 && !ajType.equals("")){
				List<ZlajMainInfoTb> zlList = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
				String varCon = "";
				if(ajType.equals("fm")){
					varCon = "01";
				}else if(ajType.equals("syxx")){
					varCon = "02";
				}else if(ajType.equals("wg")){
					varCon = "03";
				}
				msg = "success";
				if(zlList.size() > 0){
					String ajNo = zlList.get(0).getAjNo();//20180100011--201802
					String str1 = ajNo.substring(0,6);
					String str2 = ajNo.substring(6, 10);
					Integer nextNum = Integer.parseInt(str2) + 1;
					if(nextNum > 1000){
						nextNumStr = nextNum + "";
					}else if(nextNum > 100){
						nextNumStr = "0" + nextNum;
					}else if(nextNum > 10){
						nextNumStr = "00" + nextNum;
					}else if(nextNum > 1){
						nextNumStr = "000" + nextNum;
					}
					currNextAjNo = str1 + nextNumStr + "." + cpyId;
				}else{
					currNextAjNo = currYear + varCon + "0001" + "." + cpyId;
				}
				map.put("currNextAjNo", currNextAjNo);
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加专利
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-26 下午09:14:12
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addZlData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		Integer cpyId = 0;
		String nextNumStr = "";
		String ajNoQt = "";
		String ajNo = "";
		String msg = "error";
		Integer currLoginUserId = this.getLoginUserId(request);
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			boolean abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addZl");
			if(abilityFlag){
				cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				//获取当前的案例号--实时
				String currYear = CurrentTime.getYear();
				String ajType = CommonTools.getFinalStr("ajType", request);
				Integer pubZlId = CommonTools.getFinalInteger("pubZlId", request);//发布专利的编号
				//当案件类型是发明+新型时，就不会有发布专利编号
				if(ajType.equals("fmxx")){
					if(pubZlId > 0){
						msg = "typeDiff";//专利类型不一致
					}else{
						msg = "success";
					}
				}else{
					if(pubZlId > 0){
						//判断传递的类型和领取的专利任务类型必须一致
						List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt_1(cpyId, pubZlId);
						if(pubList.size() > 0){
							if(pubList.get(0).getZlType().equals(ajType)){
								msg = "success";
							}else{
								msg = "typeDiff";//专利类型不一致
							}
						}
					}
				}
				
				if(msg.equals("success")){
					String varCon = "";
					if(!ajType.equals("")){
						if(ajType.equals("fmxx")){
							ajType = "fm,syxx";
						}
						String[] ajTypeArr = ajType.split(",");
						for(Integer i = 0 ; i < ajTypeArr.length ; i++){
							ajType = ajTypeArr[i];
							if(cpyId > 0 && !ajType.equals("")){
								if(ajType.equals("fm")){
									varCon = "01";
								}else if(ajType.equals("syxx")){
									varCon = "02";
								}else if(ajType.equals("wg")){
									varCon = "03";
								}
								List<ZlajMainInfoTb> zlList = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
								if(zlList.size() > 0){
									String ajNo_prev = zlList.get(0).getAjNo();//20180100011--201802
									String str1 = ajNo_prev.substring(0,6);
									String str2 = ajNo_prev.substring(6, 10);
									Integer nextNum = Integer.parseInt(str2) + 1;
									if(nextNum > 1000){
										nextNumStr = nextNum + "";
									}else if(nextNum > 100){
										nextNumStr = "0" + nextNum;
									}else if(nextNum > 10){
										nextNumStr = "00" + nextNum;
									}else if(nextNum > 1){
										nextNumStr = "000" + nextNum;
									}
									ajNoQt = str1 + nextNumStr + "." + cpyId;
									ajNo =  str1 + nextNumStr + cpyId;
								}else{
									ajNoQt = currYear + varCon + "0001" + "." + cpyId;
									ajNo = currYear + varCon + "0001" + cpyId;
								}
								
								String zlNoGf = "";
								String ajTitle = Transcode.unescape_new("ajTitle", request);
								String ajFieldId = CommonTools.getFinalStr("ajFieldId", request);
								String ajSqrId  = CommonTools.getFinalStr("ajSqrId", request);
								String ajFmrId  = CommonTools.getFinalStr("ajFmrId", request);
								String ajLxrId = CommonTools.getFinalStr("ajLxrId", request);
								String ajSqAddress = Transcode.unescape_new("ajSqAddress", request);
								String yxqDetail = CommonTools.getFinalStr("yxqDetail", request);
								String ajUpload = CommonTools.getFinalStr("ajUpload", request);
//								String lcMxUpSize = CommonTools.getFinalStr("lcMxUpSize", request);
								String ajRemark =  Transcode.unescape_new("ajRemark", request);
								String ajEwyqId = CommonTools.getFinalStr("ajEwyqId", request);
								Integer zxUserId = CommonTools.getFinalInteger("zxUserId", request);//可以为空
								Integer tjUserId = CommonTools.getFinalInteger("tjUserId", request);//不能为空
								Integer tzsUserId = CommonTools.getFinalInteger("tzsUserId", request);//不能为空
								Integer feeUserId = CommonTools.getFinalInteger("feeUserId", request);//不能为空
								Integer bzUserId = CommonTools.getFinalInteger("bzUserId", request);//不能为空
								Integer bzshUserId = CommonTools.getFinalInteger("bzshUserId", request);//不能为空
								Integer bhUserId = CommonTools.getFinalInteger("bhUserId", request);//不能为空
								String cpyDate = CommonTools.getFinalStr("cpyDate", request);//内部期限(前期资料提交完成时间)
								String sDate = CurrentTime.getStringDate();//开始日期
								
								String ajApplyDate = "";
								Integer checkUserId = CommonTools.getFinalInteger("checkUserId", request);//审查人员编号
								Integer zlId = zlm.addZL(ajNo, ajNoQt, zlNoGf, ajTitle, ajType, ajFieldId, ajSqrId, ajFmrId, ajLxrId, ajSqAddress, 
										yxqDetail, ajUpload, ajRemark, ajEwyqId, ajApplyDate, "3.0", pubZlId,cpyId,checkUserId,zxUserId,
										tjUserId,tzsUserId,feeUserId,bzUserId,bzshUserId,bhUserId,currLoginUserId);
								if(zlId > 0){
									//增加流程
									Integer lcId_1 = lcm.addLcInfo(zlId, "专利案件录入", "专利案件录入", sDate, cpyDate, sDate, "");
									if(lcId_1 > 0){
										Integer lcMxId = mxm.addLcMx(lcId_1, currLoginUserId, "专利案件录入", 1.0, sDate, sDate, ajUpload, pubZlId, sDate, "", ajRemark);
										//移动上传文件
										if(!ajUpload.equals("")){
											//将u_currLoginUserId里面的文件复制到cpyUser/zlId/dg下面
											String[] upFileArr = ajUpload.split(",");
											String newPath =  WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\cpyUser\\" + zlId + "\\dg";
											File file = new File(newPath);
											if(!file.exists()){
								    			file.mkdirs();
								    		}
											String newPath_db = "";
											String path_pre =  "cpyUser\\" + zlId + "\\dg\\";
											for(Integer j = 0 ; j < upFileArr.length ; j++){
												String oldPath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" +upFileArr[j];
												String fileName = upFileArr[j].substring((upFileArr[j].lastIndexOf("\\") + 1));
												String newPathFinal = newPath + "\\" + fileName;
												newPath_db +=  path_pre + fileName + ",";
												FileOpration.copyFile(oldPath, newPathFinal);
												
												//增加附件记录
												Integer lastIndex = fileName.lastIndexOf("_");
												String lastFjName = fileName.substring(lastIndex+1, fileName.length());
												Integer lastIndex_1 = lastFjName.indexOf(".");
												String fjVersion = lastFjName.substring(0, lastIndex_1);
												String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
												fjm.addFj(zlId, path_pre + fileName, fjVersion, "技术底稿文件", fjGs, FileOpration.getFileSize(newPathFinal), currLoginUserId, sDate);
											}
											//修改上传附件的真实路径
											if(!newPath_db.equals("")){
												newPath_db = newPath_db.substring(0, newPath_db.length() - 1);
												//修改专利底稿位置
												zlm.updateZlUpFile_dg(zlId, newPath_db);
												mxm.updateEdateById(lcMxId, -1, -1, newPath_db, "", "", "", "");
											}
										}
										
										//增加专利撰写流程
										Integer lcId_2 = 0;
										if(zxUserId > 0){
											lcId_2 = lcm.addLcInfo(zlId, "人员分配", "人员分配", sDate, sDate, sDate, sDate);
											mxm.addLcMx(lcId_2, zxUserId, "撰写任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
											
											Integer lcId_3 = lcm.addLcInfo(zlId, "新申请撰稿", "新申请撰稿", sDate, cpyDate, "", "");
											mxm.addLcMx(lcId_3, zxUserId, "新申请撰稿", 3.0, sDate, "", "", 0, "", "", "");
											//给当前撰写人发送邮件
											mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zxUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您于["+cpyDate+"]之前完成专利撰写工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										}else{
											//如果没有指派撰写人，需要撰写人认领抢购
											//1：先将案件状态修改成2.0
											zlm.updateZlStatusById(zlId, "2.0");
											lcId_2 = lcm.addLcInfo(zlId, "人员分配", "人员分配", sDate, CurrentTime.getFinalDate(sDate,1), "", "");
											mxm.addLcMx(lcId_2, 0, "等待撰写人员领取", 2.0, sDate, "", "", 0, "", "", "");
										}
										mxm.addLcMx(lcId_2, checkUserId, "技术审核任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, tjUserId, "定稿提交任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, tzsUserId, "通知书任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, feeUserId, "费用催缴任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, bzUserId, "补正任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, bzshUserId, "补正审核任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mxm.addLcMx(lcId_2, bhUserId, "驳回任务分配", 2.0, sDate, sDate, "", 0, "", "", "");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, checkUserId, "cpyUser", "新任务通知：专利技术审核", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利审核工作<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, tjUserId, "cpyUser", "新任务通知：专利提交", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利提交工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, tzsUserId, "cpyUser", "新任务通知：通知书导入", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成通知书导入工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, feeUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成费用催缴工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bzUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利补正工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bzshUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利补正审核工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bhUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利驳回任务工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
									}
									msg = "success";
								}
							}
						}
						//删除临时上传的文件夹里面的所有文件
						FileOpration.deleteAllFile(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\cpyUser\\u_" + currLoginUserId);
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定专利的终止状态信息
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-27 下午09:49:04
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateStopStatusInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String stopUser = "";
		String stopDate = "";
		String stopUserType = "";
		Integer stopStatus = 0;
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addZl");//只有具有创建专利权限和管理员才有资格修改专利状态
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				if(zlId > 0){
					CpyUserInfo user = cum.getEntityById(this.getLoginUserId(request));
					if(user != null){
						stopStatus = CommonTools.getFinalInteger("stopStatus", request);
						if(stopStatus.equals(1)){
							stopUser = user.getUserName();
							stopDate = CurrentTime.getCurrentTime();
							stopUserType = this.getLoginType(request);
						}
						boolean flag = zlm.updateStopStatusById(zlId, stopStatus, stopDate, stopUser, stopUserType);
						if(flag){
							msg = "success";
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改专利基本信息(案件定稿提交前才能修改案件基本信息)
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-13 下午09:44:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateZlBasicInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		Integer currUserId = this.getLoginUserId(request);
		String ajNoQt = "",ajNo = "";
		Integer pubId = CommonTools.getFinalInteger("pubZlId", request);
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addZl");//只有增加权限的员工才能修改专利基本信息
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					if(zl.getAjStopStatus().equals(0)){//案件正常状态下
						
					}
					String ajTitle = Transcode.unescape_new("ajTitle", request);
					String ajType = CommonTools.getFinalStr("ajType", request);
					//在专利定稿提交前且专利状态正常下可以进行专利基本信息修改
					if(Integer.parseInt(zl.getAjStatus()) < 6 && zl.getAjStopStatus().equals(0)){
						String varCon = "",nextNumStr = "";
						String currYear = CurrentTime.getYear();
						Integer pubId_base = zl.getPubZlId();//原先关联的专利任务
						if(!zl.getAjType().equals(ajType)){//类型变化，案件编号就需要变
							if(pubId > 0){//传递的有专利任务编号
								List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
								if(pubList.size() > 0){
									PubZlInfoTb pub = pubList.get(0);
									//首先判断原来有没有关联专利任务
									if(pubId_base > 0){//原来存在专利任务编号
										if(!pubId_base.equals(pubId)){//专利任务关联发生编号
											if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
												//这时需要修改专利任务中的案件编号
												//1:归0原来的专利任务中的案件编号
												pzm.updateAjIdById(pubId_base, 0);
												//2:修改新的专利任务中的案件编号
												pzm.updateAjIdById(pubId, zlId);
												msg = "success";
											}else{
												msg = "typDiff";//选择的专利类型和专利任务类型不一致
											}
										}else{//专利任务未发生变化（不可能出现这种情况--因为专利类型已经发生变化）
											
										}
									}else{//原来不存在专利任务,新绑定的了专利任务
										if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
											pzm.updateAjIdById(pubId, zlId);
											msg = "success";
										}else{
											msg = "typDiff";//选择的专利类型和专利任务类型不一致
										}
									}
								}	
							}else{//没有关联专利任务
								//需要查看原先有无关联专利任务
								if(pubId_base > 0){//原来存在专利任务编号
									pzm.updateAjIdById(pubId_base, 0);
								}
								msg = "success";
							}	
							if(msg.equals("success")){////专利类型发生变化，需要重新获取专利号
								if(ajType.equals("fm")){
									varCon = "01";
								}else if(ajType.equals("syxx")){
									varCon = "02";
								}else if(ajType.equals("wg")){
									varCon = "03";
								}
								List<ZlajMainInfoTb> zlList_1 = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
								if(zlList_1.size() > 0){
									String ajNo_prev = zlList_1.get(0).getAjNo();//20180100011--201802
									String str1 = ajNo_prev.substring(0,6);
									String str2 = ajNo_prev.substring(6, 10);
									Integer nextNum = Integer.parseInt(str2) + 1;
									if(nextNum > 1000){
										nextNumStr = nextNum + "";
									}else if(nextNum > 100){
										nextNumStr = "0" + nextNum;
									}else if(nextNum > 10){
										nextNumStr = "00" + nextNum;
									}else if(nextNum > 1){
										nextNumStr = "000" + nextNum;
									}
									ajNoQt = str1 + nextNumStr + "." + cpyId;
									ajNo =  str1 + nextNumStr + cpyId;
								}else{
									ajNoQt = currYear + varCon + "0001" + "." + cpyId;
								}
							}
						}else{//类型没变，案件编号就不需要变化，需要判断专利任务有无发生变化
							//首先判断原来有没有关联专利任务
							if(pubId_base > 0){//原来存在专利任务编号
								if(pubId > 0){//传递有专利任务编号
									List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
									if(pubList.size() > 0){
										PubZlInfoTb pub = pubList.get(0);
										if(!pubId_base.equals(pubId)){//专利任务关联发生变化
											if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
												//这时需要修改专利任务中的案件编号
												//1:归0原来的专利任务中的案件编号
												pzm.updateAjIdById(pubId_base, 0);
												//2:修改新的专利任务中的案件编号
												pzm.updateAjIdById(pubId, zlId);
												msg = "success";
											}else{
												msg = "typDiff";//选择的专利类型和专利任务类型不一致
											}
										}else{//专利任务未发生变化（不可能出现这种情况--因为专利类型已经发生变化）
											msg = "success";
										}
									}
								}else{//没有绑定专利任务
									pzm.updateAjIdById(pubId_base, 0);
									msg = "success";
								}
							}else{//原来不存在专利任务
								if(pubId > 0){//新绑定的了专利任务
									List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
									if(pubList.size() > 0){
										PubZlInfoTb pub = pubList.get(0);
										if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
											pzm.updateAjIdById(pubId, zlId);
											msg = "success";
										}else{
											msg = "typDiff";//选择的专利类型和专利任务类型不一致
										}
									}		
								}else{//没有绑定专利任务
									msg = "success";
								}
							}
						}
					}else{
						msg = "notUpdate";//定稿以后或是专利状态终止的条件下不能修改
					}

					if(msg.equals("success")){
						String ajFieldId = CommonTools.getFinalStr("ajFieldId", request);
						String ajSqrId  = CommonTools.getFinalStr("ajSqrId", request);
						String ajFmrId  = CommonTools.getFinalStr("ajFmrId", request);
						String ajLxrId = CommonTools.getFinalStr("ajLxrId", request);
						String ajSqAddress = Transcode.unescape_new("ajSqAddress", request);
						String yxqDetail = CommonTools.getFinalStr("yxqDetail", request);
						String ajUpload = CommonTools.getFinalStr("ajUpload", request);
						String ajRemark = CommonTools.getFinalStr("ajRemark", request);
						String ajEwyqId = CommonTools.getFinalStr("ajEwyqId", request);
						Integer upUserId = -1;
						String upFileDate = "";
						if(!ajUpload.equals(zl.getAjUpload())){//上传资料发生变化
							upUserId = currUserId;
							upFileDate = CurrentTime.getStringDate();
						}
						zlm.updateBasicInfoById(zlId, ajTitle, ajNo, ajNoQt, pubId, ajSqAddress, ajType, ajFieldId, ajSqrId, ajFmrId, ajLxrId, yxqDetail, ajUpload, ajRemark, ajEwyqId, "", 0);
						if(!ajUpload.equals(zlList.get(0).getAjUpload())){
							List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz("专利案件录入");
							if(lcList.size() > 0){
								mxm.updateEdateById(lcList.get(0).getId(), -1, upUserId, ajUpload, upFileDate, "", "", "");
							}
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 抢购专利撰写任务
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-13 下午09:45:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward lqZlTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "upZl");//只有修改权限的员工才能领取任务
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer currUserId = this.getLoginUserId(request);
				CpyUserInfo user = cum.getEntityById(currUserId);
				if(user != null && zlId > 0){
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						//只有在案件状态正常时（0）、案件状态（2.0）、案件撰写人（0）、流程期限未到（cpyDate）才能领取
						if(zl.getAjStopStatus().equals(0)){
							if(zl.getAjStatus().equals("2.0") && zl.getCheckUserId().equals(0)){
								List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz("人员分配");
								if(lcList.size() > 0){
									ZlajLcInfoTb lc = lcList.get(0);
									Integer lcId = lc.getId();
									Integer diffDays = CurrentTime.compareDate(CurrentTime.getStringDate(),lc.getLcCpyDate());
									if(diffDays > 0){//可以领取
										List<ZlajLcMxInfoTb> mxList = mxm.listFirstInfoByLcId(lcId);//撰写任务领取肯定是第一个
										if(mxList.size() > 0){
											mxm.updateEdateById(mxList.get(0).getId(), currUserId, -1, "", "", "", currDate, "撰写任务已被领取");
											List<ZlajLcInfoTb> lcList_f = lcm.listLcInfoByLcMz("专利案件录入");
											if(lcList_f.size() > 0){
												String cpyDate = lcList_f.get(0).getLcCpyDate();
												Integer lcId_3 = lcm.addLcInfo(zlId, "新申请撰稿", "新申请撰稿", currDate, cpyDate, "", "");
												mxm.addLcMx(lcId_3, currUserId, "新申请撰稿", 3.0, currDate, "", "", 0, "", "", "");
												//领取成功后把状态修改成3.0
												zlm.updateZlStatusById(zlId, "3.0");//修改专利状态为3
												//给当前撰写人发送邮件
												mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, currUserId, "cpyUser", "新任务通知：专利撰写", "您已成功领取专利["+lc.getZlajMainInfoTb().getAjTitle()+"]任务，请您于["+cpyDate+"]之前完成专利撰写工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
												msg = "success";
											}
										}
									}else{
										msg = "outDate";//期限已过，不能领取
									}
								}
							}else{
								msg = "noReceive";//该流程任务已被其他员工领取
							}
						}else{
							msg = "stopStatus";//案件已终止，不能进行流程任务领取
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}

		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前未完成任务流程环节的负责人是否和当前用户一致
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-18 下午10:12:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrLcFzrInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			Integer zlId = CommonTools.getFinalInteger("zlId", request);
			Integer currUserId = this.getLoginUserId(request);
			CpyUserInfo user = cum.getEntityById(currUserId);
			if(user != null && zlId > 0){
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					//只有在案件状态正常时（0）
					if(zl.getAjStopStatus().equals(0)){
						//获取当前最后一个未完成的流程
						List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
						if(lcList.size() > 0){
							List<ZlajLcMxInfoTb> mxList = mxm.listLastInfoByLcId(lcList.get(0).getId());
							if(mxList.size() > 0){
								ZlajLcMxInfoTb lcmx = mxList.get(0);
								if(lcmx.getLcMxEDate().equals("")){
									if(currUserId.equals(lcmx.getLcFzUserId())){
										msg = "success";
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 流程细节处理
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-18 下午08:47:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward dealLcDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String roleName = this.getLoginRoleName(request);
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "upZl");//只有修改权限的员工才能进行流程处理
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer currUserId = this.getLoginUserId(request);
				CpyUserInfo user = cum.getEntityById(currUserId);
				if(user != null && zlId > 0){
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						//只有在案件状态正常时（0）
						if(zl.getAjStopStatus().equals(0)){
							String ajStatus = zl.getAjStatus();
							//获取当前最后一个流程
							List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
							if(lcList.size() > 0){
								List<ZlajLcMxInfoTb> mxList = mxm.listLastInfoByLcId(lcList.get(0).getId());
								if(mxList.size() > 0){
									ZlajLcMxInfoTb lcmx = mxList.get(0);
									double lcNo = lcmx.getLcMxNo();
									if(lcmx.getLcMxEDate().equals("")){
										if(currUserId.equals(lcmx.getLcFzUserId())){
											if(lcNo >= 3.0 && lcNo < 4.0){//案件撰写/案件补正
												
											}
										}else{
											msg = "fzrError";//当前操作用户和当前流程负责人不一致
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 下载文件
	 * @description
	 * @author wm
	 * @date 2018-9-3 上午10:05:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward downFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
//		String fileUrl = CommonTools.getFinalStr("fileUrl", request);
		String fileUrl = Transcode.MyTranscodeUTF(request.getParameter("fileUrl"));
		String absoFilePath = "";//绝对地址
		String fileName = "";
		OutputStream fos = null;
        BufferedOutputStream bos = null;
        InputStream fis = null;
        BufferedInputStream bis = null;
		if(!fileUrl.equals("")){
			fileName = fileUrl.substring(fileUrl.lastIndexOf("\\")+1,fileUrl.length());
			absoFilePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" +fileUrl;
			try  {  
		        //第七步 下载文件到客户端
		        
		        fis = new FileInputStream(new File(absoFilePath));
				bis = new BufferedInputStream(fis);
				fos = response.getOutputStream();
				bos = new BufferedOutputStream(fos);
				fileName = URLEncoder.encode(fileName,"UTF-8");
				//这个就就是弹出下载对话框的关键代码
				response.setHeader("Pragma", "No-cache");
				response.setHeader("Cache-Control", "No-cache");
				response.setDateHeader("Expires", 0); 
		        response.setHeader("Content-disposition","attachment;filename=" +fileName);
		        response.setContentType("application/x-download");
		        int bytesRead = 0;
		        byte[] buffer = new byte[8192];
		        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
		        	fos.write(buffer, 0, bytesRead);
		        } 
		        fos.flush();
		        fis.close();
		        bis.close();
		        fos.close();
		        bos.close();
		    } catch (IOException e){  
		        e.printStackTrace();  
		    }
		}
		return null;
	}
}