/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.patent.action.zl;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.patent.util.WebUrl;
import com.patent.action.base.Transcode;
import com.patent.factory.AppFactory;
import com.patent.json.FeeDetailJson;
import com.patent.json.LateFeeJson;
import com.patent.json.TzsJson;
import com.patent.module.CpyUserInfo;
import com.patent.module.CustomerFmrInfoTb;
import com.patent.module.CustomerInfoTb;
import com.patent.module.CustomerLxrInfoTb;
import com.patent.module.JsFiledInfoTb;
import com.patent.module.PubZlCzRecordTb;
import com.patent.module.PubZlInfoTb;
import com.patent.module.ZlajEwyqInfoTb;
import com.patent.module.ZlajFeeInfoTb;
import com.patent.module.ZlajFeeSubInfoTb;
import com.patent.module.ZlajFjInfoTb;
import com.patent.module.ZlajLcInfoTb;
import com.patent.module.ZlajLcMxInfoTb;
import com.patent.module.ZlajMainInfoTb;
import com.patent.module.ZlajTzsInfoTb;
import com.patent.page.PageConst;
import com.patent.service.CpyUserInfoManager;
import com.patent.service.CustomerInfoManager;
import com.patent.service.JsFiledInfoManager;
import com.patent.service.MailInfoManager;
import com.patent.service.PubZlInfoManager;
import com.patent.service.ZlajEwyqInfoManager;
import com.patent.service.ZlajFeeInfoManager;
import com.patent.service.ZlajFjInfoManager;
import com.patent.service.ZlajLcInfoManager;
import com.patent.service.ZlajLcMxInfoManager;
import com.patent.service.ZlajMainInfoManager;
import com.patent.service.ZlajTzsInfoManager;
import com.patent.tools.CommonTools;
import com.patent.tools.Convert;
import com.patent.tools.CurrentTime;
import com.patent.tools.FileOpration;
import com.patent.tools.ReadZipFile;
import com.patent.util.Constants;
import com.patent.web.Ability;

/** 
 * MyEclipse Struts
 * Creation date: 08-25-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ZlMainAction extends DispatchAction {
	
	
	/**
	 * 获取session中的用户ID
	 * @param request
	 * @return
	 */
	private Integer getLoginUserId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色编号
	 * @param request
	 * @return
	 */
	private Integer getLoginRoleId(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_ID);
        return userId;
	}
	
	/**
	 * 获取session中的用户角色名称
	 * @param request
	 * @return
	 */
	private String getLoginRoleName(HttpServletRequest request){
        String roleName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_ROLE_NAME);
        return roleName;
	}
	
	/**
	 * 获取session中的登录类型
	 * @author Administrator
	 * @date 2018-7-31 下午09:39:57
	 * @ModifiedBy
	 * @param request
	 * @return
	 */
	private String getLoginType(HttpServletRequest request){
        String loginType = (String)request.getSession(false).getAttribute(Constants.LOGIN_TYPE);
        return loginType;
	}
	
	/**
	 * 封装json
	*  @author  Administrator
	*  @ModifiedBy  
	*  @date  2018-8-21 下午10:17:05
	*  @param obj
	*  @param response
	*  @throws IOException
	 */
	private void getJsonPkg(Object obj,HttpServletResponse response) throws IOException{
		String json = JSON.toJSONString(obj);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
	}
	
	/**
	 * 获取当前用户有无指定的操作权限
	 * @description
	 * @author Administrator
	 * @date 2018-10-16 上午09:27:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getAbilityFlag(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String actNameEng = CommonTools.getFinalStr("actNameEng", request);
		boolean abilityFlag = false;
		String msg = "";
		if(!actNameEng.equals("")){
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				//获取当前用户是否有修改权限
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), actNameEng);
			}
		}
		if(abilityFlag){
			if(actNameEng.equals("dealZl")){//专利流程处理
				//需要判断当前流程操作的人员是否和和原定的流程操作人员符合
				CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
				ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
				String lcNameEng = CommonTools.getFinalStr("lcNameEng", request);//流程
				Integer currLoginUserId = this.getLoginUserId(request);
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer cpyId = cum.getEntityById(currLoginUserId).getCpyInfoTb().getId();
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					if(lcNameEng.equals("zx") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("sc") && currLoginUserId.equals(zl.getCheckUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("dgtj") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("tzs") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("fycj") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("bz") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("bzsh") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else if(lcNameEng.equals("bh") && currLoginUserId.equals(zl.getZxUserId())){
						msg = "ability";
					}else{
						msg = "noAbility";
					}
				}else{
					msg = "error";
				}
			}else{
				msg = "ability";
			}
		}else{
			msg = "noAbility";
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向专利页面
	 * @description
	 * @author wm
	 * @date 2018-8-25 下午05:34:01
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward goZlPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		String loginType = this.getLoginType(request);
		boolean fpZlFlag = false;//任务分配
		boolean lqzLFlag = false;//专利任务领取
		boolean dealZlFlag = false;//专利流程处理
		if(loginType.equals("cpyUser")){//代理机构下
			CpyUserInfo cpyUser = cum.getEntityById(this.getLoginUserId(request));
			Integer roleId = this.getLoginRoleId(request);
			if(cpyUser != null){
				if(this.getLoginRoleName(request).equals("管理员")){
					fpZlFlag = true;
					lqzLFlag = true;
					dealZlFlag = true;
				}else{
					fpZlFlag = Ability.checkAuthorization(roleId, "fpZl");
					lqzLFlag = Ability.checkAuthorization(roleId, "lqZl");
					dealZlFlag = Ability.checkAuthorization(roleId, "dealZl");
				}
			}
		}
		request.setAttribute("fpZlFlag", fpZlFlag);
		request.setAttribute("lqzLFlag", lqzLFlag);
		request.setAttribute("dealZlFlag", dealZlFlag);
		return mapping.findForward("zlPage");
	}
	
	/**
	 * 根据条件分页获取专利信息列表(只对代理机构和平台用户开放)
	 * @description
	 * @author wm
	 * @date 2018-8-25 下午05:50:50
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageZlData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CustomerInfoManager cm = (CustomerInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUSTOMER_INFO);
		JsFiledInfoManager jsm = (JsFiledInfoManager) AppFactory.instance(null).getApp(Constants.WEB_JS_FIELD_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		Integer cpyId = CommonTools.getFinalInteger("cpyId",request);
		Integer stopStatus = CommonTools.getFinalInteger("stopStatus",request);
		String ajNoQt = CommonTools.getFinalStr("ajNoQt",request);
		String sqAddress = Transcode.unescape_new("sqAddress", request);
		String zlNo = CommonTools.getFinalStr("zlNo", request);
		String ajTitle = Transcode.unescape_new("ajTitle", request);
		String ajType = CommonTools.getFinalStr("ajType", request);
		String lxr = CommonTools.getFinalStr("lxr", request);
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		Integer lqStatus = CommonTools.getFinalInteger("lqStatus", request);//任务条件（0：流程任务分配，1：专利，2：撰写任务领取,3：我的专利,4:我的任务）
		Integer comStatus = CommonTools.getFinalInteger("comStatus", request);//我的任务时传递的参数
		Integer currLoginUserId = this.getLoginUserId(request);
		//当任务条件为0时，撰写任务领取，这时需要强制stopStatus为正常（0）
		if(lqStatus.equals(0)){//撰写任务领取时，专利任务必须时正常状态
			stopStatus = 0;
		}
		Map<String,Object> map = new HashMap<String,Object>();
		String loginType = this.getLoginType(request);
		boolean abilityFlag = false;
		if(loginType.equals("cpyUser")){//代理机构下
			CpyUserInfo cpyUser = cum.getEntityById(currLoginUserId);
			if(cpyUser != null){
				cpyId = cpyUser.getCpyInfoTb().getId();
				if(this.getLoginRoleName(request).equals("管理员")){
					abilityFlag = true;
				}else{
					//获取当前用户是否有浏览权限
					abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listZl");
				}
			}
		}else if(loginType.equals("spUser")){//平台用户
			lqStatus = 1;
			abilityFlag = true;
		}
		if(abilityFlag){
			if(lqStatus <= 3){
				Integer count = zlm.getCountByOpt(cpyId, stopStatus, sqAddress, ajNoQt, zlNo, ajTitle, ajType, lxr, sDate, eDate,lqStatus,currLoginUserId);
				if(count > 0){
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					List<ZlajMainInfoTb> zlList = zlm.listPageInfoByOpt(cpyId, stopStatus, sqAddress, ajNoQt, zlNo, ajTitle, ajType, lxr, sDate, eDate, lqStatus, currLoginUserId,pageNo, pageSize);
					List<Object> list_d = new ArrayList<Object>();
					for(Iterator<ZlajMainInfoTb> it = zlList.iterator() ; it.hasNext();){
						ZlajMainInfoTb zl = it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("id", zl.getId());
						map_d.put("ajNo", zl.getAjNoQt());
						map_d.put("ajNoGf", zl.getAjNoGf());
						map_d.put("ajTitle", zl.getAjTitle());
						String ajType_db = zl.getAjType();
						String ajType_new = "";
						if(ajType_db.equals("fm")){
							ajType_new = "发明";
						}else if(ajType_db.equals("syxx")){
							ajType_new = "实用新型";
						}else if(ajType_db.equals("wg")){
							ajType_new = "外观";
						}else if(ajType_db.equals("fmxx")){
							ajType_new = "发明+新型";
						}
						map_d.put("ajType", ajType_new);
						String ajFieldIdStr = zl.getAjFieldId();
						String ajFieldName = "";
						if(!ajFieldIdStr.equals("")){
							List<JsFiledInfoTb> jsList = jsm.listInfoByOpt(cpyId, ajFieldIdStr);
							for(Iterator<JsFiledInfoTb> it_js = jsList.iterator(); it_js.hasNext();){
								JsFiledInfoTb js = it_js.next();
								ajFieldName += js.getZyName() + ",";
							}
							if(!ajFieldName.equals("")){
								ajFieldName = ajFieldName.substring(0, ajFieldName.length() - 1);
							}
						}				
						map_d.put("ajFieldName", ajFieldName);
						String sqrId = zl.getAjSqrId();
						String sqrName = "";//可以是公司也可以是个人
						if(!sqrId.equals("")){
	 						String[] sqrIdArr = sqrId.split(",");
	 						for(Integer i = 0 ; i < sqrIdArr.length ; i++){
	 							List<CustomerInfoTb> cList = cm.listInfoById(cpyId, Integer.parseInt(sqrIdArr[i]));
	 							if(cList.size() > 0){
	 								sqrName += cList.get(0).getCusName() + ",";
	 							}
	 						}
	 						if(!sqrName.equals("")){
	 							sqrName = sqrName.substring(0, sqrName.length() - 1);
	 						}
	 					}
						map_d.put("sqrInfo", sqrName);
						String fmrId = zl.getAjFmrId();
						String fmrName = "";
	 					if(!fmrId.equals("")){
	 						String[] fmrIdArr = fmrId.split(",");
	 						for(Integer i = 0 ; i < fmrIdArr.length ; i++){
	 							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(fmrIdArr[i]), cpyId);
	 							if(cList.size() > 0){
	 								fmrName += cList.get(0).getCusFmrName() + ",";
	 							}
	 						}
	 						if(!fmrName.equals("")){
	 							fmrName = fmrName.substring(0, fmrName.length() - 1);
	 						}
	 					}
						map_d.put("fmrInfo", fmrName);
						String lxrId = zl.getAjLxrId();
	 					String lxrName = "";
	 					if(!lxrId.equals("")){
	 						String[] lxrIdArr = lxrId.split(",");
	 						for(Integer j = 0 ; j < lxrIdArr.length ; j++){
	 							List<CustomerLxrInfoTb> clList = cm.listLxrInfoByCusId(Integer.parseInt(lxrIdArr[j]), cpyId);
	 							if(clList.size() > 0){
	 								lxrName += clList.get(0).getCusLxrName() + ",";
	 							}
	 						}
	 						if(!lxrName.equals("")){
	 							lxrName = lxrName.substring(0, lxrName.length() - 1);
	 						}
	 					}
						map_d.put("lxrInfo", lxrName);
						String jsLxrId = zl.getJsLxrId();
						String jsLxrName = "";
	 					if(!jsLxrId.equals("")){
	 						String[] jsLxrIdArr = jsLxrId.split(",");
	 						for(Integer i = 0 ; i < jsLxrIdArr.length ; i++){
	 							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(jsLxrIdArr[i]), cpyId);
	 							if(cList.size() > 0){
	 								jsLxrName += cList.get(0).getCusFmrName() + ",";
	 							}
	 						}
	 						if(!jsLxrName.equals("")){
	 							jsLxrName = jsLxrName.substring(0, jsLxrName.length() - 1);
	 						}
	 					}
						map_d.put("jsLxrInfo", jsLxrName);
						map_d.put("ajFjInfo", zl.getAjFjInfo());
						map_d.put("ajAddress", zl.getAjSqAddress());
						map_d.put("applyDate", zl.getAjApplyDate());
						map_d.put("ajStatus", zl.getAjStatusChi());
						map_d.put("ajStopStatus", zl.getAjStopStatus().equals(0) ? "正常":"终止");
						map_d.put("ajStopDate", zl.getAjStopDate());
						map_d.put("ajStopUser", zl.getAjStopUser());
						String soptUserType = zl.getAjStopUserType();
						if(zl.getAjStopStatus().equals(1)){
							if(soptUserType.equals("cpyUser")){
								soptUserType = "机构员工";
							}else{
								soptUserType = "发布人员";
							}
						}
						map_d.put("ajStopUserType", soptUserType);
						map_d.put("ajAddDate", zl.getAjAddDate());
						Integer zxUserId = zl.getZxUserId();
						String zxUserName = "暂无";
						CpyUserInfo zxUser = cum.getEntityById(zxUserId);
						if(zxUser != null){
							zxUserName = zxUser.getUserName();
						}
						map_d.put("zxUserName", zxUserName);
						//查看当前最后任务时限有没有过期
						String zlStatusInfo = "";
						if(zl.getAjStopStatus().equals(0)){//案件终止状态下不在对比
							List<ZlajLcInfoTb> lcList = lcm.listLcInfoByAjId(zl.getId());
							if(lcList.size() > 0){
								ZlajLcInfoTb lc = lcList.get(0);
								if(lc.getLcEDate().equals("")){//未完成
									Integer diffDays = CurrentTime.compareDate(CurrentTime.getStringDate(), lc.getLcCpyDate());
									if(diffDays <= 0){
										zlStatusInfo = "outDate";//已过期
									}else if(diffDays.equals(1)){
										zlStatusInfo = "outDate_jj";//:即将过期
									}else if(diffDays > 1){
										zlStatusInfo = "outDate_zc";//正常
									}
								}
							}
						}else{
							zlStatusInfo = "ajStop";//案件已终止
						}
						map_d.put("zlStatusInfo", zlStatusInfo);
						list_d.add(map_d);
					}
					map.put("msg", "success");
					map.put("data", list_d);
					map.put("count", count);
					map.put("code", 0);
				}else{
					map.put("msg", "noInfo");
				}
			}else if(lqStatus.equals(4)){//我的任务
				Integer count = mxm.getCountByOpt(currLoginUserId, comStatus, ajTitle, ajNoQt, zlNo);
				if(count > 0){
					Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
					Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
					List<ZlajLcMxInfoTb> unMxList = mxm.listSpecInfoByOpt(currLoginUserId, comStatus, ajTitle, ajNoQt, zlNo,pageNo,pageSize);
					List<Object> list_d = new ArrayList<Object>();
					map.put("result", "success");
					for(Iterator<ZlajLcMxInfoTb> it = unMxList.iterator() ; it.hasNext();){
						ZlajLcMxInfoTb mx = it.next();
						ZlajLcInfoTb lc = mx.getZlajLcInfoTb();
						ZlajMainInfoTb zl = lc.getZlajMainInfoTb();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("mxId", mx.getId());
						map_d.put("taskName", mx.getLcMxName());//任务名称
						map_d.put("taskSdate", mx.getLcMxSDate());//任务开始日期
						map_d.put("taskComDate", mx.getLcMxEDate());//任务完成日期
						map_d.put("taskEdateCpy", lc.getLcEDate());//任务期限（代理机构）
						map_d.put("taskEdateGf", lc.getLcGfDate());//任务期限（官方）
						map_d.put("zlTitle", zl.getAjTitle());//专利标题
						map_d.put("zlNo", zl.getAjNoGf());//专利申请/专利号
						map_d.put("ajNoQt", zl.getAjNoQt());//案件编号
						map_d.put("zlId", zl.getId());//专利编号
						map_d.put("lcNo", mx.getLcMxNo());//流程号
						list_d.add(map_d);
					}
					map.put("msg", "success");
					map.put("data", list_d);
					map.put("count", count);
					map.put("code", 0);
				}else{
					map.put("msg", "noInfo");
				}
			}
		}

		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定专利详情(撰写任务领取【只获取基本信息】、专利任务共用)
	 * @description
	 * @author wm
	 * @date 2018-8-30 上午11:38:03
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getZlDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		ZlajEwyqInfoManager yqm = (ZlajEwyqInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_EWYQ_INFO);
		CustomerInfoManager cm = (CustomerInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUSTOMER_INFO);
		JsFiledInfoManager jsm = (JsFiledInfoManager) AppFactory.instance(null).getApp(Constants.WEB_JS_FIELD_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO); 
		ZlajTzsInfoManager tzsm = (ZlajTzsInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_TZS_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		ZlajFeeInfoManager zfm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		String opt = CommonTools.getFinalStr("opt", request);//basic(基本信息),lcfz(流程负责人员),lc(流程),tzs(通知书),fj(附件),fy(费用)-后续有的再加
		String msg = "error";
		boolean abilityFlag = false;
		Integer cpyId = 0;
		Map<String,Object> map = new HashMap<String,Object>();
		if(this.getLoginType(request).equals("cpyUser")){
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "listZl");
			}
			if(abilityFlag){
				CpyUserInfo cpyUser = cum.getEntityById(this.getLoginUserId(request));
				if(cpyUser != null){
					cpyId = cpyUser.getCpyInfoTb().getId();
				}
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					if(opt.equals("basic")){//基本信息
						map = new HashMap<String,Object>();
						msg = "success";
						ZlajMainInfoTb zl = zlList.get(0);
						map.put("ajId", zlId);
						map.put("ajTitle", zl.getAjTitle());
						map.put("ajNo", zl.getAjNoQt());
						map.put("ajNoGf", zl.getAjNoGf());
						map.put("ajAddress", zl.getAjSqAddress());
						map.put("ajType", zl.getAjType());
						String sqrName = zl.getAjSqrName();//可以是公司也可以是个人
						String sqrId = zl.getAjSqrId();
						map.put("sqrId", sqrId);
						map.put("sqrName", sqrName);
						String fmrId = zl.getAjFmrId();
						String fmrName = "";
						String sqrFmrId = "";//发明人对应的申请人
	 					if(!fmrId.equals("")){
	 						String[] fmrIdArr = fmrId.split(",");
	 						for(Integer i = 0 ; i < fmrIdArr.length ; i++){
	 							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(fmrIdArr[i]), cpyId);
	 							if(cList.size() > 0){
	 								CustomerFmrInfoTb fmr = cList.get(0);
	 								fmrName += fmr.getCusFmrName() + ",";
	 								sqrFmrId += fmr.getCustomerInfoTb().getId() + ",";
	 							}
	 						}
	 						if(!fmrName.equals("")){
	 							fmrName = fmrName.substring(0, fmrName.length() - 1);
	 							sqrFmrId = sqrFmrId.substring(0, sqrFmrId.length() - 1);
	 						}
	 					}
	 					map.put("fmrId", fmrId);
						map.put("fmrName", fmrName);
						map.put("sqrFmrId", sqrFmrId);
						
						String lxrId = zl.getAjLxrId();
	 					String lxrName = "";
	 					String sqrLxrId = "";//联系人对应的申请人
	 					if(!lxrId.equals("")){
	 						String[] lxrIdArr = lxrId.split(",");
	 						for(Integer j = 0 ; j < lxrIdArr.length ; j++){
	 							List<CustomerLxrInfoTb> clList = cm.listLxrInfoByCusId(Integer.parseInt(lxrIdArr[j]), cpyId);
	 							if(clList.size() > 0){
	 								CustomerLxrInfoTb lxr = clList.get(0);
	 								lxrName += lxr.getCusLxrName() + ",";
	 								sqrLxrId += lxr.getCustomerInfoTb().getId() + ",";
	 							}
	 						}
	 						if(!lxrName.equals("")){
	 							lxrName = lxrName.substring(0, lxrName.length() - 1);
	 							sqrLxrId = sqrLxrId.substring(0, sqrLxrId.length() - 1);
	 						}
	 					}
	 					map.put("lxrId", lxrId);
						map.put("lxrName", lxrName);
						map.put("sqrLxrId", sqrLxrId);
						
						String jsLxrId = zl.getJsLxrId();
						String jsLxrName = "";
						String sqrJsrId = "";//技术联系人对应的申请人
	 					if(!jsLxrId.equals("")){
	 						String[] jsLxrIdArr = jsLxrId.split(",");
	 						for(Integer i = 0 ; i < jsLxrIdArr.length ; i++){
	 							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(jsLxrIdArr[i]), cpyId);
	 							if(cList.size() > 0){
	 								CustomerFmrInfoTb fmr = cList.get(0);
	 								jsLxrName += fmr.getCusFmrName() + ",";
	 								sqrJsrId += fmr.getCustomerInfoTb().getId() + ",";
	 							}
	 						}
	 						if(!jsLxrName.equals("")){
	 							jsLxrName = jsLxrName.substring(0, jsLxrName.length() - 1);
	 							sqrJsrId = sqrJsrId.substring(0, sqrJsrId.length() - 1);
	 						}
	 					}
	 					map.put("jsLxrId", jsLxrId);
	 					map.put("jsLxrName", jsLxrName);
	 					map.put("sqrJsrId", sqrJsrId);
	 					
	 					Integer pubZlId = zl.getPubZlId();
	 					String pubZlName = "";
						map.put("pubZlId", pubZlId);//增加的领取的专利任务编号
						if(pubZlId > 0){
							List<PubZlInfoTb> pubZlList = pzm.listSpecInfoByOpt(pubZlId, 0);
							if(pubZlList.size() > 0){
								pubZlName = pubZlList.get(0).getZlTitle();
							}
						}
						map.put("pubZlName", pubZlName);//增加的领取的专利任务名称
						map.put("ajFjInfo", zl.getAjFjInfo());
						map.put("ajYxqDetail", zl.getAjYxqDetail());//格式为申请专利号,申请地区,申请日期:申请专利号,申请地区,申请日期........
						//获取当前专利类型的额外要求
						String yqIdStr = zl.getAjEwyqId();
						String[] yqIdArr = yqIdStr.split(",");
						List<ZlajEwyqInfoTb> yqList = yqm.listInfoByType(zl.getAjType());
						List<Object> list_d = new ArrayList<Object>();
						if(yqList.size() > 0){
							for(Iterator<ZlajEwyqInfoTb> it = yqList.iterator() ; it.hasNext();){
								ZlajEwyqInfoTb yq = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("yqId", yq.getId());
								map_d.put("yaContent", yq.getYqContent());
								if(yqIdStr.equals("")){
									map_d.put("checked", false);
								}else{
									for(Integer i = 0 ; i < yqIdArr.length ; i++){
										if(String.valueOf(yq.getId()).equals(yqIdArr[i])){
											map_d.put("checked", true);
											break;
										}else{
											map_d.put("checked", false);
										}
									}
								}
								list_d.add(map_d);
							}
						}
						map.put("yqInfo", list_d);
						String upFile = zl.getAjUpload();
						String upSize = "";
						String upFileName = "";
						List<Object> list_file = new ArrayList<Object>();
						if(!upFile.equals("")){
							String[] upFileArr = upFile.split(",");
							for(Integer i = 0 ; i < upFileArr.length ; i++){
								upFileName = upFileArr[i].substring((upFileArr[i].lastIndexOf("\\") + 1));
								upSize = FileOpration.getFileSize(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" + upFileArr[i]);
								Map<String,String> map_file = new HashMap<String,String>();
								map_file.put("upPath", upFileArr[i]);
								map_file.put("fileName", upFileName);
								map_file.put("fileSize", upSize);
								map_file.put("downFilePath", upFileArr[i]);
								list_file.add(map_file);
							}
						}
						map.put("upFile", list_file);
						map.put("stopStatus", zl.getAjStopStatus());//案件在终止状态下基本信息不能被修改
						map.put("ajStatus", zl.getAjStatus());//案件流程状态
						String selJsFieldStr = zl.getAjFieldId();
						String[] selJsFieldArr = selJsFieldStr.split(",");
						List<JsFiledInfoTb> jsList = jsm.listInfoByOpt(cpyId, "");
						List<Object> list_j = new ArrayList<Object>();
						for(Iterator<JsFiledInfoTb> it = jsList.iterator() ; it.hasNext();){
							JsFiledInfoTb js = it.next();
							Map<String,Object> map_j = new HashMap<String,Object>();
							map_j.put("jsId", js.getId());
							map_j.put("jsName", js.getZyName());
							if(selJsFieldStr.equals("")){
								map_j.put("checked", false);
							}else{
								for(Integer i = 0 ; i < selJsFieldArr.length ; i++){
									if(String.valueOf(js.getId()).equals(selJsFieldArr[i])){
										map_j.put("checked", true);
										break;
									}else{
										map_j.put("checked", false);
									}
								}
							}
							list_j.add(map_j);
						}
						map.put("jsFieldInfo", list_j);
						map.put("ajRemark", zl.getAjRemark());
						List<ZlajLcInfoTb> mxList = lcm.listLcInfoByLcMz(zl.getId(),"专利案件录入");
						if(mxList.size() > 0){
							map.put("cpyDate", mxList.get(0).getLcCpyDate());
						}
					}else if(opt.equals("lcfz")){//流程负责人信息
						map = new HashMap<String,Object>();
						msg = "success";
						ZlajMainInfoTb zl = zlList.get(0);
						map.put("ajId", zlId);
						Integer checkUserId = zl.getCheckUserId();
						Integer zxUserId = zl.getZxUserId();
						Integer tjUserId = zl.getTjUserId();
						Integer tzsUserId = zl.getTzsUserId();
						Integer feeUserId = zl.getFeeUserId();
						Integer bzUserId = zl.getBzUserId();
						Integer bzshUserId = zl.getBzshUserId();
						Integer bhUserId = zl.getBhUserId();
						Integer cusCheckUserId = zl.getCusCheckUserId();
						map.put("ajStatus", zl.getAjStatus());
						map.put("checkUserId", checkUserId);
						if(checkUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(checkUserId);
							if(cUser != null){
								map.put("checkUserName", cUser.getUserName());
							}else{
								map.put("checkUserName", "");
							}
						}else{
							map.put("checkUserName", "");
						}
						map.put("zxUserId", zxUserId);
						if(zxUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(zxUserId);
							if(cUser != null){
								map.put("zxUserName", cUser.getUserName());
							}else{
								map.put("zxUserName", "");
							}
						}else{
							map.put("zxUserName", "");
						}
						map.put("cusCheckUserId", cusCheckUserId);
						if(cusCheckUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(cusCheckUserId);
							if(cUser != null){
								map.put("cusCheckUserName", cUser.getUserName());
							}else{
								map.put("cusCheckUserName", "");
							}
						}else{
							map.put("cusCheckUserName", "");
						}
						map.put("tjUserId", tjUserId);
						if(tjUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(tjUserId);
							if(cUser != null){
								map.put("tjUserName", cUser.getUserName());
							}else{
								map.put("tjUserName", "");
							}
						}else{
							map.put("tjUserName", "");
						}
						map.put("tzsUserId", tzsUserId);
						if(tzsUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(tzsUserId);
							if(cUser != null){
								map.put("tzsUserName", cUser.getUserName());
							}else{
								map.put("tzsUserName", "");
							}
						}else{
							map.put("tzsUserName", "");
						}
						map.put("feeUserId", feeUserId);
						if(feeUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(feeUserId);
							if(cUser != null){
								map.put("feeUserName", cUser.getUserName());
							}else{
								map.put("feeUserName", "");
							}
						}else{
							map.put("feeUserName", "");
						}
						map.put("bzUserId", bzUserId);
						if(bzUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(bzUserId);
							if(cUser != null){
								map.put("bzUserName", cUser.getUserName());
							}else{
								map.put("bzUserName", "");
							}
						}else{
							map.put("bzUserName", "");
						}
						map.put("bzshUserId", bzshUserId);
						if(bzshUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(bzshUserId);
							if(cUser != null){
								map.put("bzshUserName", cUser.getUserName());
							}else{
								map.put("bzshUserName", "");
							}
						}else{
							map.put("bzshUserName", "");
						}
						map.put("bhUserId", bhUserId);
						if(tjUserId > 0){
							CpyUserInfo cUser = cum.getEntityById(bhUserId);
							if(cUser != null){
								map.put("bhUserName", cUser.getUserName());
							}else{
								map.put("bhUserName", "");
							}
						}else{
							map.put("bhUserName", "");
						}
					}else if(opt.equals("lc")){//流程
						map = new HashMap<String,Object>();
						List<ZlajLcInfoTb> lcList = lcm.listInfoByZlId(zlId);
						List<Object> list_lc = new ArrayList<Object>();
						if(lcList.size() > 0){
							msg = "success";
							for(Iterator<ZlajLcInfoTb> it = lcList.iterator() ; it.hasNext();){
								ZlajLcInfoTb lc = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("lcId", lc.getId());
								map_d.put("lcName", lc.getLcMz());
								map_d.put("cpyDate", lc.getLcCpyDate());
								map_d.put("lcNo", lc.getLcNo());
								map_d.put("sDate", lc.getLcSDate());
								map_d.put("comDate", lc.getLcEDate());
								map_d.put("gfDate", lc.getLcGfDate());
								list_lc.add(map_d);
							}
							map.put("lcInfo", list_lc);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("tzs")){//通知书
						map = new HashMap<String,Object>();
						List<ZlajTzsInfoTb> tzsList = tzsm.listInfoByZlId(zlId);
						if(tzsList.size() > 0){
							msg = "success";
							List<Object> list_tzs = new ArrayList<Object>();
							for(Iterator<ZlajTzsInfoTb> it = tzsList.iterator() ; it.hasNext();){
								ZlajTzsInfoTb tzs = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								String tzsName = tzs.getTzsName();
								map_d.put("tzsId", tzs.getId());
								map_d.put("tzsName", tzsName.substring(tzsName.lastIndexOf("\\")+1,tzsName.length()));
								map_d.put("fwrDate", tzs.getTzsFwr());
								map_d.put("gfrDate", tzs.getTzsGfr());
								map_d.put("downFilePath", tzsName);
								list_tzs.add(map_d);
							}
							map.put("tzsInfo", list_tzs);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("fj")){//附件
						map = new HashMap<String,Object>();
						List<ZlajFjInfoTb> fjList = fjm.listInfoByAjId(zlId);
						if(fjList.size() > 0){
							msg = "success";
							List<Object> list_fj = new ArrayList<Object>();
							for(Iterator<ZlajFjInfoTb> it = fjList.iterator() ; it.hasNext();){
								ZlajFjInfoTb fj = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								map_d.put("fjId", fj.getId());
								map_d.put("fjName", fj.getFjName().substring(fj.getFjName().lastIndexOf("\\") + 1));
								map_d.put("fjType", fj.getFjType());
								map_d.put("fjVersion", fj.getFjVersion());
								map_d.put("fjGs", fj.getFjGs());
								map_d.put("fjDx", fj.getFjDx());
								map_d.put("upUserName", fj.getCpyUserInfo().getUserName());
								map_d.put("upDate", fj.getFjUpDate());
								map_d.put("downFilePath", fj.getFjName());
								list_fj.add(map_d);
							}
							map.put("fjInfo", list_fj);
						}else{
							msg = "noInfo";
						}
					}else if(opt.equals("fy")){//费用
						map = new HashMap<String,Object>();
						msg = "success";
						String feeTypeStatus = CommonTools.getFinalStr("feeTypeStatus", request);//费用类型（gf,dlf,nf,jlj）
						Integer djStatus = CommonTools.getFinalInteger("djStatus", request);//代缴状态
						Integer feeStatus = CommonTools.getFinalInteger("feeStatus", request);//缴费状态
						Integer backStatus = CommonTools.getFinalInteger("backStatus", request);//退费状态
						List<ZlajFeeInfoTb> feeList = zfm.listAllFeeByOpt(zlId, feeTypeStatus, djStatus, feeStatus, backStatus, cpyId);
						Double feeTotal = 0.00;//费用总计
						Double djFeeTotal = 0.00;//代缴费用统计
						Double backFeeTotal = 0.00;//已退费用统计
						Double diffFeeTotal = 0.00;//未退费用总计
						Double discountsFeeTotal = 0.00;//优惠费用总计
						List<Object> list_d = new ArrayList<Object>();
						if(feeList.size() > 0){
							for(Iterator<ZlajFeeInfoTb> it = feeList.iterator() ; it.hasNext();){
								ZlajFeeInfoTb gf = it.next();
								Map<String,Object> map_d = new HashMap<String,Object>();
								String feeName = gf.getFeeTypeInfoTb().getFeeName();
								map_d.put("feeId", gf.getId());
								map_d.put("feeName", feeName);//费用名称
								boolean flag = false;
								if(feeName.contains("年费")){//可能存在年费滞纳金
									List<ZlajFeeSubInfoTb> feeSubList = zfm.listInfoByFeeId(gf.getId());
									if(feeSubList.size() > 0){
										flag = true;
									}
								}
								map_d.put("subFeeFlag", flag);//费用子项（年费滞纳金）--只供参考用
								map_d.put("applyUserName", gf.getCpyUserInfo().getUserName());//操作人
								Double feePrice = gf.getFeePrice();
								map_d.put("feePrice", feePrice);//费用金额
								map_d.put("jnDate", gf.getFeeJnDate());//缴费时间
								Integer jnStatus = gf.getFeeStatus();
								map_d.put("jnStatus", jnStatus.equals(0) ? "未交" : "已交");//缴费状态
								Double feeRate = gf.getFeeRate();
								if(feeRate > 0){
									map_d.put("feeRate",feeRate * 100 + "%");//费减
								}else{
									map_d.put("feeRate","无费减");//费减
								}
								map_d.put("gfDate", gf.getFeeEndDateGf());//官方期限
								map_d.put("cpyDate", gf.getFeeEndDateJj());//费用期限
								Integer djStatus_temp = gf.getDjStatus();
								map_d.put("djStatus", djStatus_temp.equals(0) ? "自交" : "代交");//代缴状态
								if(djStatus_temp.equals(1)){//代缴下才有退换信息
									map_d.put("backStatus",gf.getBackStatus().equals(0) ? "未完成" : "已完成");//退换状态
									Double backFee = gf.getBackFee();
									map_d.put("backFee",backFee);//退换费用
									Double discountsFee = gf.getDiscountsFee();
									map_d.put("discountsFee",discountsFee);//优惠
									map_d.put("backDate",gf.getBackDate());//退换日期
									if(jnStatus.equals(1)){//费用为已交状态
										//计入代缴费用总计
										djFeeTotal += feePrice;
										backFeeTotal += backFee;
										discountsFeeTotal += discountsFee;
									}
								}else{
									map_d.put("backStatus","");
									map_d.put("backFee","");
									map_d.put("discountsFee","");
									map_d.put("backDate","");
								}
								String feeZdFile = gf.getFeeUpZd();
								map_d.put("feeZd", feeZdFile);//缴费账单
								map_d.put("feeRemark", gf.getFeeRemark());//备注
								list_d.add(map_d);
								feeTotal += feePrice;
							}
							if(feeTotal > 0){
								feeTotal = Convert.convertInputNumber_2(feeTotal);
							}
							if(djFeeTotal > 0){
								djFeeTotal = Convert.convertInputNumber_2(djFeeTotal);
							}
							if(backFeeTotal > 0){
								backFeeTotal = Convert.convertInputNumber_2(backFeeTotal);
							}
							if(discountsFeeTotal > 0){
								discountsFeeTotal = Convert.convertInputNumber_2(discountsFeeTotal);
							}
							msg = "success";
						}else{
							msg = "noInfo";
						}
						diffFeeTotal = Convert.convertInputNumber_2(djFeeTotal - backFeeTotal - discountsFeeTotal);
						map.put("feeInfo", list_d);
						map.put("djFeeTotal", djFeeTotal);
						map.put("feeTotal", feeTotal);
						map.put("backFeeTotal", backFeeTotal);
						map.put("discountsFeeTotal", discountsFeeTotal);
						map.put("diffFeeTotal", diffFeeTotal);
					}
				}
			}else{
				msg = "noAbility";
			}
		}else{
			msg = "noAbility";
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定专利收费明细的滞纳金/付账单
	 * @description
	 * @author Administrator
	 * @date 2018-11-14 上午08:18:37
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSubZlInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajFeeInfoManager zfm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		String opt = CommonTools.getFinalStr("opt", request);//zd(账单),znj(滞纳金)
		Integer feeId = CommonTools.getFinalInteger("feeId", request);//费用明细编号
		List<Object> list_d = new ArrayList<Object>();
		String msg = "error";
		Map<String,Object> map = new HashMap<String,Object>();
		if(!opt.equals("") && feeId > 0){
			if(opt.equals("znj")){
				List<ZlajFeeSubInfoTb> feeSubList = zfm.listInfoByFeeId(feeId);
				if(feeSubList.size() > 0){
					msg = "success";
					for(Iterator<ZlajFeeSubInfoTb> it_sub = feeSubList.iterator() ; it_sub.hasNext();){
						ZlajFeeSubInfoTb subFee = it_sub.next();
						Map<String,Object> map_d_sub = new HashMap<String,Object>();
						map_d_sub.put("subFeeName", subFee.getFeeTypeInfoTb().getFeeName()+"滞纳金");
						map_d_sub.put("feeRange", subFee.getFeeRange());
						map_d_sub.put("subFeePrice", subFee.getFeePrice());
						map_d_sub.put("subFeeRemark", subFee.getFeeRemark());
						list_d.add(map_d_sub);
					}
					map.put("subFeeInfo", list_d);
				}else{
					msg = "noInfo";
				}
			}else if(opt.equals("zd")){
				ZlajFeeInfoTb zlf = zfm.getFeeEntityById(feeId);
				if(zlf != null){
					String feeZdFile = zlf.getFeeUpZd();
					if(!feeZdFile.equals("")){
						msg = "success";
						List<Object> list_zd = new ArrayList<Object>();
						String[] feeZdFileArr = feeZdFile.split(",");
						for(Integer i = 0 ; i < feeZdFileArr.length ; i++){
							String zdName = feeZdFileArr[i].substring((feeZdFileArr[i].lastIndexOf("\\") + 1));
							String zdSize = FileOpration.getFileSize(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" + feeZdFileArr[i]);
							Map<String,String> map_zd = new HashMap<String,String>();
							map_zd.put("zdName", zdName);
							map_zd.put("fileSize", zdSize);
							map_zd.put("downFilePath", feeZdFileArr[i]);
							list_zd.add(map_zd);
						}
						//获取
						map.put("zdInfo", list_zd);
						map.put("feeBatchNo",zlf.getFeeBatchNo());//缴费批次号
						map.put("bankSerialNo",zlf.getBankSerialNo());//银行缴费流水号
					}else{
						msg = "noInfo";
					}
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前用户有多少操作类型（zx-专利撰写,sc-专利审核,dgtj-定稿提交,tzs-导入通知书,fycj-费用催缴,bz-专利补正,bzsh-补正审核,bh-专利驳回）
	 * 为权利移交时使用
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-8 下午10:03:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrOperatorType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "error";
		boolean abilityFlag = true;
		if(this.getLoginType(request).equals("cpyUser")){//只针对代理机构下员工使用
			Integer currLoginUserId = this.getLoginUserId(request);
			if(abilityFlag){//只针对具有修改权限的员工和管理员使用
				CpyUserInfo user = cum.getEntityById(currLoginUserId);
				if(user != null){
					Integer cpyId = user.getCpyInfoTb().getId();
					Integer zlId = CommonTools.getFinalInteger("zlId", request);
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						if(zl.getAjStopStatus().equals(0)){//只有案件在正常状态下才能进行移交
							Map<String,String> map_d = new HashMap<String,String>();
							Integer ajStatus = Integer.parseInt(zl.getAjStatus());
							List<Object> list_d = new ArrayList<Object>();
							Integer yyNum = 0;
							//案件没完成提交之前可以移交撰写任务
							if(currLoginUserId.equals(zl.getZxUserId()) && ajStatus < 7){
								map_d.put("typeName", "zx");
								map_d.put("typeNameChi", "专利撰写");
								list_d.add(map_d);
								yyNum += 1;
							}
							//案件没完成提交之前可以移交技术审核
							if(currLoginUserId.equals(zl.getCheckUserId()) && ajStatus < 7){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "sc");
								map_d.put("typeNameChi", "专利审核");
								list_d.add(map_d);
								yyNum += 1;
							}
							//案件没完成提交之前可以移交定稿审核
							if(currLoginUserId.equals(zl.getTjUserId())  && ajStatus < 7){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "dgtj");
								map_d.put("typeNameChi", "定稿提交");
								list_d.add(map_d);
								yyNum += 1;
							}
							//之后流程无限制
							if(currLoginUserId.equals(zl.getTzsUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "tzs");
								map_d.put("typeNameChi", "导入通知书");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getFeeUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "fycj");
								map_d.put("typeNameChi", "费用催缴");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBzUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bz");
								map_d.put("typeNameChi", "专利补正");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBzshUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bzsh");
								map_d.put("typeNameChi", "补正审核");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(currLoginUserId.equals(zl.getBhUserId())){
								map_d = new HashMap<String,String>();
								map_d.put("typeName", "bh");
								map_d.put("typeNameChi", "专利驳回");
								list_d.add(map_d);
								yyNum += 1;
							}
							if(yyNum.equals(0)){
								msg = "noInfo";
							}else{
								msg = "success";
								map.put("yyType", list_d);
							}
						}else{
							msg = "ajStop";//案件在终止状态下不能进行移交操作
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定的流程明细
	 * @description
	 * @author Administrator
	 * @date 2018-11-8 上午08:36:52
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLcMxDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Integer lcId = CommonTools.getFinalInteger("lcId",request);
		List<ZlajLcMxInfoTb> mxList = mxm.listDetailInfoByLcId(lcId);
		List<Object> list_d = new ArrayList<Object>();
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(mxList.size() > 0){
			msg = "success";
			for(Iterator<ZlajLcMxInfoTb> it = mxList.iterator() ; it.hasNext();){
				ZlajLcMxInfoTb mx = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("mxId", mx.getId());
				map_d.put("mxName", mx.getLcMxName());
				Integer lcFzUserId = mx.getLcFzUserId();
				if(lcFzUserId > 0){//存在
					CpyUserInfo user = cum.getEntityById(lcFzUserId);
					if(user != null){
						map_d.put("fzUserName", user.getUserName());
					}else{
						map_d.put("fzUserName", "");
					}
				}else{
					map_d.put("fzUserName", "");
				}
				map_d.put("mxSDate", mx.getLcMxSDate());
				map_d.put("mxEDate", mx.getLcMxEDate());
				if(mx.getLcMxNo() != 2){
					String upFile_db = mx.getLcMxUpFile();
					String upFileName = "";//文件名称
					String upFileSize = "";//文件大小
					String[] upFileArr = upFile_db.split(",");
					Integer fileNum = upFileArr.length;
					String upUserName = cum.getEntityById(mx.getLcMxUpUserId()).getUserName();//上传人
					String upDate = mx.getLcMxUpDate();//上传日期
					List<Object> list_mx_1 = new ArrayList<Object>();
					for(Integer i = 0 ; i < fileNum ; i++){
						upFileName = upFileArr[i].substring(upFileArr[i].lastIndexOf("\\")+1,upFileArr[i].length());
						upFileSize = FileOpration.getFileSize(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" + upFileArr[i]);
						Map<String,String> map_mx = new HashMap<String,String>();
						map_mx.put("upFileName", upFileName);
						map_mx.put("upUserName", upUserName);
						map_mx.put("upDate", upDate);
						map_mx.put("upFileSize", upFileSize);
						map_mx.put("downFilePath", upFileArr[i]);
						list_mx_1.add(map_mx);
					}
					map_d.put("upFileDetail", list_mx_1);//附件明细（当上传文件存在时出现）
					map_d.put("mxRemark", mx.getLcMxRemark());
				}
				list_d.add(map_d);
			}
		}
		map.put("mxInfo", list_d);
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
		
	}
	
	
	/**
	 * 流程移交操作--针对代理机构员工开放(只有在流程分发人员分配任务后流程人员才能进行任务移交)
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-9 下午09:15:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setLcYj(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = true;
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		String msg = "error";
		boolean flag = false;
		Integer zxUserId = -1;
		Integer checkUserId = -1;
		Integer cusCheckUserId = -1;
		Integer tjUserId = -1;
		Integer tzsUserId = -1;
		Integer feeUserId = -1;
		Integer bzUserId = -1;
		Integer bzshUserId = -1;
		Integer bhUserId = -1;
		String lcName = "";
		String currDate = CurrentTime.getStringDate();
		if(zlId > 0){
			if(this.getLoginType(request).equals("cpyUser")){
				Integer currLoginUserId = this.getLoginUserId(request);
				if(abilityFlag){
					Integer userId_yj = CommonTools.getFinalInteger("userId_yj", request);//准备接受移交任务的用户
					//移交类型zx-撰写,sc-专利审核,cus-客户确认,dgtj-定稿提交,tzs-通知书,fycj-费用催缴,bz-补正,bzsh-补正审核,bh-驳回
					String yjType = CommonTools.getFinalStr("yjType", request);//移交类型
					String[] yjTypeArr = {"zx","sc","cus","dgtj","tzs","fycj","bz","bzsh","bh"};
					if(userId_yj > 0 && !yjType.equals("")){
						for(Integer i = 0 ; i < yjTypeArr.length ; i++){
							if(yjType.equals(yjTypeArr[i])){
								flag = true;
								break;
							}
						}
						if(flag){
							CpyUserInfo user = cum.getEntityById(currLoginUserId);
							if(user != null){
								List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
								if(zlList.size() > 0){
									ZlajMainInfoTb zl = zlList.get(0);
									if(zl.getAjStopStatus().equals(0)){//只有案件在正常状态下才能进行移交
										CpyUserInfo user_yj = cum.getEntityById(userId_yj);
										String ajNoQt = zl.getAjNoQt();//平台定义的案件号
										if(user_yj != null){
											Integer ajStatus = Integer.parseInt(zl.getAjStatus());
											if(yjType.equals("zx") && currLoginUserId.equals(zl.getZxUserId())){
												if(ajStatus < 7){//案件没完成提交之前可以移交
													lcName = "专利撰写";
													zxUserId = userId_yj;
												}else{
													msg = "noYj_zx";
													flag = false;
												}
											}else if(yjType.equals("sc") && currLoginUserId.equals(zl.getCheckUserId())){
												if(ajStatus < 7){//案件没完成提交之前可以移交
													lcName = "专利审核";
													checkUserId = userId_yj;
												}else{
													msg = "noYj_sc";
													flag = false;
												}
											}else if(yjType.equals("cus") && currLoginUserId.equals(zl.getCusCheckUserId())){
												if(ajStatus < 7){//案件没完成提交之前可以移交
													lcName = "客户确认";
													cusCheckUserId = userId_yj;
												}else{
													msg = "noYj_cus";
													flag = false;
												}
											}else if(yjType.equals("dgtj") && currLoginUserId.equals(zl.getZxUserId())){
												if(ajStatus < 7){
													lcName = "定稿提交";//案件没完成提交之前可以移交
													tjUserId = userId_yj;
												}else{
													msg = "noYj_tj";
													flag = false;
												}
												
											}else if(yjType.equals("tzs") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "导入通知书";//无限制
												tzsUserId = userId_yj;
											}else if(yjType.equals("fycj") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "费用催缴";//无限制
												feeUserId = userId_yj;
											}else if(yjType.equals("bz") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "专利补正";//无限制
												bzUserId = userId_yj;
											}else if(yjType.equals("bzsh") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "补正审核";//无限制
												bzshUserId = userId_yj;
											}else if(yjType.equals("bh") && currLoginUserId.equals(zl.getZxUserId())){
												lcName = "专利驳回";//无限制
												bhUserId = userId_yj;
											}
											if(flag){
												//人员移交统一归纳到2.0（人员分配中来）
												List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz(zl.getId(),"人员分配");
												if(lcList.size() > 0){
													Integer lcId = lcList.get(0).getId();
													double currLcNo = 2.0;

													mxm.addLcMx(lcId, userId_yj, lcName+"任务领取", currLcNo, currDate, currDate,"", 0, "", "", 0.0,user.getUserName()+"任务移交",-1);
													//给被移交人发送邮件提醒
													mm.addMail("taskM", Constants.SYSTEM_EMAIL_ACCOUNT, userId_yj, "cpyUser",  ajNoQt+ " "+lcName+"任务移交", user.getUserName()+"将["+ajNoQt+"]"+lcName+"任务移交给你");
													zlm.updateOperatorUserInfoByZlId(zlId, checkUserId, zxUserId, cusCheckUserId, tjUserId, tzsUserId, feeUserId, bzUserId, bzshUserId, bhUserId);
													msg = "success";
												}
											}
										}
									}
								}
							}
							
						}
					}
				}else{
					msg = "noAbility";
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 修改专利操作人员(针对管理员和具有增加增加专利权限的人使用)
	 * @description
	 * @author wm
	 * @date 2018-9-6 上午08:20:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateOperatorUserInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String currDate = CurrentTime.getStringDate();
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		Integer zxUserId = CommonTools.getFinalInteger("zxUserId", request);
		Integer cusCheckUserId = -1;
		Integer tjUserId = -1;
		Integer tzsUserId = -1;
		Integer feeUserId = -1;
		Integer bzUserId = -1;
		Integer bzshUserId = -1;
		Integer bhUserId = -1;
		Integer checkUserId = -1;
		Integer lcPjScore = -1;
		String msg = "error";
		boolean flag_final = false;
		if(this.getLoginType(request).equals("cpyUser")){
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				//获取当前用户是否拥有流程任务分配的权限
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "fpZl");
			}
			if(abilityFlag){
				Integer cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				//可以修改任意操作人员(强制修改)
				cusCheckUserId = CommonTools.getFinalInteger("cusCheckUserId", request);
				tjUserId = CommonTools.getFinalInteger("tjUserId", request);
				tzsUserId = CommonTools.getFinalInteger("tzsUserId", request);
				feeUserId = CommonTools.getFinalInteger("feeUserId", request);
				bzUserId = CommonTools.getFinalInteger("bzUserId", request);
				bzshUserId = CommonTools.getFinalInteger("bzshUserId", request);
				bhUserId = CommonTools.getFinalInteger("bhUserId", request);
				checkUserId = CommonTools.getFinalInteger("checkUserId", request);
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					if(zl.getAjStopStatus().equals(0)){//案件正常状态下
						Double ajStatus = Double.parseDouble(zl.getAjStatus());//double类型
						boolean flag = false;
						if(ajStatus >= 7){//定稿提交以后---专利撰写、专利审核、客户确认、定稿提交人员不能再进行修改
							flag = zlm.updateOperatorUserInfoByZlId(zlId, -1, -1, -1,-1, 
									tzsUserId, feeUserId, bzUserId, bzshUserId, bhUserId);
						}else{
							flag = zlm.updateOperatorUserInfoByZlId(zlId, checkUserId, zxUserId, cusCheckUserId,tjUserId, 
									tzsUserId, feeUserId, bzUserId, bzshUserId, bhUserId);
						}
						if(flag){
							Integer checkUserId_db = zl.getCheckUserId();
							Integer cusCheckUserId_db = zl.getCusCheckUserId();
							Integer zxUserId_db = zl.getZxUserId();
							Integer tjUserId_db = zl.getTjUserId();
							Integer tzsUserId_db = zl.getTzsUserId();
							Integer feeUserId_db = zl.getFeeUserId();
							Integer bzUserId_db = zl.getBzUserId();
							Integer bzshUserId_db = zl.getBzUserId();
							Integer bhUserId_db = zl.getBhUserId();
							//人员移交统一归纳到2.0（人员分配中来）
							List<ZlajLcInfoTb> lcList = lcm.listLcInfoByLcMz(zl.getId(),"人员分配");
							if(lcList.size() > 0){
								ZlajLcInfoTb lc = lcList.get(0);
								Integer lcId = lc.getId();
								double currLcNo = 2.0;
								String ajTitle = lc.getZlajMainInfoTb().getAjTitle();
								//案件
								if(ajStatus < 7){//所有人员都可以分配。定稿提交以后---专利撰写、专利审核、客户确认、定稿提交人员不能再进行修改
									List<ZlajLcMxInfoTb> mxList = mxm.listFirstInfoByLcId(lcId);
									//1:撰写人
									if(zxUserId_db.equals(0)){//没有撰写人
										if(!zxUserId.equals(zxUserId_db)){//需要指定撰写人
											if(mxList.size() > 0){
												mxm.updateEdateById(mxList.get(0).getId(), zxUserId, -1, "", "", "", currDate, "操作人员主动分配",lcPjScore);
											}else{
												mxm.addLcMx(lcId, zxUserId, "撰写人员分配", currLcNo, currDate, currDate, "", 0, "", "", 0.0,"操作人员主动分配",lcPjScore);
											}
											Integer lcId_3 = lcm.addLcInfo(zlId, "新申请撰稿", "新申请撰稿", currDate, lc.getLcCpyDate(), "", "",3.0);
											mxm.addLcMx(lcId_3, zxUserId, "新申请撰稿", 3.0, currDate, "", "", 0, "", "",  0.0, "",lcPjScore);
											//领取成功后把状态修改成3.0
											zlm.updateZlStatusById(zlId, "3.0","新申请撰稿");//修改专利状态为3
											flag_final = true;//只有全部流程都分配完了才是完成
											mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zxUserId, "cpyUser", "新任务通知：专利撰写", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利撰写工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										}else{//不指定撰写人，让撰写人自行领取
											if(mxList.size() == 0){
												mxm.addLcMx(lcId, 0, "等待撰写人员领取", 2.0, currDate, "", "", 0, "", "", 0.0, "",lcPjScore);
											}
										}
									}else{//存在撰写人，需要更换撰写人
										if(!zxUserId.equals(zxUserId_db) && zxUserId > 0){//需要更换撰写人
											mxm.updateEdateById(mxList.get(0).getId(), zxUserId, -1, "", "", "", currDate, "操作人员主动分配",lcPjScore);
										}
									}
									//2:专利审核人员
									if(checkUserId_db.equals(0)){
										mxm.addLcMx(lcId, checkUserId, "技术审核人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, checkUserId, "cpyUser", "新任务通知：专利审核", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利审核工作<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
									}else{
										if(!checkUserId.equals(checkUserId_db)){
											mxm.addLcMx(lcId, checkUserId, "技术审核人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
										}
									}
									//3:客户确认人员
									if(cusCheckUserId_db.equals(0)){
										mxm.addLcMx(lcId, cusCheckUserId, "客户确认人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, checkUserId, "cpyUser", "新任务通知：客户确认", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成客户确认对接工作<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
									}else{
										if(!cusCheckUserId.equals(cusCheckUserId_db)){
											mxm.addLcMx(lcId, cusCheckUserId, "客户确认人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
										}
									}
									//4：定稿提交人员
									if(tjUserId_db.equals(0)){
										mxm.addLcMx(lcId, tjUserId, "定稿提交人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, tjUserId, "cpyUser", "新任务通知：定稿提交", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利提交工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
									}else{
										if(!tjUserId.equals(tjUserId_db)){
											mxm.addLcMx(lcId, tjUserId, "定稿提交人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
										}
									}
								}
								
								if(tzsUserId_db.equals(0)){
									mxm.addLcMx(lcId, tzsUserId, "通知书人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
									mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, tzsUserId, "cpyUser", "新任务通知：导入通知书", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成通知书导入工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
								}else{
									if(!tzsUserId.equals(tzsUserId_db)){
										mxm.addLcMx(lcId, tzsUserId, "通知书人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
									}
								}
								if(feeUserId_db.equals(0)){
									mxm.addLcMx(lcId, feeUserId, "费用催缴人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
									mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, feeUserId, "cpyUser", "新任务通知：费用催缴", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成费用催缴工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
								}else{
									if(!feeUserId.equals(feeUserId_db)){
										mxm.addLcMx(lcId, feeUserId, "费用催缴人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
									}
								}
								if(bzUserId_db.equals(0)){
									mxm.addLcMx(lcId, bzUserId, "补正人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
									mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bzUserId, "cpyUser", "新任务通知：专利补正", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利补正工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
								}else{
									if(!bzUserId.equals(bzUserId_db)){
										mxm.addLcMx(lcId, bzUserId, "补正人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
									}
								}
								if(bzshUserId_db.equals(0)){
									mxm.addLcMx(lcId, bzshUserId, "补正审核人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
									mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bzshUserId, "cpyUser", "新任务通知：补正审核", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利补正审核工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
								}else{
									if(!bzshUserId.equals(bzshUserId_db)){
										mxm.addLcMx(lcId, bzshUserId, "补正审核人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
									}
								}
								if(bhUserId_db.equals(0)){
									mxm.addLcMx(lcId, bhUserId, "驳回人员分配", 2.0, currDate, currDate, "", 0, "", "",  0.0, "",lcPjScore);
									mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, bhUserId, "cpyUser", "新任务通知：专利驳回", "专利["+ajTitle+"]已发布，请您随时关注专利进度!完成专利驳回任务工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
								}else{
									if(!bhUserId.equals(bhUserId_db)){
										mxm.addLcMx(lcId, bhUserId, "驳回人员修改", currLcNo, currDate, currDate, "", 0, "", "",  0.0, "操作人员修改",lcPjScore);
									}
								}
								//如果人员都分配了，修改人员分配流程完成
								if(flag_final){
									lcm.updateComInfoById(lcId, currDate);
								}
								msg = "success";
							}
						}
					}else{
						msg = "stopInfo";//案件在终止状态下不能进行修改
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前的案件号（增加时前台显示--参考，解决可能出现几个人在同时增加就会出现问题）
	 * 用在专利类型的选中动作时间上，同时也用在领取的专利任务选中上
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-26 下午10:10:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrAjNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		Integer cpyId = 0;
		String currNextAjNo = "";
		String msg = "error";
		String nextNumStr = "";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
			String currYear = CurrentTime.getYear();
			String ajType = CommonTools.getFinalStr("ajType", request);
			if(cpyId > 0 && !ajType.equals("")){
				List<ZlajMainInfoTb> zlList = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
				String varCon = "";
				if(ajType.equals("fm")){
					varCon = "01";
				}else if(ajType.equals("syxx")){
					varCon = "02";
				}else if(ajType.equals("wg")){
					varCon = "03";
				}
				msg = "success";
				if(zlList.size() > 0){
					String ajNo = zlList.get(0).getAjNo();//20180100011--201802
					String str1 = ajNo.substring(0,6);
					String str2 = ajNo.substring(6, 10);
					Integer nextNum = Integer.parseInt(str2) + 1;
					if(nextNum > 1000){
						nextNumStr = nextNum + "";
					}else if(nextNum > 100){
						nextNumStr = "0" + nextNum;
					}else if(nextNum > 10){
						nextNumStr = "00" + nextNum;
					}else if(nextNum > 1){
						nextNumStr = "000" + nextNum;
					}
					currNextAjNo = str1 + nextNumStr + "." + cpyId;
				}else{
					currNextAjNo = currYear + varCon + "0001" + "." + cpyId;
				}
				map.put("currNextAjNo", currNextAjNo);
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加专利
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-26 下午09:14:12
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addZlData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		Integer cpyId = 0;
		String nextNumStr = "";
		String ajNoQt = "";
		String ajNo = "";
		String msg = "error";
		Integer currLoginUserId = this.getLoginUserId(request);
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			boolean abilityFlag = false;
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "addZl");
			}
			if(abilityFlag){
				cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				//获取当前的案例号--实时
				String currYear = CurrentTime.getYear();
				String ajType = CommonTools.getFinalStr("ajType", request);
				Integer pubZlId = CommonTools.getFinalInteger("pubZlId", request);//发布专利任务的编号
				//当案件类型是发明+新型时，就不会有发布专利编号
				if(ajType.equals("fmxx")){
					if(pubZlId > 0){
						msg = "typeDiff";//专利类型不一致
					}else{
						msg = "success";
					}
				}else{
					if(pubZlId > 0){
						//判断传递的类型和领取的专利任务类型必须一致
						List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt_1(cpyId, pubZlId);
						if(pubList.size() > 0){
							if(pubList.get(0).getZlType().equals(ajType)){
								if(pubList.get(0).getAjId().equals(0)){//已领取未增加的才正确
									msg = "success";
								}else{
									msg = "addError";//该专利任务已被其他专利占用
								}
							}else{
								msg = "typeDiff";//专利类型不一致
							}
						}
					}else{
						msg = "success";
					}
				}
				
				if(msg.equals("success")){
					String varCon = "";
					if(!ajType.equals("")){
						if(ajType.equals("fmxx")){
							ajType = "fm,syxx";
						}
						String[] ajTypeArr = ajType.split(",");
						for(Integer i = 0 ; i < ajTypeArr.length ; i++){
							ajType = ajTypeArr[i];
							if(cpyId > 0 && !ajType.equals("")){
								if(ajType.equals("fm")){
									varCon = "01";
								}else if(ajType.equals("syxx")){
									varCon = "02";
								}else if(ajType.equals("wg")){
									varCon = "03";
								}
								List<ZlajMainInfoTb> zlList = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
								if(zlList.size() > 0){
									String ajNo_prev = zlList.get(0).getAjNo();//20180100011--201802
									String str1 = ajNo_prev.substring(0,6);
									String str2 = ajNo_prev.substring(6, 10);
									Integer nextNum = Integer.parseInt(str2) + 1;
									if(nextNum > 1000){
										nextNumStr = nextNum + "";
									}else if(nextNum > 100){
										nextNumStr = "0" + nextNum;
									}else if(nextNum > 10){
										nextNumStr = "00" + nextNum;
									}else if(nextNum > 1){
										nextNumStr = "000" + nextNum;
									}
									ajNoQt = str1 + nextNumStr + "." + cpyId;
									ajNo =  str1 + nextNumStr + cpyId;
								}else{
									ajNoQt = currYear + varCon + "0001" + "." + cpyId;
									ajNo = currYear + varCon + "0001" + cpyId;
								}
								
								String zlNoGf = "";
								String ajTitle = Transcode.unescape_new("ajTitle", request);
								String ajFieldId = CommonTools.getFinalStr("ajFieldId", request);
								String ajSqrId  = CommonTools.getFinalStr("ajSqrId", request);
								String ajSqrName = Transcode.unescape_new1("ajSqrName", request);
								String ajFmrId  = CommonTools.getFinalStr("ajFmrId", request);
								String ajLxrId = CommonTools.getFinalStr("ajLxrId", request);
								String jsLxrId = CommonTools.getFinalStr("jsLxrId", request);
								String ajSqAddress = Transcode.unescape_new("ajSqAddress", request);
								String yxqDetail = CommonTools.getFinalStr("yxqDetail", request);
								String ajUpload = CommonTools.getFinalStr("ajUpload", request);
								
								String ajRemark =  Transcode.unescape_new("ajRemark", request);
								String ajEwyqId = CommonTools.getFinalStr("ajEwyqId", request);
								String cpyDate = CommonTools.getFinalStr("cpyDate", request);//内部期限(前期资料提交完成时间)
								String sDate = CurrentTime.getStringDate();//开始日期
								Double ajFjInfo = CommonTools.getFinalDouble("ajFjInfo", request);//费减（当受理通知书丢失的时候可以手动增加，最好是导入受理通知书）
								if(!ajSqrId.equals("")){//费减只有在申请人存在的时候才能进行设置
									ajFjInfo = CommonTools.getFinalDouble("ajFjInfo", request);
								}
								String ajApplyDate = "";
								Integer zlId = zlm.addZL(ajNo, ajNoQt, zlNoGf, ajTitle, ajType, ajFieldId, ajSqrId, ajSqrName,ajFmrId, ajLxrId, jsLxrId,ajFjInfo,ajSqAddress, 
										yxqDetail, ajUpload, ajRemark, ajEwyqId, ajApplyDate, "2.0", "流程人员分配", pubZlId,0,0,0,0,0,0,0,0,0,cpyId,currLoginUserId);
								if(zlId > 0){
									if(pubZlId > 0){
										pzm.updateAjIdById(pubZlId, zlId);
									}
									//增加流程
									Integer lcId_1 = lcm.addLcInfo(zlId, "专利案件录入", "专利案件录入", sDate, cpyDate, sDate, "",1.0);
									if(lcId_1 > 0){
										Integer lcMxId = mxm.addLcMx(lcId_1, currLoginUserId, "专利案件录入", 1.0, sDate, sDate, ajUpload, pubZlId, sDate, "",  0.0, ajRemark,-1);
										//移动上传文件
										if(!ajUpload.equals("")){
											//将u_currLoginUserId里面的文件复制到cpyUser/zlId/dg下面
											String[] upFileArr = ajUpload.split(",");
											String newPath =  WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\cpyUser\\" + zlId + "\\dg";
											File file = new File(newPath);
											if(!file.exists()){
								    			file.mkdirs();
								    		}
											String newPath_db = "";
											String path_pre =  "cpyUser\\" + zlId + "\\dg\\";
											for(Integer j = 0 ; j < upFileArr.length ; j++){
												String oldPath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" +upFileArr[j];
												String fileName = upFileArr[j].substring((upFileArr[j].lastIndexOf("\\") + 1));
												String newPathFinal = newPath + "\\" + fileName;
												newPath_db +=  path_pre + fileName + ",";
												FileOpration.copyFile(oldPath, newPathFinal);
												
												//增加附件记录
												Integer lastIndex = fileName.lastIndexOf("_");
												String lastFjName = fileName.substring(lastIndex+1, fileName.length());
												Integer lastIndex_1 = lastFjName.indexOf(".");
												String fjVersion = lastFjName.substring(0, lastIndex_1);
												String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
												fjm.addFj(zlId, path_pre + fileName, fjVersion, "技术底稿文件", fjGs, FileOpration.getFileSize(newPathFinal), currLoginUserId, sDate);
											}
											//修改上传附件的真实路径
											if(!newPath_db.equals("")){
												newPath_db = newPath_db.substring(0, newPath_db.length() - 1);
												//修改专利底稿位置
												zlm.updateZlUpFile_dg(zlId, newPath_db);
												mxm.updateEdateById(lcMxId, -1, -1, newPath_db, "", "", "", "",-1);
											}
										}
										
										//增加专利撰写流程
										lcm.addLcInfo(zlId, "人员分配", "人员分配", sDate, cpyDate, "", "",2.0);
										//当流程为2.0时，且存在人员分配流程，但是没有流程明细的时候--说明是需要流程分配人员进行流程分配
									}
									msg = "success";
								}
							}
						}
						//删除临时上传的文件夹里面的所有文件
						FileOpration.deleteAllFile(WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\cpyUser\\u_" + currLoginUserId);
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定专利的终止状态信息
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-8-27 下午09:49:04
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateStopStatusInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String stopUser = "";
		String stopDate = "";
		String stopUserType = "";
		Integer stopStatus = 0;
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "stopZl");//只有具有创建专利权限和管理员才有资格修改专利状态
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				if(zlId > 0){
					CpyUserInfo user = cum.getEntityById(this.getLoginUserId(request));
					if(user != null){
						stopStatus = CommonTools.getFinalInteger("stopStatus", request);
						if(stopStatus.equals(1)){
							stopUser = user.getUserName();
							stopDate = CurrentTime.getCurrentTime();
							stopUserType = this.getLoginType(request);
						}
						boolean flag = zlm.updateStopStatusById(zlId, stopStatus, stopDate, stopUser, stopUserType);
						if(flag){
							msg = "success";
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改专利基本信息(案件定稿提交前才能修改案件基本信息)
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-13 下午09:44:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateZlBasicInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		PubZlInfoManager pzm = (PubZlInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PUB_ZL_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		Integer currUserId = this.getLoginUserId(request);
		String ajNoQt = "",ajNo = "";
		Integer pubId = CommonTools.getFinalInteger("pubZlId", request);
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "upZl");
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					String ajTitle = Transcode.unescape_new("ajTitle", request);
					String ajType = CommonTools.getFinalStr("ajType", request);
					//在专利定稿提交前且专利状态正常下可以进行专利基本信息修改
					if(Double.parseDouble(zl.getAjStatus()) < 7 && zl.getAjStopStatus().equals(0)){
						String varCon = "",nextNumStr = "";
						String currYear = CurrentTime.getYear();
						Integer pubId_base = zl.getPubZlId();//原先关联的专利任务
						if(!zl.getAjType().equals(ajType)){//类型变化，案件编号就需要变
							if(pubId > 0){//传递的有专利任务编号
								List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
								if(pubList.size() > 0){
									PubZlInfoTb pub = pubList.get(0);
									//首先判断原来有没有关联专利任务
									if(pubId_base > 0){//原来存在专利任务编号
										if(!pubId_base.equals(pubId)){//专利任务关联发生编号
											if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
												if(pub.getAjId().equals(0)){//新变更的专利任务没有被占用
													//这时需要修改专利任务中的案件编号
													//1:归0原来的专利任务中的案件编号
													pzm.updateAjIdById(pubId_base, 0);
													//2:修改新的专利任务中的案件编号
													pzm.updateAjIdById(pubId, zlId);
													msg = "success";
												}else{
													msg = "addError";//新变更的专利任务已被别的专利占用
												}
											}else{
												msg = "typeDiff";//选择的专利类型和专利任务类型不一致
											}
										}else{//专利任务未发生变化（不可能出现这种情况--因为专利类型已经发生变化）
											
										}
									}else{//原来不存在专利任务,新绑定的了专利任务
										if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
											if(pub.getAjId().equals(0)){//新变更的专利任务没有被占用
												pzm.updateAjIdById(pubId, zlId);
												msg = "success";
											}else{
												msg = "addError";//新变更的专利任务已被别的专利占用
											}
										}else{
											msg = "typeDiff";//选择的专利类型和专利任务类型不一致
										}
									}
								}	
							}else{//没有关联专利任务
								//需要查看原先有无关联专利任务
								if(pubId_base > 0){//原来存在专利任务编号
									pzm.updateAjIdById(pubId_base, 0);
								}
								msg = "success";
							}	
							if(msg.equals("success")){////专利类型发生变化，需要重新获取专利号
								if(ajType.equals("fm")){
									varCon = "01";
								}else if(ajType.equals("syxx")){
									varCon = "02";
								}else if(ajType.equals("wg")){
									varCon = "03";
								}
								List<ZlajMainInfoTb> zlList_1 = zlm.listFirstInfoByOpt(cpyId,ajType,currYear);
								if(zlList_1.size() > 0){
									String ajNo_prev = zlList_1.get(0).getAjNo();//20180100011--201802
									String str1 = ajNo_prev.substring(0,6);
									String str2 = ajNo_prev.substring(6, 10);
									Integer nextNum = Integer.parseInt(str2) + 1;
									if(nextNum > 1000){
										nextNumStr = nextNum + "";
									}else if(nextNum > 100){
										nextNumStr = "0" + nextNum;
									}else if(nextNum > 10){
										nextNumStr = "00" + nextNum;
									}else if(nextNum > 1){
										nextNumStr = "000" + nextNum;
									}
									ajNoQt = str1 + nextNumStr + "." + cpyId;
									ajNo =  str1 + nextNumStr + cpyId;
								}else{
									ajNoQt = currYear + varCon + "0001" + "." + cpyId;
								}
							}
						}else{//类型没变，案件编号就不需要变化，需要判断专利任务有无发生变化
							//首先判断原来有没有关联专利任务
							if(pubId_base > 0){//原来存在专利任务编号
								if(pubId > 0){//传递有专利任务编号
									List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
									if(pubList.size() > 0){
										PubZlInfoTb pub = pubList.get(0);
										if(!pubId_base.equals(pubId)){//专利任务关联发生变化
											if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
												if(pub.getAjId().equals(0)){//新变更的专利任务没有被占用
													//这时需要修改专利任务中的案件编号
													//1:归0原来的专利任务中的案件编号
													pzm.updateAjIdById(pubId_base, 0);
													//2:修改新的专利任务中的案件编号
													pzm.updateAjIdById(pubId, zlId);
													msg = "success";
												}else{
													msg = "addError";//新变更的专利任务已被别的专利占用
												}
											}else{
												msg = "typeDiff";//选择的专利类型和专利任务类型不一致
											}
										}else{//专利任务未发生变化（不可能出现这种情况--因为专利类型已经发生变化）
											msg = "success";
										}
									}
								}else{//没有绑定专利任务
									pzm.updateAjIdById(pubId_base, 0);
									msg = "success";
								}
							}else{//原来不存在专利任务
								if(pubId > 0){//新绑定的了专利任务
									List<PubZlInfoTb> pubList = pzm.listSpecInfoByOpt(pubId, 0);
									if(pubList.size() > 0){
										PubZlInfoTb pub = pubList.get(0);
										if(pub.getZlType().equals(ajType)){//新变动的专利任务类型和选择的专利类型一致
											if(pub.getAjId().equals(0)){//新变更的专利任务没有被占用
												pzm.updateAjIdById(pubId, zlId);
												msg = "success";
											}else{
												msg = "addError";//新变更的专利任务已被别的专利占用
											}
										}else{
											msg = "typeDiff";//选择的专利类型和专利任务类型不一致
										}
									}		
								}else{//没有绑定专利任务
									msg = "success";
								}
							}
						}
					}else{
						msg = "notUpdate";//定稿以后或是专利状态终止的条件下不能修改
					}

					if(msg.equals("success")){
						String ajFieldId = CommonTools.getFinalStr("ajFieldId", request);
						String ajSqrId  = CommonTools.getFinalStr("ajSqrId", request);
						String ajSqrName = Transcode.unescape_new1("ajSqrName", request);
						String ajFmrId  = CommonTools.getFinalStr("ajFmrId", request);
						String ajLxrId = CommonTools.getFinalStr("ajLxrId", request);
						String jsLxrId = CommonTools.getFinalStr("jsLxrId", request);
						String ajSqAddress = Transcode.unescape_new("ajSqAddress", request);
						String yxqDetail = CommonTools.getFinalStr("yxqDetail", request);
						String ajUpload = CommonTools.getFinalStr("ajUpload", request);
						String ajRemark = Transcode.unescape_new("ajRemark", request);
						String ajEwyqId = CommonTools.getFinalStr("ajEwyqId", request);
						String cpyDate = CommonTools.getFinalStr("cpyDate", request);//代理机构从分配到定稿提交的期限(修改定稿提交之前的最后一个未完成流程的期限)
						Double ajFjInfo = 0.0;
						if(!ajSqrId.equals("")){//案件费减只有在申请人存在的条件下才能进行设置（一般情况下不建议修改，需要通过受理通知书自动修改）
							ajFjInfo = CommonTools.getFinalDouble("ajFjInfo", request);
						}
						Integer upUserId = -1;
						String upFileDate = "";
						if(!ajUpload.equals(zl.getAjUpload())){//上传资料发生变化
							upUserId = currUserId;
							upFileDate = CurrentTime.getStringDate();
						}
						zlm.updateBasicInfoById(zlId, ajTitle, ajNo, ajNoQt, pubId, ajSqAddress, ajType, ajFieldId, ajSqrId, ajSqrName,ajFmrId, ajLxrId, jsLxrId,ajFjInfo,yxqDetail, ajUpload, ajRemark, ajEwyqId, "", 0);
						List<ZlajLcMxInfoTb> mxList = mxm.listSpecInfoInfoByOpt(zlId, "专利案件录入");
						if(mxList.size() > 0){
							ZlajLcMxInfoTb mx = mxList.get(0);
							mxm.updateEdateById(mx.getId(), -1, upUserId, ajUpload, upFileDate, "", upFileDate, "",-1);
							String ajUpload_db = zlList.get(0).getAjUpload();
							if(!ajUpload.equals(ajUpload_db)){
								if(!ajUpload_db.equals("")){
									//删除之前的附件记录
									List<ZlajFjInfoTb> fjList = fjm.listSpecInfoByOpt(zlId, "技术底稿文件",false,"");
									String ajIdStr_del = "";
									for(Iterator<ZlajFjInfoTb> it = fjList.iterator() ; it.hasNext();){
										ZlajFjInfoTb fj = it.next();
										ajIdStr_del += fj.getId() + ",";
									}
									if(!ajIdStr_del.equals("")){
										ajIdStr_del = ajIdStr_del.substring(0, ajIdStr_del.length() - 1);
									}
									fjm.delBatchFjInfo(ajIdStr_del);
								}
								//增加新的附件记录
								if(!ajUpload.equals("")){
									String[] ajUploadArr = ajUpload.split(",");
									String filePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\";
									for(Integer i = 0 ; i < ajUploadArr.length ; i++){
										String fileName = ajUploadArr[i].substring((ajUploadArr[i].lastIndexOf("\\") + 1));
										Integer lastIndex = fileName.lastIndexOf("_");
										String lastFjName = fileName.substring(lastIndex+1, fileName.length());
										Integer lastIndex_1 = lastFjName.indexOf(".");
										String fjVersion = lastFjName.substring(0, lastIndex_1);
										String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
										fjm.addFj(zlId, ajUploadArr[i], fjVersion, "技术底稿文件", fjGs, FileOpration.getFileSize(filePath + ajUploadArr[i]), upUserId, upFileDate);
									}
								}
								//修改案件的案件附件
								zlm.updateZlUpFile_dg(zlId, ajUpload);
							}
							String cpyDate_db = mx.getZlajLcInfoTb().getLcCpyDate();
							if(!cpyDate.equals(cpyDate_db)){//如果期限被修改
								if(mx.getLcMxNo() <= 6.0){//定稿提交之前都可以修改代理机构期限时间
									//获取定稿提交之前的最后一个未完成的流程
									List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
									if(lcList.size() > 0){
										//修改代理机构期限时间
										lcm.updateLcBasicInfoById(lcList.get(0).getId(), "", "", "", cpyDate, "");
									}
								}
							}
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 抢购专利撰写任务
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-13 下午09:45:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward lqZlTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(this.getLoginRoleName(request).equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "lqZl");//只有修改权限的员工才能领取任务
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);
				Integer currUserId = this.getLoginUserId(request);
				CpyUserInfo user = cum.getEntityById(currUserId);
				if(user != null && zlId > 0){
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						//只有在案件状态正常时（0）、案件状态（2.0）、案件撰写人（0）、流程期限未到（cpyDate）并且在相关人员设置了其他流程人员年后才能领取
						if(zl.getAjStopStatus().equals(0)){
							if(zl.getAjStatus().equals("2.0") && zl.getZxUserId().equals(0)){
								List<ZlajLcMxInfoTb> mxList = mxm.listSpecInfoInfoByOpt(zlId, "等待撰写人员领取");
								if(mxList.size() > 0){
									ZlajLcMxInfoTb lcmx = mxList.get(0);
									ZlajLcInfoTb lc = lcmx.getZlajLcInfoTb();
									Integer diffDays = CurrentTime.compareDate(currDate,lc.getLcCpyDate());
									if(diffDays > 0){//可以领取
										mxm.updateEdateById(lcmx.getId(), currUserId, -1, "", "", "", currDate, "撰写任务已被领取",-1);
										//修改任务分配流程为完成状态
										lcm.updateComInfoById(lc.getId(), currDate);
										zlm.updateOperatorUserInfoByZlId(zlId,-1,currUserId,-1,-1,-1,-1,-1,-1,-1);
										Integer lcId_3 = lcm.addLcInfo(zlId, "新申请撰稿", "新申请撰稿", currDate, lc.getLcCpyDate(), "", "",3.0);
										mxm.addLcMx(lcId_3, currUserId, "新申请撰稿", 3.0, currDate, "", "", 0, "", "",  0.0, "",-1);
										//领取成功后把状态修改成3.0
										zlm.updateZlStatusById(zlId, "3.0","新申请撰稿");//修改专利状态为3
										//给当前撰写人发送邮件
										mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, currUserId, "cpyUser", "新任务通知：专利撰写", "您已成功领取专利["+lc.getZlajMainInfoTb().getAjTitle()+"]任务，请您于["+lc.getLcCpyDate()+"]之前完成专利撰写工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
										msg = "success";
									}else{
										msg = "outDate";//期限已过，不能领取
									}
								}
							}else{
								msg = "noReceive";//该流程任务已被其他员工领取
							}
						}else{
							msg = "stopStatus";//案件已终止，不能进行流程任务领取
						}
					}
				}
			}else{
				msg = "noAbility";
			}
		}

		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前未完成任务流程环节的负责人是否和当前用户一致
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-18 下午10:12:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrLcFzrInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			Integer zlId = CommonTools.getFinalInteger("zlId", request);
			Integer currUserId = this.getLoginUserId(request);
			CpyUserInfo user = cum.getEntityById(currUserId);
			if(user != null && zlId > 0){
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					//只有在案件状态正常时（0）
					if(zl.getAjStopStatus().equals(0)){
						//获取当前最后一个未完成的流程
						List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
						if(lcList.size() > 0){
							List<ZlajLcMxInfoTb> mxList = mxm.listLastInfoByLcId(lcList.get(0).getId());
							if(mxList.size() > 0){
								ZlajLcMxInfoTb lcmx = mxList.get(0);
								if(lcmx.getLcMxEDate().equals("")){
									if(currUserId.equals(lcmx.getLcFzUserId())){
										msg = "success";
									}else{
										if(this.getLoginRoleName(request).equals("管理员")){//管理员可以操作任何环节
											msg = "success";
										}
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取当前流程号（定稿提交时会多余出现申请人信息、发明人信息、费减）
	 * @description
	 * @author Administrator
	 * @date 2018-9-20 上午10:17:04
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrLcNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		CustomerInfoManager cm = (CustomerInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CUSTOMER_INFO);
		String ajStatus = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getLoginType(request).equals("cpyUser")){
			Integer zlId = CommonTools.getFinalInteger("zlId", request);
			Integer cpyId = cum.getEntityById(this.getLoginUserId(request)).getCpyInfoTb().getId();
			List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, cpyId);
			if(zlList.size() > 0){
				ZlajMainInfoTb zl = zlList.get(0);
				//只有在案件状态正常时（0）
				if(zl.getAjStopStatus().equals(0)){
					ajStatus = zl.getAjStatus();
					if(ajStatus.equals("6.0")){//到了案件提交环节
						String sqrName = zl.getAjSqrName();//可以是公司也可以是个人
						String sqrId = zl.getAjSqrId();
						map.put("sqrName", sqrName);//申请人信息
						map.put("sqrId", sqrId);//申请人信息
						String fmrId = zl.getAjFmrId();
	 					String fmrName = "";
	 					if(!fmrId.equals("")){
	 						String[] fmrIdArr = fmrId.split(",");
	 						for(Integer i = 0 ; i < fmrIdArr.length ; i++){
	 							List<CustomerFmrInfoTb> cList = cm.listFmrInfoByFmrId(Integer.parseInt(fmrIdArr[i]), cpyId);
	 							if(cList.size() > 0){
	 								fmrName += cList.get(0).getCusFmrName() + ",";
	 							}
	 						}
	 						if(!fmrName.equals("")){
	 							fmrName = fmrName.substring(0, fmrName.length() - 1);
	 						}
	 					}
						map.put("fmrName", fmrName);//发明人信息
						map.put("fmrId", fmrId);//发明人信息
						String lxrId = zl.getAjLxrId();
	 					String lxrName = "";
	 					if(!lxrId.equals("")){
	 						String[] lxrIdArr = lxrId.split(",");
	 						for(Integer j = 0 ; j < lxrIdArr.length ; j++){
	 							List<CustomerLxrInfoTb> clList = cm.listLxrInfoByCusId(Integer.parseInt(lxrIdArr[j]), cpyId);
	 							if(clList.size() > 0){
	 								lxrName += clList.get(0).getCusLxrName() + ",";
	 							}
	 						}
	 						if(!lxrName.equals("")){
	 							lxrName = lxrName.substring(0, lxrName.length() - 1);
	 						}
	 					}
	 					map.put("lxrName", lxrName);//发明人信息
						map.put("lxrId", lxrId);//发明人信息
						map.put("ajFjInfo", String.valueOf(zl.getAjFjInfo()));
					}
				}else{
					ajStatus = "stop";//案件已终止，不能获取
				}
			}
		}else{
			ajStatus = "noAbility";//只让代理机构内部查看
		}
		map.put("result", ajStatus);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定专利的目前流程任务（定稿提交之前）
	 * @description
	 * @author Administrator
	 * @date 2018-11-9 上午10:01:47
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLcTaskDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		boolean abilityFlag = false;
		String roleName = this.getLoginRoleName(request);
		Integer currUserId = this.getLoginUserId(request);
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		String filePath = "";//附件
		String upUser = "";//上传人
		String fileName = "";//附件名称
		String fileType = "";//附件类型
		String remark = "";//备注或者审核意见
		String msg = "error";
		if(this.getLoginType(request).equals("cpyUser")){
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "dealZl");//专利流程处理
			}
		}
//		else if(this.getLoginType(request).equals("appUser")){//只有自己发布的
//			List<ZlajMainInfoTb> zlList_1 = zlm.listSpecInfoById(zlId,0);
//			if(zlList_1.size() > 0){
//				if(zlList_1.get(0).getPubZlId().equals(currUserId)){//客户只能查看自己的（增加专利时如果没有选择已领取的专利列表，这时的发布人就是默认第一个申请人）
//					abilityFlag = true;
//				}
//			}
//		}
		if(abilityFlag){
			//获取当前流程号
			CpyUserInfo user = cum.getEntityById(currUserId);
			if(user != null && zlId > 0){
				List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
				if(zlList.size() > 0){
					ZlajMainInfoTb zl = zlList.get(0);
					if(zl.getAjStopStatus().equals(0)){//只有在案件状态正常时（0）
						//获取当前最后一个未完成的流程
						List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
						if(lcList.size() > 0){
							List<ZlajLcMxInfoTb> mxList = mxm.listLastInfoByLcId(lcList.get(0).getId());
							if(mxList.size() > 0){
								ZlajLcMxInfoTb lcmx = mxList.get(0);
								double lcNo = lcmx.getLcMxNo();//流程号
								if(lcNo >= 3.0 && lcNo < 4.0){//案件撰写/案件补正
									if(lcNo == 3.0){//第一次撰稿
										//获取业务人员提供的技术底稿和专利备注
										filePath = zl.getAjUpload();
										remark = zl.getAjRemark();//第一次撰写时为专利备注
										fileType = "技术底稿";
										upUser = cum.getEntityById(zl.getAjAddUserId()).getUserName();
									}else{//补正时
										String zlStatusChi = zl.getAjStatusChi();//获取当前专利任务名称
										if(zlStatusChi.equals("撰稿修改-技术审核")){
											//说明是技术审核没通过
											//获取撰写人员最后一次提交的撰稿文件
											String mxName = "新申请撰稿";
											if(lcNo > 3.1){//不是第一次被审核人员否定
												mxName = "撰稿修改";
											}
											List<ZlajLcMxInfoTb> mxList_t1 = mxm.listSpecInfoInfoByOpt(zlId, mxName);
											Integer mxLen_1 = mxList_t1.size();
											ZlajLcMxInfoTb mx_1 = null;
											if(mxLen_1 > 0){
												if(mxLen_1.equals(1)){
													mx_1 = mxList_t1.get(0);
												}else{//存在多个
													mx_1 = mxList_t1.get(mxLen_1 - 2);//因为最近一次的还没有完成
												}
												filePath = mx_1.getLcMxUpFile();
												fileType = "撰稿文件";
												upUser = cum.getEntityById(mx_1.getLcMxUpUserId()).getUserName();//撰稿文件的上传人
												
												//获取最后一次的专利审核的附件和审核意见
												List<ZlajLcMxInfoTb> mxList_t = mxm.listSpecInfoInfoByOpt(zlId, "专利审核");
												Integer mxLen = mxList_t.size();
												ZlajLcMxInfoTb mx = mxList_t.get(mxLen - 1);
												//审核人员上传的审核文件
												String filePath_sc = mx.getLcMxUpFile();
												
												if(!filePath_sc.equals("")){
													filePath += ":" + filePath_sc;
													fileType += ":审核文件";
													CpyUserInfo cUser = cum.getEntityById(mx.getLcMxUpUserId());
													if(cUser != null){
														upUser += ":" + cUser.getUserName();
													}
												}
												remark = mx.getLcMxRemark();//上一次技术审核的意见
											}
										}else if(zlStatusChi.equals("撰稿修改-客户确认")){
											//说明是客户确认没通过
											//获取撰写人员最后一次提交的撰稿文件
											List<ZlajLcMxInfoTb> mxList_t = mxm.listSpecInfoInfoByOpt(zlId, "撰稿修改");
											Integer mxLen = mxList_t.size();
											if(mxLen > 0){
												if(mxLen >= 2){
													mxLen -= 1;
												}
											}else{//说明没有撰稿修改文件，可能是撰写人员一次性通过
												mxList_t = mxm.listSpecInfoInfoByOpt(zlId, "新申请撰稿");
												mxLen = mxList_t.size();
											}
											ZlajLcMxInfoTb mx = mxList_t.get(mxLen - 1);
											String filePath_curr = mx.getLcMxUpFile();
											if(!filePath_curr.equals("")){
												fileType = "撰稿文件";
												CpyUserInfo cUser = cum.getEntityById(mx.getLcMxUpUserId());
												upUser = cUser.getUserName();//撰稿文件的上传人
												filePath = filePath_curr;
											}
											//获取最后一次客户提交的和审核意见
											List<ZlajLcMxInfoTb> mxList_t1 = mxm.listSpecInfoInfoByOpt(zlId, "客户确认");
											Integer mxLen_1 = mxList_t1.size();
											ZlajLcMxInfoTb mx_1 = mxList_t1.get(mxLen_1 - 1);
											String filePath_curr_1 = mx_1.getLcMxUpFile();
											if(!filePath_curr_1.equals("")){
												CpyUserInfo cUser = cum.getEntityById(mx_1.getLcMxUpUserId());
												if(cUser != null){
													upUser += ":" + cUser.getUserName();
												}
												fileType += ":客户补充文件";
												filePath += ":" + filePath_curr_1;
											}
											remark = mx_1.getLcMxRemark();//上一次技术审核的意见
										}
										
									}
								}else if(lcNo >= 4.0 && lcNo < 5.0){//案件技术审核
									//获取撰稿人员最近一次提交的撰稿文件，不存在备注
									String mxName = "新申请撰稿";//第一次技术审核
									if(lcNo > 4.0){
										mxName = "撰稿修改";
									}
									List<ZlajLcMxInfoTb> mxList_t = mxm.listSpecInfoInfoByOpt(zlId, mxName);
									Integer mxLen = mxList_t.size();
									if(mxLen > 0){
										ZlajLcMxInfoTb mx = mxList_t.get(mxLen - 1);//获取最近一次的撰稿修改
										filePath = mx.getLcMxUpFile();
										if(!filePath.equals("")){
											fileType = "撰稿文件";
											CpyUserInfo cUser = cum.getEntityById(mx.getLcMxUpUserId());
											if(cUser != null){
												upUser = cUser.getUserName();
											}
										}
									}
									//获取是因为客户确认没通过还是因为技术审核没通过
									if(lcNo >= 4.1){//第二次审核
										Integer mxId_sh = 0;//技术审核ID
										Integer mxId_cus = 0;//客户确认ID
										List<ZlajLcMxInfoTb> mxList_t1 = mxm.listSpecInfoInfoByOpt(zlId, "专利审核");
										Integer mxLen1 = mxList_t1.size();
										ZlajLcMxInfoTb mx_sh = null;
										ZlajLcMxInfoTb mx_cus = null;
										if(mxLen1 > 0){
											mx_sh = mxList_t1.get(mxLen1 - 2);//获取最近一次的撰稿修改（因为在撰写人提交后会多出一个专利审核流程-未完成【所以减2】）
											mxId_sh = mx_sh.getId();
										}
										List<ZlajLcMxInfoTb> mxList_cus = mxm.listSpecInfoInfoByOpt(zlId, "客户确认");
										Integer mxLen_cus = mxList_cus.size();
										if(mxLen_cus > 0){//存在客户确认时上传的文件
											mx_cus = mxList_cus.get(mxLen_cus - 1);
											mxId_cus = mx_cus.getId();
										}
										if(mxId_sh > mxId_cus){//是因为技术审核没通过
											//做这里-明天
											if(mx_sh != null){
												String filePath_sh = mx_sh.getLcMxUpFile();
												remark = mx_sh.getLcMxRemark();//上一次技术审核的意见
												if(!filePath_sh.equals("")){
													filePath += ":" + filePath_sh;
													fileType += ":审核文件";
													CpyUserInfo cUser = cum.getEntityById(mx_sh.getLcMxUpUserId());
													if(cUser != null){
														upUser += ":" + cUser.getUserName();
													}
												}
											}
										}else{//因为客户确认没通过
											if(mx_cus != null){
												String filePath_cus = mx_cus.getLcMxUpFile();
												if(!filePath_cus.equals("")){
													filePath += ":" + filePath_cus;
													upUser += ":" + cum.getEntityById(mx_cus.getLcMxUpUserId()).getUserName();
													fileType += ":" + "客户补充文件";
												}
												remark = mx_cus.getLcMxRemark();//上一次客户确认的意见
											}
										}
									}
								}else if(lcNo >= 5.0 && lcNo <= 6.0){//客户确认、定稿提交
									//客户确认和定稿提交的时候--获取的是最后一次撰写人提交的撰稿文件（可能是新申请撰稿文件，也可能是撰稿修改文件）--不存在备注
									List<ZlajLcMxInfoTb> mxList_t = mxm.listSpecInfoInfoByOpt(zlId, "撰稿修改");
									Integer mxLen = mxList_t.size();
									if(mxLen == 0){//不能存在撰稿修改，说明撰写人一次性通过
										mxList_t = mxm.listSpecInfoInfoByOpt(zlId, "新申请撰稿");
										mxLen = mxList_t.size();
									}
									ZlajLcMxInfoTb mx = mxList_t.get(mxLen - 1);//获取最近一次的撰稿修改
									filePath = mx.getLcMxUpFile();
									if(!filePath.equals("")){
										fileType = "撰稿文件";
										CpyUserInfo cUser = cum.getEntityById(mx.getLcMxUpUserId());
										if(cUser != null){
											upUser = cUser.getUserName();
										}
									}
									//定稿提交的时候可能会出现客户的变更信息-可能会出现在附件中，也可能会出现在remark中
									//定稿提交时还可能出现客户需要变更的信息（变更联系人。。。。），客户通过
									//客户确认不通过时获取上一次的客户确认信息
									List<ZlajLcMxInfoTb> mxList_t1 = mxm.listSpecInfoInfoByOpt(zlId, "客户确认");
									Integer mxLen_1 = mxList_t1.size();
									if(mxLen_1 > 0){//存在客户确认时上传的文件
										ZlajLcMxInfoTb mx_1 = null;
										if(lcNo == 6.0){//定稿提交
											mx_1 = mxList_t1.get(mxLen_1 - 1);//获取最近一次的客户确认
										}else{//客户确认
											if(mxLen_1 > 1){//存在不止一次的客户确认
												mx_1 = mxList_t1.get(mxLen_1 - 2);
											}else{
												mx_1 = mxList_t1.get(mxLen_1 - 1);
											}
										}
										String filePath_cus = mx_1.getLcMxUpFile();
										if(!filePath_cus.equals("")){
											filePath += ":" + filePath_cus;
											upUser += ":" + cum.getEntityById(mx.getLcMxUpUserId()).getUserName();
											fileType += ":" + "客户补充文件";
										}
										remark = mx_1.getLcMxRemark();//上一次客户确认的意见
									}
								}
								List<Object> list_d = new ArrayList<Object>();
								if(!filePath.equals("")){
									msg = "success";
									String[] fileTypeArr = fileType.split(":");
									String[] upUserArr = upUser.split(":");
									if(fileTypeArr.length == 1){//只存在一种类型的文件
										String[] fjNameArr = filePath.split(",");
										for(Integer i = 0 ; i < fjNameArr.length ; i++){
											Map<String,String> map_f = new HashMap<String,String>();
											String fileName_curr = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));//文件名称
											Integer lastIndex = fileName_curr.lastIndexOf("_");
											String lastFjName = fileName_curr.substring(lastIndex+1, fileName_curr.length());
											Integer lastIndex_1 = lastFjName.indexOf(".");
											String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());//文件格式
											String fjSize = FileOpration.getFileSize(filePath + fjNameArr[i]);//文件大小
											String downFilePath = fjNameArr[i];
											map_f.put("fileName", fileName_curr);
											map_f.put("fjGs", fjGs);
											map_f.put("fjSize", fjSize);
											map_f.put("fileType", fileType);
											map_f.put("fjSize", downFilePath);
											map_f.put("upUser", upUser);
											list_d.add(map_f);
										}
									}else{//存在两种类型的文件
										String[] fjNameArr_main = filePath.split(":");
										for(Integer i = 0 ; i < fjNameArr_main.length ; i++){
											String[] fjNameArr_sub = fjNameArr_main[i].split(",");
											for(Integer j = 0 ; j < fjNameArr_sub.length ; j++){
												Map<String,String> map_f = new HashMap<String,String>();
												String fileName_curr = fjNameArr_sub[j].substring((fjNameArr_sub[j].lastIndexOf("\\") + 1));//文件名称
												Integer lastIndex = fileName_curr.lastIndexOf("_");
												String lastFjName = fileName_curr.substring(lastIndex+1, fileName_curr.length());
												Integer lastIndex_1 = lastFjName.indexOf(".");
												String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());//文件格式
												String fjSize = FileOpration.getFileSize(filePath + fjNameArr_sub[j]);//文件大小
												String downFilePath = fjNameArr_sub[j];
												map_f.put("fileName", fileName_curr);
												map_f.put("fjGs", fjGs);
												map_f.put("fjSize", fjSize);
												map_f.put("fileType", fileTypeArr[i]);
												map_f.put("fjSize", downFilePath);
												map_f.put("upUser", upUserArr[i]);
												list_d.add(map_f);
											}
										}
									}
									map.put("lcNo", lcNo);//当前流程号
									map.put("fileInfo", list_d);//附件列表
									map.put("remark", remark);//意见/备注
								}else{
									msg = "noInfo";
								}
							}
						}
					}
				}
			}
		}else{
			msg = "noAbility";
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 流程细节处理
	 * @author  Administrator
	 * @ModifiedBy  
	 * @date  2018-9-18 下午08:47:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward dealLcDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String roleName = this.getLoginRoleName(request);
		boolean upFlag = false;
		String filePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\";
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "dealZl");//专利流程处理
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);//（公共参数）
				Integer currUserId = this.getLoginUserId(request);
				CpyUserInfo user = cum.getEntityById(currUserId);
				if(user != null && zlId > 0){
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						//只有在案件状态正常时（0）
						if(zl.getAjStopStatus().equals(0)){
							//获取当前最后一个未完成的流程
							List<ZlajLcInfoTb> lcList = lcm.listLastInfoByAjId(zlId);
							if(lcList.size() > 0){
								List<ZlajLcMxInfoTb> mxList = mxm.listLastInfoByLcId(lcList.get(0).getId());
								if(mxList.size() > 0){
									ZlajLcMxInfoTb lcmx = mxList.get(0);
									double lcNo = lcmx.getLcMxNo();//流程号
									String cpyDate = lcList.get(0).getLcCpyDate();
									if(lcmx.getLcMxEDate().equals("")){
										if(currUserId.equals(lcmx.getLcFzUserId())){
											msg = "success";
										}else{
											if(roleName.equals("管理员")){//管理员可以操作任何环节
												msg = "success";
											}
										}
										if(msg.equals("success")){
											String taskRemark = Transcode.unescape_new1("taskRemark", request);//任务备注（公共参数）
											Integer lcId = lcmx.getZlajLcInfoTb().getId();//流程编号
											Integer lcMxId = lcmx.getId();//流程明细编号
											if(lcNo != 6.0){//案件提交时需要先检查专利信息是否填写完成
												upFlag = lcm.updateComInfoById(lcId, currDate);//修改流程完成时间
											}
											if(lcNo >= 3.0 && lcNo < 4.0){//案件撰写/案件补正
												String upZxFile = CommonTools.getFinalStr("upZxFile", request);//撰写附件（参数）
												//修改撰写任务流程
												if(upFlag){
													mxm.updateEdateById(lcMxId, currUserId, currUserId, upZxFile, currDate, "", currDate, taskRemark,-1);
													if(!upZxFile.equals("")){
														String[] fjNameArr = upZxFile.split(",");
														for(Integer i = 0 ; i < fjNameArr.length ; i++){
															String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
															Integer lastIndex = fileName.lastIndexOf("_");
															String lastFjName = fileName.substring(lastIndex+1, fileName.length());
															Integer lastIndex_1 = lastFjName.indexOf(".");
															String fjVersion = lastFjName.substring(0, lastIndex_1);
															String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
															fjm.addFj(zlId, fjNameArr[i], fjVersion, "撰稿文件_V"+lcNo, fjGs, FileOpration.getFileSize(filePath + fjNameArr[i]), currUserId, currDate);
														}
													}
													lcNo += 1;
												}else{
													msg = "error";
												}
												if(msg.equals("success")){
													//增加下一个流程
													Integer nextLcId = lcm.addLcInfo(zlId, "专利审核", "专利审核", currDate, cpyDate, "", "",lcNo);
													if(nextLcId > 0){
														mxm.addLcMx(nextLcId, zl.getCheckUserId(), "专利审核", lcNo, currDate, "", "", 0, "", "",  0.0, "",-1);
														//修改案件状态
														zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"等待专利审核");
														mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getCheckUserId(), "cpyUser", "新任务通知：专利审核", "专利["+zl.getAjTitle()+"]已完成撰写，请及时完成专利审核工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
													}else{
														msg = "error";
													}
												}
											}else if(lcNo >= 4.0 && lcNo < 5.0){//案件审核
												Integer zxScore = CommonTools.getFinalInteger("zxScore", request);//员工撰写质量评分（0分表示审核失败）（参数）
												String upZxFile = CommonTools.getFinalStr("upZxFile", request);//审核人员上传的撰稿文件（参数）
												if(zxScore.equals(0) || zxScore.equals(1) || zxScore.equals(2) || zxScore.equals(5)){
													//修改流程详情
													//需要确认审核这块有没有上传的新文件
													mxm.updateEdateById(lcMxId, currUserId, currUserId, upZxFile, currDate, "", currDate, taskRemark,zxScore);
													if(!upZxFile.equals("")){
														String[] fjNameArr = upZxFile.split(",");
														for(Integer i = 0 ; i < fjNameArr.length ; i++){
															String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
															Integer lastIndex = fileName.lastIndexOf("_");
															String lastFjName = fileName.substring(lastIndex+1, fileName.length());
															Integer lastIndex_1 = lastFjName.indexOf(".");
															String fjVersion = lastFjName.substring(0, lastIndex_1);
															String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
															fjm.addFj(zlId, fjNameArr[i], fjVersion, "审核文件_V"+lcNo, fjGs, FileOpration.getFileSize(filePath + fjNameArr[i]), currUserId, currDate);
														}
													}
													if(zxScore.equals(0)){//审核未通过
														if(lcNo == 4.9){//不能再加
															lcNo = lcNo - 1 ;
														}else{
															lcNo = lcNo - 1 + 0.1;
														}
														lcNo = Convert.convertInputNumber_5(lcNo);//保留一位小数
														//增加撰稿修改环节
														Integer nextLcId = lcm.addLcInfo(zlId, "撰稿修改", "撰稿修改", currDate, cpyDate, "", "",lcNo);
														if(nextLcId > 0){
															mxm.addLcMx(nextLcId, zl.getZxUserId(), "撰稿修改", lcNo, currDate, "", "", 0, "", "",  0.0, "",-1);
															//修改专利的案件状态
															zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"撰稿修改-技术审核");
															//发送邮件
															mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getZxUserId(), "cpyUser", "新任务通知：撰稿修改", "专利["+zl.getAjTitle()+"]审核未通过，请及时完成专利撰稿修改工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
														}else{
															msg = "error";
														}
													}else{//审核通过
														List<ZlajLcInfoTb> lcList_t = lcm.listLcInfoByLcMz(zlId, "客户确认");//获取是否存在客户确认列表
														Integer lcLen = lcList_t.size();
														if(lcLen > 0){
															if(lcLen > 9){//一直停留在9
																lcLen = 9;
															}
															lcNo = 5.0 + (double)lcLen / 10;
														}else{
															lcNo = 5.0;//客户确认
														}
														lcNo = Convert.convertInputNumber_5(lcNo);//保留一位小数
														//增加下一个流程
														Integer nextLcId = lcm.addLcInfo(zlId, "客户确认", "客户确认", currDate, cpyDate, "", "",lcNo);
														if(nextLcId > 0){
															mxm.addLcMx(nextLcId, zl.getTjUserId(), "客户确认", lcNo, currDate, "", "", 0, "", "",  0.0, "",-1);
															//修改专利的案件状态
															zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"等待客户确认");
															//发送邮件
															mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getTjUserId(), "cpyUser", "新任务通知：定稿提交", "专利["+zl.getAjTitle()+"]审核已审核通过，请及时完成专利提交工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
															//审核成功，增加撰写人经验、撰写数量(增加到客户确认上完成)
														}else{
															msg = "error";
														}
													}
												}
											}else if(lcNo >= 5.0 && lcNo < 6.0){//客户确认
												//修改流程详情
												Integer cusCheckStatus = CommonTools.getFinalInteger("cusCheckStatus",request);//客户确认状态（0：未通过，1：已通过）
												String upZxFile = CommonTools.getFinalStr("upZxFile", request);//撰写附件（参数）
												//需要确认客户确认这块有没有上传的新文件
												
												mxm.updateEdateById(lcMxId, currUserId, currUserId, upZxFile, currDate, "", currDate, taskRemark,-1);
												if(!upZxFile.equals("")){//上传文件不为空
													String[] fjNameArr = upZxFile.split(",");
													for(Integer i = 0 ; i < fjNameArr.length ; i++){
														String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
														Integer lastIndex = fileName.lastIndexOf("_");
														String lastFjName = fileName.substring(lastIndex+1, fileName.length());
														Integer lastIndex_1 = lastFjName.indexOf(".");
														String fjVersion = lastFjName.substring(0, lastIndex_1);
														String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
														fjm.addFj(zlId, fjNameArr[i], fjVersion, "客户补充文件_V"+lcNo, fjGs, FileOpration.getFileSize(filePath + fjNameArr[i]), currUserId, currDate);
													}
												}
												if(cusCheckStatus.equals(0)){//客户确认未通过
													if(lcNo == 5.9){//不能再加
														lcNo = lcNo - 2 ;
													}else{
														//客户确认时的流程号不一定和技术上审核、撰稿修改统一
														List<ZlajLcInfoTb> lcList_t = lcm.listLcInfoByLcMz(zlId, "撰稿修改");//获取是否存在撰稿修改列表
														Integer lcLen = lcList_t.size();
														if(lcLen > 0){
															//获取最后一次撰稿修改的流程号
															Double zg_lcNo_final = lcList_t.get(lcLen - 1).getLcNo();
															if(zg_lcNo_final == 3.9){//一直停留在3.9
																lcNo = 3.9;
															}else{
																lcNo = zg_lcNo_final + 0.1;
															}
														}
													}
													lcNo = Convert.convertInputNumber_5(lcNo);//保留一位小数
													//增加撰稿修改环节
													Integer nextLcId = lcm.addLcInfo(zlId, "撰稿修改", "撰稿修改", currDate, cpyDate, "", "",lcNo);
													if(nextLcId > 0){
														mxm.addLcMx(nextLcId, zl.getZxUserId(), "撰稿修改", lcNo, currDate, "", "", 0, "", "",  0.0, "",-1);
														//修改专利的案件状态
														zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"撰稿修改-客户确认");
														//发送邮件
														mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getZxUserId(), "cpyUser", "新任务通知：撰稿修改", "专利["+zl.getAjTitle()+"]客户确认未通过，请及时完成专利撰稿修改工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
													}else{
														msg = "error";
													}
												}else{//审核通过
													lcNo = 6;//定稿提交
													//增加下一个流程
													Integer nextLcId = lcm.addLcInfo(zlId, "定稿提交", "定稿提交", currDate, cpyDate, "", "",6.0);
													if(nextLcId > 0){
														mxm.addLcMx(nextLcId, zl.getTjUserId(), "定稿提交", lcNo, currDate, "", "", 0, "", "",  0.0, "",-1);
														//修改专利的案件状态
														zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"等待定稿提交");
														//发送邮件
														mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getTjUserId(), "cpyUser", "新任务通知：定稿提交", "专利["+zl.getAjTitle()+"]审核已审核通过，请及时完成专利提交工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
														//审核成功，增加撰写人经验、撰写数量
														//获取最后一次专利审核的分数
														List<ZlajLcMxInfoTb> mxList_spec = mxm.listSpecInfoInfoByOpt(zlId, "专利审核");
														Integer mxNum = mxList_spec.size();
														if(mxNum > 0){//肯定存在记录
															cum.updateInfoById(currUserId, 1, "", "", mxList_spec.get(mxNum - 1).getLcPjScore());
														}
													}else{
														msg = "error";
													}
												}
											}else if(lcNo == 6.0){//案件定稿提交
												//提交之前需要先判断专利的信息是否填写完成
												String upZxFile = CommonTools.getFinalStr("upZxFile", request);//撰写附件（参数），可以在定稿时增加，也可以不增加
												String zlTitle = Transcode.unescape_new1("zlTitle", request);//定稿时提交的专利标题
												String sqrId = CommonTools.getFinalStr("sqrId", request);//申请人
												String sqrName = Transcode.unescape_new1("sqrName", request);
												String fmrId = CommonTools.getFinalStr("fmrId", request);//发明人
												Double ajFjInfo = CommonTools.getFinalDouble("ajFjInfo", request);//费减
												if(!sqrId.equals("") && !fmrId.equals("") && !upZxFile.equals("")){
													//增加附件信息
													String[] fjNameArr = upZxFile.split(",");
													for(Integer i = 0 ; i < fjNameArr.length ; i++){
														String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
														Integer lastIndex = fileName.lastIndexOf("_");
														String lastFjName = fileName.substring(lastIndex+1, fileName.length());
														Integer lastIndex_1 = lastFjName.indexOf(".");
														String fjVersion = lastFjName.substring(0, lastIndex_1);
														String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
														fjm.addFj(zlId, fjNameArr[i], fjVersion, "定稿文件", fjGs, FileOpration.getFileSize(filePath + fjNameArr[i]), currUserId, currDate);
													}
													mxm.updateEdateById(lcMxId, zl.getTjUserId(), currUserId, upZxFile, currDate, "", currDate, taskRemark,-1);
													//修改流程完成时间
													lcm.updateComInfoById(lcId, currDate);
													//修改必须的信息
													zlm.updateBasicInfoById(zlId, zlTitle, sqrId, sqrName, fmrId, "", ajFjInfo);
													lcNo = 7.0;
													zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"等待导入受理/缴费通知书");
//													//增加下一个流程
//													Integer nextLcId = lcm.addLcInfo(zlId, "导入通知书", "导入受理通知书", currDate, CurrentTime.getFinalDate(currDate, 30), "", "",7.0);//导入通知书期限1个月
//													if(nextLcId > 0){
//														mxm.addLcMx(nextLcId, zl.getTzsUserId(), "导入受理通知书", lcNo, currDate, "", "", 0, "", "", "");
//														//发送邮件
//														mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getTzsUserId(), "cpyUser", "新任务通知：导入受理/缴费通知书", "专利["+zl.getAjTitle()+"]审核已完成定稿提交，请及时完成导入受理/缴费通知书工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
//													}
													//发送邮件
													mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getTzsUserId(), "cpyUser", "新任务通知：导入受理/缴费通知书", "专利["+zl.getAjTitle()+"]审核已完成定稿提交，请及时完成导入受理/缴费通知书工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
												}else{
													msg = "inComInfo";//信息不完整
												}
											}/**else if(lcNo == 8.1 || lcNo == 8.2){//缴纳受理费或者实质审查费(单独接口处理)
												Double csFee = CommonTools.getFinalDouble("csFee", request);//初审费
												Double ssFee = CommonTools.getFinalDouble("ssFee", request);//实审费（发明专利才有，其他专利为0.0）
												String upZxFile = CommonTools.getFinalStr("upZxFile", request);//缴费图片
												List<ZlajLcMxInfoTb> mxList_1 = mxm.listUnComInfoByOpt("受理费催缴", 8.1, lcId);
												if(mxList_1.size() > 0){
													ZlajLcMxInfoTb mx_1 = mxList_1.get(0);
													Double csFee_db = Double.parseDouble(mx_1.getLcMxRemark().split(":")[1]);
													if(csFee_db.equals(csFee)){
														mxm.updateEdateById(mx_1.getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "");
														if(ssFee > 0){
															List<ZlajLcMxInfoTb> mxList_2 = mxm.listUnComInfoByOpt("实质审查费催缴", 8.2, lcId);
															if(mxList_2.size() > 0){
																mxm.updateEdateById(mxList_2.get(0).getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "");
																msg = "success";
															}
															//缴费完成，等待导入初步审查合格通知书或者补正/审查意见通知书
															lcNo = 9.0;
															zlm.updateZlStatusById(zlId, String.valueOf(lcNo),"等待导入初审通知书");
															//增加下一个流程
															Integer nextLcId = lcm.addLcInfo(zlId, "导入通知书", "导入初审通知书", currDate, CurrentTime.getFinalDate(currDate, 30), "", "",lcNo);//导入通知书期限1个月
															if(nextLcId > 0){
																mxm.addLcMx(nextLcId, zl.getTzsUserId(), "导入初审通知书", lcNo, currDate, "", "", 0, "", "",  0.0, "");
																//发送邮件
																mm.addMail("taslM", Constants.SYSTEM_EMAIL_ACCOUNT, zl.getTzsUserId(), "cpyUser", "新任务通知：导入初审通知书", "专利["+zl.getAjTitle()+"]已进入初审阶段，请及时完成导入初审通知书工作!<br>[<a href='www.baidu.com'>点击前往页面操作</a>]");
															}
														}else{
															msg = "success";
														}
														//上传缴费图
														if(!upZxFile.equals("")){
															String[] fjNameArr = upZxFile.split(",");
															for(Integer i = 0 ; i < fjNameArr.length ; i++){
																String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
																Integer lastIndex = fileName.lastIndexOf("_");
																String lastFjName = fileName.substring(lastIndex+1, fileName.length());
																Integer lastIndex_1 = lastFjName.indexOf(".");
																String fjVersion = lastFjName.substring(0, lastIndex_1);
																String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
																fjm.addFj(zlId, fileName, fjVersion, "缴费凭证", fjGs, FileOpration.getFileSize(filePath + fileName), currUserId, currDate);
															}
														}
													}else{
														msg = "feeError";//缴费错误
													}
												}
											}**/
										}else{
											msg = "fzrError";//当前操作用户和当前流程负责人不一致
										}
										
									}
								}
							}
						}
					}
				}
			}
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取代理机构下所有的专利的所有费用
	 * @description
	 * @author Administrator
	 * @date 2018-10-29 下午04:46:28
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getAllFeeInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		Integer zlId = CommonTools.getFinalInteger("zlId", request);
		Integer currLoginUserId = this.getLoginUserId(request);
		Integer cpyId = 0;
		if(this.getLoginType(request).equals("cpyUser")){
			cpyId = cum.getEntityById(currLoginUserId).getCpyInfoTb().getId();//当前登录人员所在的代理机构
			List<ZlajFeeInfoTb> feeList = fm.listAllFeeByZlId(zlId, cpyId);
			if(feeList.size() > 0){
				ZlajMainInfoTb zl  = feeList.get(0).getZlajMainInfoTb();
				String zlName = zl.getAjTitle();
				String zlNo = zl.getAjNoGf();
				// 第一步，创建一个webbook，对应一个Excel文件  
		        HSSFWorkbook wb = new HSSFWorkbook();  
		        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
		        HSSFSheet sheet = wb.createSheet(zlName+"_"+zlNo+"_费用清单");  
		        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
		        HSSFRow row = sheet.createRow(0);  
		        // 第四步，创建单元格，并设置值表头 设置表头居中  
		        HSSFCellStyle style = wb.createCellStyle();  
		        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
	            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
		        HSSFCell cell = row.createCell(0); 
		        cell.setCellStyle(style);  
		        cell.setCellValue("费用名称"); 
		        cell = row.createCell(1);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("费用金额(RMB)");  
		        cell = row.createCell(2);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("费减");  
		        cell = row.createCell(3);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("缴费期限(机构)");  
		        cell = row.createCell(4);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("费用期限(官方)"); 
		        cell = row.createCell(5);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("缴费日期"); 
		        cell = row.createCell(6);  
		        cell.setCellStyle(style);  
		        cell.setCellValue("年度范围"); 
		        cell = row.createCell(7);
		        cell.setCellStyle(style);  
		        cell.setCellValue("代缴状态"); 
		        cell = row.createCell(8);
		        cell.setCellStyle(style);  
		        cell.setCellValue("备注"); 
		        cell = row.createCell(9);
		        cell.setCellStyle(style);  
		        cell.setCellValue("备注"); 
				for(Iterator<ZlajFeeInfoTb> it = feeList.iterator() ; it.hasNext();){
					ZlajFeeInfoTb fee = it.next();
					
				}
			}
		}
		
		return null;
	}
	
	/**
	 * 缴纳所有费用(代理机构代缴)
	 * @description
	 * @author Administrator
	 * @date 2018-10-11 上午10:07:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward payFeeDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajFjInfoManager fjm = (ZlajFjInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FJ_INFO);
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		String msg = "error";
		String currDate = CurrentTime.getStringDate();
		Map<String,String> map = new HashMap<String,String>();
		boolean abilityFlag = false;
		String roleName = this.getLoginRoleName(request);
		String filePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\";
		String lcNo = "";//当前流程号
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "dealZl");//只有具有专利流程处理权限的员工才能进行流程处理
			}
			if(abilityFlag){
				Integer zlId = CommonTools.getFinalInteger("zlId", request);//（公共参数）
				String payFeeOpt = CommonTools.getFinalStr("payFeeOpt", request);//cs_fee(初审费),cs_ss_fee(初审、实审费一起缴纳),ss_fee(实审费)
				Integer currUserId = this.getLoginUserId(request);
				CpyUserInfo user = cum.getEntityById(currUserId);
				if(user != null && zlId > 0){
					List<ZlajMainInfoTb> zlList = zlm.listSpecInfoById(zlId, user.getCpyInfoTb().getId());
					if(zlList.size() > 0){
						ZlajMainInfoTb zl = zlList.get(0);
						//只有在案件状态正常时（0）
						if(zl.getAjStopStatus().equals(0)){
							lcNo = zl.getAjStatus();
							if(currUserId.equals(zl.getFeeUserId())){//只有缴费人员才能进行缴费

								Integer feeTypeId = 0;
								if(zl.getAjType().equals("fm")){
									feeTypeId = 1;//对应的是发明专利申请费
								}else if(zl.getAjType().equals("syxx")){
									feeTypeId = 4;//对应的是实用新型专利申请费
								}else if(zl.getAjType().equals("wg")){
									feeTypeId = 5;//对应的是外观设计专利申请费
								}
								Double csFee = CommonTools.getFinalDouble("csFee", request);//初审费
								Double ssFee = CommonTools.getFinalDouble("ssFee", request);//实审费（发明专利才有，其他专利为0.0）
								Integer djStatus = CommonTools.getFinalInteger("djStatus", request);//代缴状态(0-自缴，1-代缴)
								String upZxFile = CommonTools.getFinalStr("upZxFile", request);//缴费图片
								if(payFeeOpt.equals("cs_fee")){
									//获取是否存在受理费催缴的流程
									List<ZlajLcMxInfoTb> mxList = mxm.listSpecInfoInfoByOpt(zlId, "受理费催缴");//所有专利共有
									if(mxList.size() > 0){//说明已经导入过费用减缓审批/缴纳申请费通知书
										ZlajLcMxInfoTb lcmx = mxList.get(0);
										if(!lcmx.getLcMxEDate().equals("")){//没有缴纳受理费
											if(csFee.equals(lcmx.getLcMxFee())){//初审费数字正确
												mxm.updateEdateById(lcmx.getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "",-1);
												lcm.updateComInfoById(lcmx.getZlajLcInfoTb().getId(), currDate);
												List<ZlajFeeInfoTb> feeList = fm.listInfoByOpt(zlId, feeTypeId);
												if(feeList.size() > 0){
													fm.updateFeeInfoById(feeList.get(0).getId(), ssFee, "缴纳受理费", 1, djStatus, currDate, upZxFile);
												}
												if(lcNo.equals("8.0")){//缴纳受理费
													//正常顺序
													zlm.updateZlStatusById(zlId, "9.0", "初审中");
												}
												msg = "success";
											}else{
												msg = "feeNoMatch";//费用不正确
											}
										}else{
											msg = "feeExist";//费用已缴
										}
									}else{
										msg = "noInputTzs";//需要导入受理、缴费通知书后才能进行缴费
									}
								}else if(payFeeOpt.equals("cs_ss_fee") && zl.getAjType().equals("fm")){//一起缴纳
									//获取是否存在受理费催缴的流程
									List<ZlajLcMxInfoTb> mxList = mxm.listSpecInfoInfoByOpt(zlId, "受理费催缴");//所有专利共有
									//获取是否存在实质审查费催缴的流程
									List<ZlajLcMxInfoTb> mxList_1 = mxm.listSpecInfoInfoByOpt(zlId, "实质审查费催缴");//发明专利私有
									if(mxList_1.size() == 0){//没缴
										mxList_1 = mxm.listSpecInfoInfoByOpt(zlId, "实质审查费催缴-无申请日");//发明专利私有
									}
									if(mxList.size() > 0 && mxList_1.size() > 0){//说明已经导入过费用减缓审批/缴纳申请费通知书
										ZlajLcMxInfoTb lcmx = mxList.get(0);
										ZlajLcMxInfoTb lcmx_1 = mxList_1.get(0);
										boolean ssFeeFlag = (lcmx_1.getLcMxEDate().equals("") || lcmx_1.getLcMxEDate().equals("noDate"));//未缴纳
										if(!lcmx.getLcMxEDate().equals("") && ssFeeFlag){//没缴受理费和实审费
											if(csFee.equals(lcmx.getLcMxFee()) && ssFee.equals(lcmx_1.getLcMxFee())){//初、实审费数字正确
												mxm.updateEdateById(lcmx.getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "",-1);
												lcm.updateComInfoById(lcmx.getZlajLcInfoTb().getId(), currDate);
												List<ZlajFeeInfoTb> feeList = fm.listInfoByOpt(zlId, feeTypeId);
												if(feeList.size() > 0){
													fm.updateFeeInfoById(feeList.get(0).getId(), ssFee, "缴纳受理费", 1, djStatus, currDate, upZxFile);
												}
												mxm.updateEdateById(lcmx_1.getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "",-1);
												lcm.updateComInfoById(lcmx_1.getZlajLcInfoTb().getId(), currDate);
												List<ZlajFeeInfoTb> feeList_1 = fm.listInfoByOpt(zlId, 3);//3对应的是实审费
												if(feeList_1.size() > 0){
													fm.updateFeeInfoById(feeList_1.get(0).getId(), ssFee, "缴纳实审费", 1, djStatus, currDate, upZxFile);
												}
												if(lcNo.equals("8.0")){//缴纳受理费、实质审查费
													//正常顺序
													zlm.updateZlStatusById(zlId, "9.0", "初审中");
												}
												msg = "success";
											}else{
												msg = "feeNoMatch";//费用不正确
											}
										}else{
											msg = "feeExist";//费用已缴
										}
									}else{
										msg = "noInputTzs";//需要导入受理、缴费通知书后才能进行缴费
									}
								}else if(payFeeOpt.equals("ss_fee") && zl.getAjType().equals("fm")){//缴纳实审费
									//单独缴纳实质审查费
									//获取是否存在实质审查费催缴的流程
									List<ZlajLcMxInfoTb> mxList = mxm.listSpecInfoInfoByOpt(zlId, "实质审查费催缴");//发明专利私有
									if(mxList.size() == 0){
										mxList = mxm.listSpecInfoInfoByOpt(zlId, "实质审查费催缴-无申请日");//发明专利私有
									}
									if(mxList.size() > 0){
										ZlajLcMxInfoTb lcmx = mxList.get(0);
										boolean ssFeeFlag = (lcmx.getLcMxEDate().equals("") || lcmx.getLcMxEDate().equals("noDate"));//未缴纳
										if(ssFeeFlag){
											if(ssFee.equals(lcmx.getLcMxFee())){
												mxm.updateEdateById(lcmx.getId(), currUserId, currUserId, upZxFile, currDate, "", currDate, "",-1);
												lcm.updateComInfoById(lcmx.getZlajLcInfoTb().getId(), currDate);
												List<ZlajFeeInfoTb> feeList_1 = fm.listInfoByOpt(zlId, 3);//3对应的是实审费
												if(feeList_1.size() > 0){
													fm.updateFeeInfoById(feeList_1.get(0).getId(), ssFee, "缴纳实审费", 1, djStatus, currDate, upZxFile);
												}
												if(Double.parseDouble(lcNo) >= 9.0){//如果是在初审后缴的实审费，统一归在费用催缴【缴纳实质审查费中】,否则归在8流程中
													mxm.updateMxNoById(lcmx.getId(), 12.0);
													lcm.updateLcNoInfoById(lcmx.getZlajLcInfoTb().getId(), 12.0);
												}
												if(lcNo.equals("12.0")){//如果是在这个环节缴纳实审费，需要修改下个环节状态为实审中
													zlm.updateZlStatusById(zlId, "13.0", "实审中");
												}
												msg = "success";
											}else{
												msg = "feeNoMatch";//费用不正确
											}
										}else{
											msg = "feeExist";//费用已缴
										}
									}else{
										msg = "noInputTzs";//需要导入受理、缴费通知书后才能进行缴费
									}
								}
								
								
								//上传缴费图
								if(!upZxFile.equals("")){
									String[] fjNameArr = upZxFile.split(",");
									for(Integer i = 0 ; i < fjNameArr.length ; i++){
										String fileName = fjNameArr[i].substring((fjNameArr[i].lastIndexOf("\\") + 1));
										Integer lastIndex = fileName.lastIndexOf("_");
										String lastFjName = fileName.substring(lastIndex+1, fileName.length());
										Integer lastIndex_1 = lastFjName.indexOf(".");
										String fjVersion = lastFjName.substring(0, lastIndex_1);
										String fjGs = lastFjName.substring(lastIndex_1+1, lastFjName.length());
										fjm.addFj(zlId, fileName, fjVersion, "缴费凭证", fjGs, FileOpration.getFileSize(filePath + fileName), currUserId, currDate);
									}
								}
								
							}
						}
					}
				}
			}
		}
		return null;
	}
	
	
	/**
	 * 根据专利号获取申请地区和申请日（优先权时使用）
	 * @description
	 * @author Administrator
	 * @date 2018-10-9 上午09:07:45
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		String ajNoGf = Transcode.unescape_new1("ajNoGf", request);
		List<ZlajMainInfoTb>  zmList = zlm.listSpecInfoByZlNo(ajNoGf);
		String msg = "noInfo";
		Map<String,String> map = new HashMap<String,String>();
		if(zmList.size() > 0){
			ZlajMainInfoTb zl = zmList.get(0);
			msg = "success";
			map.put("sqAddress", zl.getAjSqAddress());
			map.put("sqDate", zl.getAjApplyDate());
		}
		map.put("result", msg);
		this.getJsonPkg(map, response);
		return null;
	}
	
	
	/**listSpecInfoByZlNo
	 * 处理通知书明细
	 * @description
	 * @author Administrator
	 * @date 2018-9-22 上午09:32:42
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward dealTzsDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ZlajMainInfoManager zlm = (ZlajMainInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_MAIN_INFO);
		ZlajLcInfoManager lcm = (ZlajLcInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_INFO);
		ZlajLcMxInfoManager mxm = (ZlajLcMxInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_LC_MX_INFO);
		ZlajTzsInfoManager tzsm = (ZlajTzsInfoManager)  AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_TZS_INFO);
		MailInfoManager mm = (MailInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MAIL_INFO);
		ZlajFeeInfoManager fm = (ZlajFeeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ZLAJ_FEE_INFO);
		CpyUserInfoManager cum = (CpyUserInfoManager) AppFactory.instance(null).getApp(Constants.WEB_CPY_USER_INFO); 
		String roleName = this.getLoginRoleName(request);
		String zipPath = Transcode.unescape_new1("zipPath", request);//上传的通知书路径cpyUser/u_id/###.zip
		String filePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" + zipPath;
		String lcNo = "";//当前流程号
		boolean abilityFlag = false;
		Integer cpyId = 0;
		if(this.getLoginType(request).equals("cpyUser")){
			//判断权限
			//获取当前用户是否有修改权限
			if(roleName.equals("管理员")){
				abilityFlag = true;
			}else{
				abilityFlag = Ability.checkAuthorization(this.getLoginRoleId(request), "dealZl");//只有具有专利流程处理权限的员工才能进行流程处理
			}
			Integer currUserId = this.getLoginUserId(request);
			CpyUserInfo user = cum.getEntityById(currUserId);
			if(user != null){
				cpyId = user.getCpyInfoTb().getId();
				
				
				Map<String,Object> map = new HashMap<String,Object>();
				List<TzsJson> tjList = new ArrayList<TzsJson>();
				//读取通知书
				for(Integer i = 0 ; i < zipPath.split(",").length ; i++){
					tjList.addAll(ReadZipFile.readZipFile_new("E:\\"+zipPath.split(",")[i],1,1,0));
				}
				//按照发文日进行排序
				Collections.sort(tjList);
				//然后进行数据库操作
				for(int j = 0; j < tjList.size(); j++){
		        	TzsJson tJson = tjList.get(j);
		        	String fwSerial = tJson.getFwSerial();//发文序号
		        	String ajNoGf = tJson.getAjNoGf();//专利/申请号
		        	String tzsName = tJson.getTzsName();//通知书
		        	String zlName = tJson.getZlName();//专利名称
		        	String fwDate = tJson.getFwDate();//发文日期
		        	String sqrName = tJson.getSqrName();//申请人
		        	String applyDate = tJson.getApplyDate();//申请日期
		        	String zlType = tJson.getZlType();//战力类型
		        	String fjApplyDate = tJson.getFjApplyDate();//费减请求日期
		        	String fjRecord = tJson.getFjRecord();//费减记录
		        	String feeDate = tJson.getFeeEdate();//缴费截止日期/补正截止日期 
		        	String fjRate = tJson.getFjRate();//费减比率 
		        	List<FeeDetailJson> fdList = tJson.getFdList();//费用明细
		        	if(fdList.size() > 0){
		        		for(Integer k = 0 ; k < fdList.size() ; k++){
		        			FeeDetailJson fdJson = fdList.get(k);
		        			System.out.println(fdJson.getFeeName()+" :"+fdJson.getFeeAmount());
		        		}
		        	}
		        	String yearNo = tJson.getYearNo();//年度数字
		        	List<LateFeeJson> lfList = tJson.getLfList();//年费滞纳金
		        	if(lfList.size() > 0){
		        		for(Integer k = 0 ; k < lfList.size() ; k++){
		        			LateFeeJson lfJson = lfList.get(k);
		        			System.out.println("缴费时间段："+lfJson.getFeeSDate()+"至"+lfJson.getFeeEDate() + " 滞纳金 " + lfJson.getLateFee());
		        		}
		        	}
		        	String tzsPath = tJson.getZipPath();//上传的压缩包位置
		        	//执行动作
		        	List<ZlajMainInfoTb> zlList = zlm.listSpecInfoByZlNo(ajNoGf);
		        	if(zlList.size() == 0){//说明系统中还没有该专利号的专利/也可能是之前没导入过通知书
		        		zlList = zlm.listSpecInfoByOpt(zlName, sqrName, zlType,cpyId);
		        	}
		        	Integer zlNum = zlList.size();
		        	if(zlNum > 0){
		        		if(zlNum.equals(1)){
		        			
		        		}else{//多个
		        			
		        		}
		        	}else{//不存在
	    				map.put("readInfo", "noInfo");//该通知书没有匹配到专利
	    				map.put("tzsName", tzsName);
						//删除当前通知书压缩包
						FileOpration.deleteFile(filePath);
		        	}
				}
			}
		}

//		map.put("result", list_d);
//		this.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 下载文件
	 * @description
	 * @author wm
	 * @date 2018-9-3 上午10:05:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward downFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String fileUrl = Transcode.unescape_new1("fileUrl", request);
		String absoFilePath = "";//绝对地址
		String fileName = "";
		OutputStream fos = null;
        BufferedOutputStream bos = null;
        InputStream fis = null;
        BufferedInputStream bis = null;
		if(!fileUrl.equals("")){
			fileName = fileUrl.substring(fileUrl.lastIndexOf("\\")+1,fileUrl.length());
			absoFilePath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\" +fileUrl;
			try  {  
		        //第七步 下载文件到客户端
		        
		        fis = new FileInputStream(new File(absoFilePath));
				bis = new BufferedInputStream(fis);
				fos = response.getOutputStream();
				bos = new BufferedOutputStream(fos);
				fileName = URLEncoder.encode(fileName,"UTF-8");
				//这个就就是弹出下载对话框的关键代码
				response.setHeader("Pragma", "No-cache");
				response.setHeader("Cache-Control", "No-cache");
				response.setDateHeader("Expires", 0); 
		        response.setHeader("Content-disposition","attachment;filename=" +fileName);
		        response.setContentType("application/x-download");
		        int bytesRead = 0;
		        byte[] buffer = new byte[8192];
		        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
		        	fos.write(buffer, 0, bytesRead);
		        } 
		        fos.flush();
		        fis.close();
		        bis.close();
		        fos.close();
		        bos.close();
		    } catch (IOException e){  
		        e.printStackTrace();  
		    }
		}
		return null;
	}
}